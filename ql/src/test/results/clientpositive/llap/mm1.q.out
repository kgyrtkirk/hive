PREHOOK: query: drop materialized view if exists mv1
PREHOOK: type: DROP_MATERIALIZED_VIEW
POSTHOOK: query: drop materialized view if exists mv1
POSTHOOK: type: DROP_MATERIALIZED_VIEW
PREHOOK: query: drop materialized view if exists mv2
PREHOOK: type: DROP_MATERIALIZED_VIEW
POSTHOOK: query: drop materialized view if exists mv2
POSTHOOK: type: DROP_MATERIALIZED_VIEW
PREHOOK: query: drop table if exists emps
PREHOOK: type: DROPTABLE
POSTHOOK: query: drop table if exists emps
POSTHOOK: type: DROPTABLE
PREHOOK: query: drop table if exists depts
PREHOOK: type: DROPTABLE
POSTHOOK: query: drop table if exists depts
POSTHOOK: type: DROPTABLE
PREHOOK: query: drop materialized view if exists mv1_n2
PREHOOK: type: DROP_MATERIALIZED_VIEW
POSTHOOK: query: drop materialized view if exists mv1_n2
POSTHOOK: type: DROP_MATERIALIZED_VIEW
PREHOOK: query: drop materialized view if exists mv1_n0
PREHOOK: type: DROP_MATERIALIZED_VIEW
POSTHOOK: query: drop materialized view if exists mv1_n0
POSTHOOK: type: DROP_MATERIALIZED_VIEW
PREHOOK: query: drop table if exists emps_n3
PREHOOK: type: DROPTABLE
POSTHOOK: query: drop table if exists emps_n3
POSTHOOK: type: DROPTABLE
PREHOOK: query: drop table if exists depts_n2
PREHOOK: type: DROPTABLE
POSTHOOK: query: drop table if exists depts_n2
POSTHOOK: type: DROPTABLE
PREHOOK: query: drop table if exists dependents_n2
PREHOOK: type: DROPTABLE
POSTHOOK: query: drop table if exists dependents_n2
POSTHOOK: type: DROPTABLE
PREHOOK: query: drop table if exists locations_n2
PREHOOK: type: DROPTABLE
POSTHOOK: query: drop table if exists locations_n2
POSTHOOK: type: DROPTABLE
PREHOOK: query: drop table if exists emps_n0
PREHOOK: type: DROPTABLE
POSTHOOK: query: drop table if exists emps_n0
POSTHOOK: type: DROPTABLE
PREHOOK: query: drop table if exists depts_n0
PREHOOK: type: DROPTABLE
POSTHOOK: query: drop table if exists depts_n0
POSTHOOK: type: DROPTABLE
PREHOOK: query: drop table if exists dependents_n0
PREHOOK: type: DROPTABLE
POSTHOOK: query: drop table if exists dependents_n0
POSTHOOK: type: DROPTABLE
PREHOOK: query: drop table if exists locations_n0
PREHOOK: type: DROPTABLE
POSTHOOK: query: drop table if exists locations_n0
POSTHOOK: type: DROPTABLE
PREHOOK: query: CREATE TABLE emps (
  empid INT,
  deptno INT,
  name VARCHAR(256),
  salary FLOAT,
  hire_date int)
STORED AS ORC
TBLPROPERTIES ('transactional'='true')
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@emps
POSTHOOK: query: CREATE TABLE emps (
  empid INT,
  deptno INT,
  name VARCHAR(256),
  salary FLOAT,
  hire_date int)
STORED AS ORC
TBLPROPERTIES ('transactional'='true')
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@emps
PREHOOK: query: CREATE TABLE depts (
  deptno INT,
  deptname VARCHAR(256),
  locationid INT)
STORED AS ORC
TBLPROPERTIES ('transactional'='true')
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@depts
POSTHOOK: query: CREATE TABLE depts (
  deptno INT,
  deptname VARCHAR(256),
  locationid INT)
STORED AS ORC
TBLPROPERTIES ('transactional'='true')
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@depts
PREHOOK: query: insert into emps values (100, 10, 'Bill', 10000, 1000), (200, 20, 'Eric', 8000, 500),
  (150, 10, 'Sebastian', 7000, null), (110, 10, 'Theodore', 10000, 250), (120, 10, 'Bill', 10000, 250)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@emps
POSTHOOK: query: insert into emps values (100, 10, 'Bill', 10000, 1000), (200, 20, 'Eric', 8000, 500),
  (150, 10, 'Sebastian', 7000, null), (110, 10, 'Theodore', 10000, 250), (120, 10, 'Bill', 10000, 250)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@emps
POSTHOOK: Lineage: emps.deptno SCRIPT []
POSTHOOK: Lineage: emps.empid SCRIPT []
POSTHOOK: Lineage: emps.hire_date SCRIPT []
POSTHOOK: Lineage: emps.name SCRIPT []
POSTHOOK: Lineage: emps.salary SCRIPT []
PREHOOK: query: insert into depts values (10, 'Sales', 10), (30, 'Marketing', null), (20, 'HR', 20)
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@depts
POSTHOOK: query: insert into depts values (10, 'Sales', 10), (30, 'Marketing', null), (20, 'HR', 20)
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@depts
POSTHOOK: Lineage: depts.deptname SCRIPT []
POSTHOOK: Lineage: depts.deptno SCRIPT []
POSTHOOK: Lineage: depts.locationid SCRIPT []
PREHOOK: query: alter table emps add constraint pk1 primary key (empid) disable novalidate rely
PREHOOK: type: ALTERTABLE_ADDCONSTRAINT
POSTHOOK: query: alter table emps add constraint pk1 primary key (empid) disable novalidate rely
POSTHOOK: type: ALTERTABLE_ADDCONSTRAINT
PREHOOK: query: alter table depts add constraint pk2 primary key (deptno) disable novalidate rely
PREHOOK: type: ALTERTABLE_ADDCONSTRAINT
POSTHOOK: query: alter table depts add constraint pk2 primary key (deptno) disable novalidate rely
POSTHOOK: type: ALTERTABLE_ADDCONSTRAINT
PREHOOK: query: alter table emps add constraint fk1 foreign key (deptno) references depts(deptno) disable novalidate rely
PREHOOK: type: ALTERTABLE_ADDCONSTRAINT
POSTHOOK: query: alter table emps add constraint fk1 foreign key (deptno) references depts(deptno) disable novalidate rely
POSTHOOK: type: ALTERTABLE_ADDCONSTRAINT
PREHOOK: query: CREATE MATERIALIZED VIEW mv1
AS
SELECT empid, deptname, hire_date
FROM emps JOIN depts
  using (deptno)
  -- ON (emps.deptno = depts.deptno)
WHERE hire_date >= 500
PREHOOK: type: CREATE_MATERIALIZED_VIEW
PREHOOK: Input: default@depts
PREHOOK: Input: default@emps
PREHOOK: Output: database:default
PREHOOK: Output: default@mv1
POSTHOOK: query: CREATE MATERIALIZED VIEW mv1
AS
SELECT empid, deptname, hire_date
FROM emps JOIN depts
  using (deptno)
  -- ON (emps.deptno = depts.deptno)
WHERE hire_date >= 500
POSTHOOK: type: CREATE_MATERIALIZED_VIEW
POSTHOOK: Input: default@depts
POSTHOOK: Input: default@emps
POSTHOOK: Output: database:default
POSTHOOK: Output: default@mv1
PREHOOK: query: explain
SELECT empid, deptname
FROM emps
JOIN depts
  using (deptno)
WHERE hire_date >= 600
    AND hire_date <= 1200
PREHOOK: type: QUERY
PREHOOK: Input: default@depts
PREHOOK: Input: default@emps
#### A masked pattern was here ####
POSTHOOK: query: explain
SELECT empid, deptname
FROM emps
JOIN depts
  using (deptno)
WHERE hire_date >= 600
    AND hire_date <= 1200
POSTHOOK: type: QUERY
POSTHOOK: Input: default@depts
POSTHOOK: Input: default@emps
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 3 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: emps
                  filterExpr: (hire_date BETWEEN 600 AND 1200 and deptno is not null) (type: boolean)
                  Statistics: Num rows: 5 Data size: 60 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: (hire_date BETWEEN 600 AND 1200 and deptno is not null) (type: boolean)
                    Statistics: Num rows: 3 Data size: 36 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: empid (type: int), deptno (type: int)
                      outputColumnNames: _col0, _col1
                      Statistics: Num rows: 3 Data size: 24 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col1 (type: int)
                        null sort order: z
                        sort order: +
                        Map-reduce partition columns: _col1 (type: int)
                        Statistics: Num rows: 3 Data size: 24 Basic stats: COMPLETE Column stats: COMPLETE
                        value expressions: _col0 (type: int)
            Execution mode: vectorized, llap
            LLAP IO: may be used (ACID table)
        Map 3 
            Map Operator Tree:
                TableScan
                  alias: depts
                  Statistics: Num rows: 3 Data size: 279 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: deptno (type: int), deptname (type: varchar(256))
                    outputColumnNames: _col0, _col1
                    Statistics: Num rows: 3 Data size: 279 Basic stats: COMPLETE Column stats: COMPLETE
                    Reduce Output Operator
                      key expressions: _col0 (type: int)
                      null sort order: z
                      sort order: +
                      Map-reduce partition columns: _col0 (type: int)
                      Statistics: Num rows: 3 Data size: 279 Basic stats: COMPLETE Column stats: COMPLETE
                      value expressions: _col1 (type: varchar(256))
            Execution mode: vectorized, llap
            LLAP IO: may be used (ACID table)
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 _col1 (type: int)
                  1 _col0 (type: int)
                outputColumnNames: _col0, _col3
                Statistics: Num rows: 3 Data size: 279 Basic stats: COMPLETE Column stats: COMPLETE
                Select Operator
                  expressions: _col0 (type: int), _col3 (type: varchar(256))
                  outputColumnNames: _col0, _col1
                  Statistics: Num rows: 3 Data size: 279 Basic stats: COMPLETE Column stats: COMPLETE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 3 Data size: 279 Basic stats: COMPLETE Column stats: COMPLETE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: explain
SELECT empid, deptname
FROM emps
JOIN depts
  using (deptno)
WHERE hire_date >= 600
PREHOOK: type: QUERY
PREHOOK: Input: default@depts
PREHOOK: Input: default@emps
PREHOOK: Input: default@mv1
#### A masked pattern was here ####
POSTHOOK: query: explain
SELECT empid, deptname
FROM emps
JOIN depts
  using (deptno)
WHERE hire_date >= 600
POSTHOOK: type: QUERY
POSTHOOK: Input: default@depts
POSTHOOK: Input: default@emps
POSTHOOK: Input: default@mv1
#### A masked pattern was here ####
STAGE DEPENDENCIES:
  Stage-0 is a root stage

STAGE PLANS:
  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        TableScan
          alias: default.mv1
          filterExpr: (hire_date >= 600) (type: boolean)
          Filter Operator
            predicate: (hire_date >= 600) (type: boolean)
            Select Operator
              expressions: empid (type: int), deptname (type: varchar(256))
              outputColumnNames: _col0, _col1
              ListSink

