PREHOOK: query: create external table t_bad0 (id bigint,str bigint,s1 double)
        row format delimited FIELDS TERMINATED BY '\u0009'
        stored as textfile
        TBLPROPERTIES('transactional'='false')
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@t_bad0
POSTHOOK: query: create external table t_bad0 (id bigint,str bigint,s1 double)
        row format delimited FIELDS TERMINATED BY '\u0009'
        stored as textfile
        TBLPROPERTIES('transactional'='false')
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@t_bad0
PREHOOK: query: create external table t_good0 (id bigint,str bigint,s2 double)
        row format delimited FIELDS TERMINATED BY '\u0009'
        stored as textfile
        TBLPROPERTIES('transactional'='false')
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@t_good0
POSTHOOK: query: create external table t_good0 (id bigint,str bigint,s2 double)
        row format delimited FIELDS TERMINATED BY '\u0009'
        stored as textfile
        TBLPROPERTIES('transactional'='false')
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@t_good0
PREHOOK: query: LOAD DATA LOCAL INPATH '../../../hwx/data/files/I1G.data.txt' INTO TABLE t_bad0
PREHOOK: type: LOAD
#### A masked pattern was here ####
PREHOOK: Output: default@t_bad0
POSTHOOK: query: LOAD DATA LOCAL INPATH '../../../hwx/data/files/I1G.data.txt' INTO TABLE t_bad0
POSTHOOK: type: LOAD
#### A masked pattern was here ####
POSTHOOK: Output: default@t_bad0
PREHOOK: query: LOAD DATA LOCAL INPATH '../../../hwx/data/files/I1G.data.txt' INTO TABLE t_good0
PREHOOK: type: LOAD
#### A masked pattern was here ####
PREHOOK: Output: default@t_good0
POSTHOOK: query: LOAD DATA LOCAL INPATH '../../../hwx/data/files/I1G.data.txt' INTO TABLE t_good0
POSTHOOK: type: LOAD
#### A masked pattern was here ####
POSTHOOK: Output: default@t_good0
PREHOOK: query: create table t_bad stored as orc
        TBLPROPERTIES('transactional'='true')
	as select * from t_bad0
PREHOOK: type: CREATETABLE_AS_SELECT
PREHOOK: Input: default@t_bad0
PREHOOK: Output: database:default
PREHOOK: Output: default@t_bad
POSTHOOK: query: create table t_bad stored as orc
        TBLPROPERTIES('transactional'='true')
	as select * from t_bad0
POSTHOOK: type: CREATETABLE_AS_SELECT
POSTHOOK: Input: default@t_bad0
POSTHOOK: Output: database:default
POSTHOOK: Output: default@t_bad
POSTHOOK: Lineage: t_bad.id SIMPLE [(t_bad0)t_bad0.FieldSchema(name:id, type:bigint, comment:null), ]
POSTHOOK: Lineage: t_bad.s1 SIMPLE [(t_bad0)t_bad0.FieldSchema(name:s1, type:double, comment:null), ]
POSTHOOK: Lineage: t_bad.str SIMPLE [(t_bad0)t_bad0.FieldSchema(name:str, type:bigint, comment:null), ]
PREHOOK: query: create table t_good stored as orc
        TBLPROPERTIES('transactional'='true')
	as select * from t_good0
PREHOOK: type: CREATETABLE_AS_SELECT
PREHOOK: Input: default@t_good0
PREHOOK: Output: database:default
PREHOOK: Output: default@t_good
POSTHOOK: query: create table t_good stored as orc
        TBLPROPERTIES('transactional'='true')
	as select * from t_good0
POSTHOOK: type: CREATETABLE_AS_SELECT
POSTHOOK: Input: default@t_good0
POSTHOOK: Output: database:default
POSTHOOK: Output: default@t_good
POSTHOOK: Lineage: t_good.id SIMPLE [(t_good0)t_good0.FieldSchema(name:id, type:bigint, comment:null), ]
POSTHOOK: Lineage: t_good.s2 SIMPLE [(t_good0)t_good0.FieldSchema(name:s2, type:double, comment:null), ]
POSTHOOK: Lineage: t_good.str SIMPLE [(t_good0)t_good0.FieldSchema(name:str, type:bigint, comment:null), ]
PREHOOK: query: analyze table t_bad compute statistics for columns
PREHOOK: type: ANALYZE_TABLE
PREHOOK: Input: default@t_bad
PREHOOK: Output: default@t_bad
#### A masked pattern was here ####
POSTHOOK: query: analyze table t_bad compute statistics for columns
POSTHOOK: type: ANALYZE_TABLE
POSTHOOK: Input: default@t_bad
POSTHOOK: Output: default@t_bad
#### A masked pattern was here ####
PREHOOK: query: analyze table t_good compute statistics for columns
PREHOOK: type: ANALYZE_TABLE
PREHOOK: Input: default@t_good
PREHOOK: Output: default@t_good
#### A masked pattern was here ####
POSTHOOK: query: analyze table t_good compute statistics for columns
POSTHOOK: type: ANALYZE_TABLE
POSTHOOK: Input: default@t_good
POSTHOOK: Output: default@t_good
#### A masked pattern was here ####
PREHOOK: query: explain
select sum(length(l.str||l.id||r.id||r.str||l.s1||r.s2)) from t_bad l join t_good r on (l.id=r.id and l.str=r.str)
PREHOOK: type: QUERY
POSTHOOK: query: explain
select sum(length(l.str||l.id||r.id||r.str||l.s1||r.s2)) from t_bad l join t_good r on (l.id=r.id and l.str=r.str)
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Map 1 <- Map 3 (BROADCAST_EDGE)
        Reducer 2 <- Map 1 (CUSTOM_SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: l
                  filterExpr: (id is not null and str is not null) (type: boolean)
                  Statistics: Num rows: 25000000 Data size: 600000000 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: (id is not null and str is not null) (type: boolean)
                    Statistics: Num rows: 25000000 Data size: 600000000 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: id (type: bigint), str (type: bigint), s1 (type: double)
                      outputColumnNames: _col0, _col1, _col2
                      Statistics: Num rows: 25000000 Data size: 600000000 Basic stats: COMPLETE Column stats: COMPLETE
                      Map Join Operator
                        condition map:
                             Inner Join 0 to 1
                        keys:
                          0 _col0 (type: bigint), _col1 (type: bigint)
                          1 _col0 (type: bigint), _col1 (type: bigint)
                        outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5
                        input vertices:
                          1 Map 3
                        Statistics: Num rows: 25000000 Data size: 1200000000 Basic stats: COMPLETE Column stats: COMPLETE
                        Select Operator
                          expressions: length(concat(concat(concat(concat(concat(CAST( _col1 AS STRING), _col0), _col3), _col4), _col2), _col5)) (type: int)
                          outputColumnNames: _col0
                          Statistics: Num rows: 25000000 Data size: 1200000000 Basic stats: COMPLETE Column stats: COMPLETE
                          Group By Operator
                            aggregations: sum(_col0)
                            mode: hash
                            outputColumnNames: _col0
                            Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                            Reduce Output Operator
                              sort order: 
                              Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                              value expressions: _col0 (type: bigint)
            Execution mode: vectorized, llap
            LLAP IO: may be used (ACID table)
        Map 3 
            Map Operator Tree:
                TableScan
                  alias: r
                  filterExpr: (id is not null and str is not null) (type: boolean)
                  Statistics: Num rows: 25000000 Data size: 600000000 Basic stats: COMPLETE Column stats: COMPLETE
                  Filter Operator
                    predicate: (id is not null and str is not null) (type: boolean)
                    Statistics: Num rows: 25000000 Data size: 600000000 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: id (type: bigint), str (type: bigint), s2 (type: double)
                      outputColumnNames: _col0, _col1, _col2
                      Statistics: Num rows: 25000000 Data size: 600000000 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        key expressions: _col0 (type: bigint), _col1 (type: bigint)
                        sort order: ++
                        Map-reduce partition columns: _col0 (type: bigint), _col1 (type: bigint)
                        Statistics: Num rows: 25000000 Data size: 600000000 Basic stats: COMPLETE Column stats: COMPLETE
                        value expressions: _col2 (type: double)
            Execution mode: vectorized, llap
            LLAP IO: may be used (ACID table)
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Operator Tree:
              Group By Operator
                aggregations: sum(VALUE._col0)
                mode: mergepartial
                outputColumnNames: _col0
                Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE
                  table:
                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select sum(length(l.str||l.id||r.id||r.str||l.s1||r.s2)),count(*) from t_bad l join t_good r on (l.id=r.id and l.str=r.str)
PREHOOK: type: QUERY
PREHOOK: Input: default@t_bad
PREHOOK: Input: default@t_good
#### A masked pattern was here ####
POSTHOOK: query: select sum(length(l.str||l.id||r.id||r.str||l.s1||r.s2)),count(*) from t_bad l join t_good r on (l.id=r.id and l.str=r.str)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@t_bad
POSTHOOK: Input: default@t_good
#### A masked pattern was here ####
1994444444	25000000
