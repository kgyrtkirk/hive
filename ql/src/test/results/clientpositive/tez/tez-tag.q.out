PREHOOK: query: CREATE TABLE srcbucket_mapjoin_n9(key int, value string) partitioned by (ds string) CLUSTERED BY (key) INTO 2 BUCKETS STORED AS TEXTFILE
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@srcbucket_mapjoin_n9
POSTHOOK: query: CREATE TABLE srcbucket_mapjoin_n9(key int, value string) partitioned by (ds string) CLUSTERED BY (key) INTO 2 BUCKETS STORED AS TEXTFILE
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@srcbucket_mapjoin_n9
PREHOOK: query: CREATE TABLE tab_part_n6 (key int, value string) PARTITIONED BY(ds STRING) CLUSTERED BY (key) SORTED BY (key) INTO 4 BUCKETS STORED AS TEXTFILE
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@tab_part_n6
POSTHOOK: query: CREATE TABLE tab_part_n6 (key int, value string) PARTITIONED BY(ds STRING) CLUSTERED BY (key) SORTED BY (key) INTO 4 BUCKETS STORED AS TEXTFILE
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@tab_part_n6
PREHOOK: query: CREATE TABLE srcbucket_mapjoin_part_n9 (key int, value string) partitioned by (ds string) CLUSTERED BY (key) INTO 4 BUCKETS STORED AS TEXTFILE
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@srcbucket_mapjoin_part_n9
POSTHOOK: query: CREATE TABLE srcbucket_mapjoin_part_n9 (key int, value string) partitioned by (ds string) CLUSTERED BY (key) INTO 4 BUCKETS STORED AS TEXTFILE
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@srcbucket_mapjoin_part_n9
PREHOOK: query: CREATE TABLE src2_n0 as select * from src1
PREHOOK: type: CREATETABLE_AS_SELECT
PREHOOK: Input: default@src1
PREHOOK: Output: database:default
PREHOOK: Output: default@src2_n0
POSTHOOK: query: CREATE TABLE src2_n0 as select * from src1
POSTHOOK: type: CREATETABLE_AS_SELECT
POSTHOOK: Input: default@src1
POSTHOOK: Output: database:default
POSTHOOK: Output: default@src2_n0
POSTHOOK: Lineage: src2_n0.key SIMPLE [(src1)src1.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: src2_n0.value SIMPLE [(src1)src1.FieldSchema(name:value, type:string, comment:default), ]
PREHOOK: query: insert into src2_n0 select * from src2_n0
PREHOOK: type: QUERY
PREHOOK: Input: default@src2_n0
PREHOOK: Output: default@src2_n0
POSTHOOK: query: insert into src2_n0 select * from src2_n0
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src2_n0
POSTHOOK: Output: default@src2_n0
POSTHOOK: Lineage: src2_n0.key SIMPLE [(src2_n0)src2_n0.FieldSchema(name:key, type:string, comment:null), ]
POSTHOOK: Lineage: src2_n0.value SIMPLE [(src2_n0)src2_n0.FieldSchema(name:value, type:string, comment:null), ]
PREHOOK: query: insert into src2_n0 select * from src2_n0
PREHOOK: type: QUERY
PREHOOK: Input: default@src2_n0
PREHOOK: Output: default@src2_n0
POSTHOOK: query: insert into src2_n0 select * from src2_n0
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src2_n0
POSTHOOK: Output: default@src2_n0
POSTHOOK: Lineage: src2_n0.key SIMPLE [(src2_n0)src2_n0.FieldSchema(name:key, type:string, comment:null), ]
POSTHOOK: Lineage: src2_n0.value SIMPLE [(src2_n0)src2_n0.FieldSchema(name:value, type:string, comment:null), ]
PREHOOK: query: load data local inpath '../../data/files/bmj/000000_0' INTO TABLE srcbucket_mapjoin_n9 partition(ds='2008-04-08')
PREHOOK: type: LOAD
#### A masked pattern was here ####
PREHOOK: Output: default@srcbucket_mapjoin_n9
POSTHOOK: query: load data local inpath '../../data/files/bmj/000000_0' INTO TABLE srcbucket_mapjoin_n9 partition(ds='2008-04-08')
POSTHOOK: type: LOAD
#### A masked pattern was here ####
POSTHOOK: Output: default@srcbucket_mapjoin_n9
POSTHOOK: Output: default@srcbucket_mapjoin_n9@ds=2008-04-08
PREHOOK: query: load data local inpath '../../data/files/bmj1/000001_0' INTO TABLE srcbucket_mapjoin_n9 partition(ds='2008-04-08')
PREHOOK: type: LOAD
#### A masked pattern was here ####
PREHOOK: Output: default@srcbucket_mapjoin_n9@ds=2008-04-08
POSTHOOK: query: load data local inpath '../../data/files/bmj1/000001_0' INTO TABLE srcbucket_mapjoin_n9 partition(ds='2008-04-08')
POSTHOOK: type: LOAD
#### A masked pattern was here ####
POSTHOOK: Output: default@srcbucket_mapjoin_n9@ds=2008-04-08
PREHOOK: query: load data local inpath '../../data/files/bmj/000000_0' INTO TABLE srcbucket_mapjoin_part_n9 partition(ds='2008-04-08')
PREHOOK: type: LOAD
#### A masked pattern was here ####
PREHOOK: Output: default@srcbucket_mapjoin_part_n9
POSTHOOK: query: load data local inpath '../../data/files/bmj/000000_0' INTO TABLE srcbucket_mapjoin_part_n9 partition(ds='2008-04-08')
POSTHOOK: type: LOAD
#### A masked pattern was here ####
POSTHOOK: Output: default@srcbucket_mapjoin_part_n9
POSTHOOK: Output: default@srcbucket_mapjoin_part_n9@ds=2008-04-08
PREHOOK: query: load data local inpath '../../data/files/bmj/000001_0' INTO TABLE srcbucket_mapjoin_part_n9 partition(ds='2008-04-08')
PREHOOK: type: LOAD
#### A masked pattern was here ####
PREHOOK: Output: default@srcbucket_mapjoin_part_n9@ds=2008-04-08
POSTHOOK: query: load data local inpath '../../data/files/bmj/000001_0' INTO TABLE srcbucket_mapjoin_part_n9 partition(ds='2008-04-08')
POSTHOOK: type: LOAD
#### A masked pattern was here ####
POSTHOOK: Output: default@srcbucket_mapjoin_part_n9@ds=2008-04-08
PREHOOK: query: load data local inpath '../../data/files/bmj/000002_0' INTO TABLE srcbucket_mapjoin_part_n9 partition(ds='2008-04-08')
PREHOOK: type: LOAD
#### A masked pattern was here ####
PREHOOK: Output: default@srcbucket_mapjoin_part_n9@ds=2008-04-08
POSTHOOK: query: load data local inpath '../../data/files/bmj/000002_0' INTO TABLE srcbucket_mapjoin_part_n9 partition(ds='2008-04-08')
POSTHOOK: type: LOAD
#### A masked pattern was here ####
POSTHOOK: Output: default@srcbucket_mapjoin_part_n9@ds=2008-04-08
PREHOOK: query: load data local inpath '../../data/files/bmj/000003_0' INTO TABLE srcbucket_mapjoin_part_n9 partition(ds='2008-04-08')
PREHOOK: type: LOAD
#### A masked pattern was here ####
PREHOOK: Output: default@srcbucket_mapjoin_part_n9@ds=2008-04-08
POSTHOOK: query: load data local inpath '../../data/files/bmj/000003_0' INTO TABLE srcbucket_mapjoin_part_n9 partition(ds='2008-04-08')
POSTHOOK: type: LOAD
#### A masked pattern was here ####
POSTHOOK: Output: default@srcbucket_mapjoin_part_n9@ds=2008-04-08
PREHOOK: query: insert overwrite table tab_part_n6 partition (ds='2008-04-08')
select key,value from srcbucket_mapjoin_part_n9
PREHOOK: type: QUERY
PREHOOK: Input: default@srcbucket_mapjoin_part_n9
PREHOOK: Input: default@srcbucket_mapjoin_part_n9@ds=2008-04-08
PREHOOK: Output: default@tab_part_n6@ds=2008-04-08
POSTHOOK: query: insert overwrite table tab_part_n6 partition (ds='2008-04-08')
select key,value from srcbucket_mapjoin_part_n9
POSTHOOK: type: QUERY
POSTHOOK: Input: default@srcbucket_mapjoin_part_n9
POSTHOOK: Input: default@srcbucket_mapjoin_part_n9@ds=2008-04-08
POSTHOOK: Output: default@tab_part_n6@ds=2008-04-08
POSTHOOK: Lineage: tab_part_n6 PARTITION(ds=2008-04-08).key SIMPLE [(srcbucket_mapjoin_part_n9)srcbucket_mapjoin_part_n9.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: tab_part_n6 PARTITION(ds=2008-04-08).value SIMPLE [(srcbucket_mapjoin_part_n9)srcbucket_mapjoin_part_n9.FieldSchema(name:value, type:string, comment:null), ]
PREHOOK: query: CREATE TABLE tab_n5(key int, value string) PARTITIONED BY(ds STRING) CLUSTERED BY (key) SORTED BY (key) INTO 2 BUCKETS STORED AS TEXTFILE
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@tab_n5
POSTHOOK: query: CREATE TABLE tab_n5(key int, value string) PARTITIONED BY(ds STRING) CLUSTERED BY (key) SORTED BY (key) INTO 2 BUCKETS STORED AS TEXTFILE
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@tab_n5
PREHOOK: query: insert overwrite table tab_n5 partition (ds='2008-04-08')
select key,value from srcbucket_mapjoin_n9
PREHOOK: type: QUERY
PREHOOK: Input: default@srcbucket_mapjoin_n9
PREHOOK: Input: default@srcbucket_mapjoin_n9@ds=2008-04-08
PREHOOK: Output: default@tab_n5@ds=2008-04-08
POSTHOOK: query: insert overwrite table tab_n5 partition (ds='2008-04-08')
select key,value from srcbucket_mapjoin_n9
POSTHOOK: type: QUERY
POSTHOOK: Input: default@srcbucket_mapjoin_n9
POSTHOOK: Input: default@srcbucket_mapjoin_n9@ds=2008-04-08
POSTHOOK: Output: default@tab_n5@ds=2008-04-08
POSTHOOK: Lineage: tab_n5 PARTITION(ds=2008-04-08).key SIMPLE [(srcbucket_mapjoin_n9)srcbucket_mapjoin_n9.FieldSchema(name:key, type:int, comment:null), ]
POSTHOOK: Lineage: tab_n5 PARTITION(ds=2008-04-08).value SIMPLE [(srcbucket_mapjoin_n9)srcbucket_mapjoin_n9.FieldSchema(name:value, type:string, comment:null), ]
PREHOOK: query: CREATE TABLE tab2_n2 (key int, value string, ds string)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@tab2_n2
POSTHOOK: query: CREATE TABLE tab2_n2 (key int, value string, ds string)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@tab2_n2
Warning: Value had a \n character in it.
PREHOOK: query: analyze table tab2_n2 compute statistics
PREHOOK: type: QUERY
PREHOOK: Input: default@tab2_n2
PREHOOK: Output: default@tab2_n2
POSTHOOK: query: analyze table tab2_n2 compute statistics
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tab2_n2
POSTHOOK: Output: default@tab2_n2
PREHOOK: query: analyze table tab2_n2 compute statistics for columns
PREHOOK: type: ANALYZE_TABLE
PREHOOK: Input: default@tab2_n2
PREHOOK: Output: default@tab2_n2
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: analyze table tab2_n2 compute statistics for columns
POSTHOOK: type: ANALYZE_TABLE
POSTHOOK: Input: default@tab2_n2
POSTHOOK: Output: default@tab2_n2
POSTHOOK: Output: hdfs://### HDFS PATH ###
PREHOOK: query: explain select count(*) from tab_n5 a join tab_part_n6 b on a.key = b.key join src1 c on a.value = c.value
PREHOOK: type: QUERY
POSTHOOK: query: explain select count(*) from tab_n5 a join tab_part_n6 b on a.key = b.key join src1 c on a.value = c.value
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 2 <- Map 1 (SIMPLE_EDGE), Reducer 7 (ONE_TO_ONE_EDGE)
Reducer 3 <- Reducer 2 (CUSTOM_SIMPLE_EDGE)
Reducer 5 <- Map 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (SIMPLE_EDGE), Reducer 9 (ONE_TO_ONE_EDGE)
Reducer 7 <- Reducer 6 (SIMPLE_EDGE)
Reducer 9 <- Map 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 3
      File Output Operator [FS_42]
        Group By Operator [GBY_40] (rows=1 width=8)
          Output:["_col0"],aggregations:["$sum0(VALUE._col0)"]
        <-Reducer 2 [CUSTOM_SIMPLE_EDGE]
          PARTITION_ONLY_SHUFFLE [RS_39]
            Group By Operator [GBY_38] (rows=1 width=8)
              Output:["_col0"],aggregations:["$sum0(_col4)"]
              Select Operator [SEL_36] (rows=6 width=16)
                Output:["_col4"]
                Merge Join Operator [MERGEJOIN_53] (rows=6 width=16)
                  Conds:RS_33._col0=RS_34._col0(Inner),Output:["_col1","_col3"]
                <-Map 1 [SIMPLE_EDGE]
                  SHUFFLE [RS_33]
                    PartitionCols:_col0
                    Group By Operator [GBY_4] (rows=303 width=12)
                      Output:["_col0","_col1"],aggregations:["count()"],keys:_col0
                      Select Operator [SEL_2] (rows=500 width=4)
                        Output:["_col0"]
                        Filter Operator [FIL_48] (rows=500 width=4)
                          predicate:key is not null
                          TableScan [TS_0] (rows=500 width=4)
                            default@tab_part_n6,b,Tbl:COMPLETE,Col:COMPLETE,Output:["key"]
                <-Reducer 7 [ONE_TO_ONE_EDGE]
                  FORWARD [RS_34]
                    PartitionCols:_col0
                    Group By Operator [GBY_31] (rows=6 width=12)
                      Output:["_col0","_col1"],aggregations:["$sum0(VALUE._col0)"],keys:KEY._col0
                    <-Reducer 6 [SIMPLE_EDGE]
                      SHUFFLE [RS_30]
                        PartitionCols:_col0
                        Group By Operator [GBY_29] (rows=6 width=12)
                          Output:["_col0","_col1"],aggregations:["$sum0(_col5)"],keys:_col0
                          Select Operator [SEL_27] (rows=12 width=20)
                            Output:["_col0","_col5"]
                            Merge Join Operator [MERGEJOIN_52] (rows=12 width=20)
                              Conds:RS_24._col1=RS_25._col0(Inner),Output:["_col0","_col2","_col4"]
                            <-Reducer 5 [SIMPLE_EDGE]
                              SHUFFLE [RS_24]
                                PartitionCols:_col1
                                Select Operator [SEL_15] (rows=121 width=103)
                                  Output:["_col0","_col1","_col2"]
                                  Group By Operator [GBY_14] (rows=121 width=103)
                                    Output:["_col0","_col1","_col2"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1
                                  <-Map 4 [SIMPLE_EDGE]
                                    SHUFFLE [RS_13]
                                      PartitionCols:_col0, _col1
                                      Group By Operator [GBY_12] (rows=121 width=103)
                                        Output:["_col0","_col1","_col2"],aggregations:["count()"],keys:_col1, _col0
                                        Select Operator [SEL_10] (rows=242 width=95)
                                          Output:["_col0","_col1"]
                                          Filter Operator [FIL_49] (rows=242 width=95)
                                            predicate:(key is not null and value is not null)
                                            TableScan [TS_8] (rows=242 width=95)
                                              default@tab_n5,a,Tbl:COMPLETE,Col:COMPLETE,Output:["key","value"]
                            <-Reducer 9 [ONE_TO_ONE_EDGE]
                              FORWARD [RS_25]
                                PartitionCols:_col0
                                Group By Operator [GBY_22] (rows=12 width=97)
                                  Output:["_col0","_col1"],aggregations:["count(VALUE._col0)"],keys:KEY._col0
                                <-Map 8 [SIMPLE_EDGE]
                                  SHUFFLE [RS_21]
                                    PartitionCols:_col0
                                    Group By Operator [GBY_20] (rows=12 width=97)
                                      Output:["_col0","_col1"],aggregations:["count()"],keys:_col0
                                      Select Operator [SEL_18] (rows=25 width=89)
                                        Output:["_col0"]
                                        Filter Operator [FIL_50] (rows=25 width=89)
                                          predicate:value is not null
                                          TableScan [TS_16] (rows=25 width=89)
                                            default@src1,c,Tbl:COMPLETE,Col:COMPLETE,Output:["value"]

PREHOOK: query: select count(*) from tab_n5 a join tab_part_n6 b on a.key = b.key join src1 c on a.value = c.value
PREHOOK: type: QUERY
PREHOOK: Input: default@src1
PREHOOK: Input: default@tab_n5
PREHOOK: Input: default@tab_n5@ds=2008-04-08
PREHOOK: Input: default@tab_part_n6
PREHOOK: Input: default@tab_part_n6@ds=2008-04-08
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: select count(*) from tab_n5 a join tab_part_n6 b on a.key = b.key join src1 c on a.value = c.value
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src1
POSTHOOK: Input: default@tab_n5
POSTHOOK: Input: default@tab_n5@ds=2008-04-08
POSTHOOK: Input: default@tab_part_n6
POSTHOOK: Input: default@tab_part_n6@ds=2008-04-08
POSTHOOK: Output: hdfs://### HDFS PATH ###
40
PREHOOK: query: explain select count(*) from (select x.key as key, min(x.value) as value from tab2_n2 x group by x.key) a join (select x.key as key, min(x.value) as value from tab2_n2 x group by x.key) b on a.key = b.key join src1 c on a.value = c.value where c.key < 0
PREHOOK: type: QUERY
POSTHOOK: query: explain select count(*) from (select x.key as key, min(x.value) as value from tab2_n2 x group by x.key) a join (select x.key as key, min(x.value) as value from tab2_n2 x group by x.key) b on a.key = b.key join src1 c on a.value = c.value where c.key < 0
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 5 (SIMPLE_EDGE)
Reducer 3 <- Map 7 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (CUSTOM_SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 4
      File Output Operator [FS_29]
        Group By Operator [GBY_27] (rows=1 width=8)
          Output:["_col0"],aggregations:["count(VALUE._col0)"]
        <-Reducer 3 [CUSTOM_SIMPLE_EDGE]
          PARTITION_ONLY_SHUFFLE [RS_26]
            Group By Operator [GBY_25] (rows=1 width=8)
              Output:["_col0"],aggregations:["count()"]
              Merge Join Operator [MERGEJOIN_41] (rows=1 width=8)
                Conds:RS_21._col1=RS_22._col1(Inner)
              <-Map 7 [SIMPLE_EDGE]
                SHUFFLE [RS_22]
                  PartitionCols:_col1
                  Select Operator [SEL_17] (rows=8 width=175)
                    Output:["_col1"]
                    Filter Operator [FIL_38] (rows=8 width=175)
                      predicate:((UDFToDouble(key) < 0.0D) and value is not null)
                      TableScan [TS_15] (rows=25 width=175)
                        default@src1,c,Tbl:COMPLETE,Col:COMPLETE,Output:["key","value"]
              <-Reducer 2 [SIMPLE_EDGE]
                SHUFFLE [RS_21]
                  PartitionCols:_col1
                  Merge Join Operator [MERGEJOIN_39] (rows=1 width=184)
                    Conds:FIL_35._col0=GBY_13._col0(Inner),Output:["_col1"]
                  <-Group By Operator [GBY_13] (rows=1 width=4)
                      Output:["_col0"],keys:KEY._col0
                  <-Filter Operator [FIL_35] (rows=1 width=188)
                      predicate:_col1 is not null
                      Group By Operator [GBY_5] (rows=1 width=188)
                        Output:["_col0","_col1"],aggregations:["min(VALUE._col0)"],keys:KEY._col0
                      <-Map 1 [SIMPLE_EDGE]
                        SHUFFLE [RS_4]
                          PartitionCols:_col0
                          Group By Operator [GBY_3] (rows=1 width=188)
                            Output:["_col0","_col1"],aggregations:["min(value)"],keys:key
                            Filter Operator [FIL_36] (rows=1 width=88)
                              predicate:key is not null
                              TableScan [TS_0] (rows=1 width=88)
                                default@tab2_n2,x,Tbl:COMPLETE,Col:COMPLETE,Output:["key","value"]
                      <-Map 5 [SIMPLE_EDGE]
                        SHUFFLE [RS_12]
                          PartitionCols:_col0
                          Group By Operator [GBY_11] (rows=1 width=4)
                            Output:["_col0"],keys:key
                            Filter Operator [FIL_37] (rows=1 width=4)
                              predicate:key is not null
                              TableScan [TS_8] (rows=1 width=4)
                                default@tab2_n2,x,Tbl:COMPLETE,Col:COMPLETE,Output:["key"]

