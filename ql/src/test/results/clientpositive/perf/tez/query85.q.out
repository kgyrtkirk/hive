PREHOOK: query: explain
select  substr(r_reason_desc,1,20)
       ,avg(ws_quantity)
       ,avg(wr_refunded_cash)
       ,avg(wr_fee)
 from web_sales, web_returns, web_page, customer_demographics cd1,
      customer_demographics cd2, customer_address, date_dim, reason 
 where ws_web_page_sk = wp_web_page_sk
   and ws_item_sk = wr_item_sk
   and ws_order_number = wr_order_number
   and ws_sold_date_sk = d_date_sk and d_year = 1998
   and cd1.cd_demo_sk = wr_refunded_cdemo_sk 
   and cd2.cd_demo_sk = wr_returning_cdemo_sk
   and ca_address_sk = wr_refunded_addr_sk
   and r_reason_sk = wr_reason_sk
   and
   (
    (
     cd1.cd_marital_status = 'M'
     and
     cd1.cd_marital_status = cd2.cd_marital_status
     and
     cd1.cd_education_status = '4 yr Degree'
     and 
     cd1.cd_education_status = cd2.cd_education_status
     and
     ws_sales_price between 100.00 and 150.00
    )
   or
    (
     cd1.cd_marital_status = 'D'
     and
     cd1.cd_marital_status = cd2.cd_marital_status
     and
     cd1.cd_education_status = 'Primary' 
     and
     cd1.cd_education_status = cd2.cd_education_status
     and
     ws_sales_price between 50.00 and 100.00
    )
   or
    (
     cd1.cd_marital_status = 'U'
     and
     cd1.cd_marital_status = cd2.cd_marital_status
     and
     cd1.cd_education_status = 'Advanced Degree'
     and
     cd1.cd_education_status = cd2.cd_education_status
     and
     ws_sales_price between 150.00 and 200.00
    )
   )
   and
   (
    (
     ca_country = 'United States'
     and
     ca_state in ('KY', 'GA', 'NM')
     and ws_net_profit between 100 and 200  
    )
    or
    (
     ca_country = 'United States'
     and
     ca_state in ('MT', 'OR', 'IN')
     and ws_net_profit between 150 and 300  
    )
    or
    (
     ca_country = 'United States'
     and
     ca_state in ('WI', 'MO', 'WV')
     and ws_net_profit between 50 and 250  
    )
   )
group by r_reason_desc
order by substr(r_reason_desc,1,20)
        ,avg(ws_quantity)
        ,avg(wr_refunded_cash)
        ,avg(wr_fee)
limit 100
PREHOOK: type: QUERY
POSTHOOK: query: explain
select  substr(r_reason_desc,1,20)
       ,avg(ws_quantity)
       ,avg(wr_refunded_cash)
       ,avg(wr_fee)
 from web_sales, web_returns, web_page, customer_demographics cd1,
      customer_demographics cd2, customer_address, date_dim, reason 
 where ws_web_page_sk = wp_web_page_sk
   and ws_item_sk = wr_item_sk
   and ws_order_number = wr_order_number
   and ws_sold_date_sk = d_date_sk and d_year = 1998
   and cd1.cd_demo_sk = wr_refunded_cdemo_sk 
   and cd2.cd_demo_sk = wr_returning_cdemo_sk
   and ca_address_sk = wr_refunded_addr_sk
   and r_reason_sk = wr_reason_sk
   and
   (
    (
     cd1.cd_marital_status = 'M'
     and
     cd1.cd_marital_status = cd2.cd_marital_status
     and
     cd1.cd_education_status = '4 yr Degree'
     and 
     cd1.cd_education_status = cd2.cd_education_status
     and
     ws_sales_price between 100.00 and 150.00
    )
   or
    (
     cd1.cd_marital_status = 'D'
     and
     cd1.cd_marital_status = cd2.cd_marital_status
     and
     cd1.cd_education_status = 'Primary' 
     and
     cd1.cd_education_status = cd2.cd_education_status
     and
     ws_sales_price between 50.00 and 100.00
    )
   or
    (
     cd1.cd_marital_status = 'U'
     and
     cd1.cd_marital_status = cd2.cd_marital_status
     and
     cd1.cd_education_status = 'Advanced Degree'
     and
     cd1.cd_education_status = cd2.cd_education_status
     and
     ws_sales_price between 150.00 and 200.00
    )
   )
   and
   (
    (
     ca_country = 'United States'
     and
     ca_state in ('KY', 'GA', 'NM')
     and ws_net_profit between 100 and 200  
    )
    or
    (
     ca_country = 'United States'
     and
     ca_state in ('MT', 'OR', 'IN')
     and ws_net_profit between 150 and 300  
    )
    or
    (
     ca_country = 'United States'
     and
     ca_state in ('WI', 'MO', 'WV')
     and ws_net_profit between 50 and 250  
    )
   )
group by r_reason_desc
order by substr(r_reason_desc,1,20)
        ,avg(ws_quantity)
        ,avg(wr_refunded_cash)
        ,avg(wr_fee)
limit 100
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Map 11 <- Reducer 10 (BROADCAST_EDGE), Reducer 19 (BROADCAST_EDGE)
Reducer 10 <- Reducer 7 (CUSTOM_SIMPLE_EDGE)
Reducer 12 <- Map 11 (SIMPLE_EDGE), Map 18 (SIMPLE_EDGE)
Reducer 13 <- Map 20 (SIMPLE_EDGE), Reducer 12 (SIMPLE_EDGE)
Reducer 14 <- Map 21 (SIMPLE_EDGE), Reducer 13 (SIMPLE_EDGE)
Reducer 15 <- Map 21 (SIMPLE_EDGE), Reducer 14 (SIMPLE_EDGE)
Reducer 16 <- Map 22 (SIMPLE_EDGE), Reducer 15 (SIMPLE_EDGE)
Reducer 17 <- Reducer 16 (SIMPLE_EDGE)
Reducer 19 <- Map 18 (CUSTOM_SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE)
Reducer 3 <- Reducer 2 (SIMPLE_EDGE), Reducer 9 (ONE_TO_ONE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (SIMPLE_EDGE)
Reducer 7 <- Map 6 (SIMPLE_EDGE)
Reducer 8 <- Reducer 17 (SIMPLE_EDGE), Reducer 7 (ONE_TO_ONE_EDGE)
Reducer 9 <- Reducer 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 5 vectorized
      File Output Operator [FS_272]
        Limit [LIM_271] (rows=100 width=1014)
          Number of rows:100
          Select Operator [SEL_270] (rows=1109166 width=1014)
            Output:["_col0","_col1","_col2","_col3"]
          <-Reducer 4 [SIMPLE_EDGE]
            SHUFFLE [RS_74]
              Select Operator [SEL_73] (rows=1109166 width=1014)
                Output:["_col4","_col5","_col6","_col7"]
                Group By Operator [GBY_72] (rows=1109166 width=1014)
                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(VALUE._col0)","$sum0(VALUE._col1)","sum(VALUE._col2)","$sum0(VALUE._col3)","sum(VALUE._col4)","$sum0(VALUE._col5)"],keys:KEY._col0
                <-Reducer 3 [SIMPLE_EDGE]
                  SHUFFLE [RS_71]
                    PartitionCols:_col0
                    Group By Operator [GBY_70] (rows=2218332 width=1014)
                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col10)","$sum0(_col11)","sum(_col12)","$sum0(_col13)","sum(_col14)","$sum0(_col15)"],keys:_col1
                      Select Operator [SEL_68] (rows=2218332 width=1014)
                        Output:["_col1","_col10","_col11","_col12","_col13","_col14","_col15"]
                        Merge Join Operator [MERGEJOIN_228] (rows=2218332 width=1014)
                          Conds:RS_234._col0=RS_66._col0(Inner),Output:["_col1","_col2","_col4","_col5","_col6","_col7","_col8","_col9"]
                        <-Reducer 2 [SIMPLE_EDGE] vectorized
                          SHUFFLE [RS_234]
                            PartitionCols:_col0
                            Group By Operator [GBY_233] (rows=36 width=200)
                              Output:["_col0","_col1","_col2"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1
                            <-Map 1 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_232]
                                PartitionCols:_col0, _col1
                                Group By Operator [GBY_231] (rows=72 width=200)
                                  Output:["_col0","_col1","_col2"],aggregations:["count()"],keys:_col0, _col1
                                  Select Operator [SEL_230] (rows=72 width=200)
                                    Output:["_col0","_col1"]
                                    Filter Operator [FIL_229] (rows=72 width=200)
                                      predicate:r_reason_sk is not null
                                      TableScan [TS_0] (rows=72 width=200)
                                        default@reason,reason,Tbl:COMPLETE,Col:NONE,Output:["r_reason_sk","r_reason_desc"]
                        <-Reducer 9 [ONE_TO_ONE_EDGE]
                          FORWARD [RS_66]
                            PartitionCols:_col0
                            Group By Operator [GBY_63] (rows=2016666 width=1014)
                              Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(VALUE._col0)","$sum0(VALUE._col1)","sum(VALUE._col2)","$sum0(VALUE._col3)","sum(VALUE._col4)","$sum0(VALUE._col5)"],keys:KEY._col0
                            <-Reducer 8 [SIMPLE_EDGE]
                              SHUFFLE [RS_62]
                                PartitionCols:_col0
                                Group By Operator [GBY_61] (rows=4033332 width=1014)
                                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col10)","$sum0(_col11)","sum(_col12)","$sum0(_col13)","sum(_col14)","$sum0(_col15)"],keys:_col2
                                  Select Operator [SEL_59] (rows=4033332 width=1014)
                                    Output:["_col2","_col10","_col11","_col12","_col13","_col14","_col15"]
                                    Merge Join Operator [MERGEJOIN_227] (rows=4033332 width=1014)
                                      Conds:RS_240._col0=RS_269._col1(Inner),Output:["_col1","_col2","_col4","_col5","_col6","_col7","_col8","_col9"]
                                    <-Reducer 7 [ONE_TO_ONE_EDGE] vectorized
                                      FORWARD [RS_240]
                                        PartitionCols:_col0
                                        Group By Operator [GBY_239] (rows=2301 width=585)
                                          Output:["_col0","_col1"],aggregations:["count(VALUE._col0)"],keys:KEY._col0
                                        <-Map 6 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_238]
                                            PartitionCols:_col0
                                            Group By Operator [GBY_237] (rows=4602 width=585)
                                              Output:["_col0","_col1"],aggregations:["count()"],keys:_col0
                                              Select Operator [SEL_236] (rows=4602 width=585)
                                                Output:["_col0"]
                                                Filter Operator [FIL_235] (rows=4602 width=585)
                                                  predicate:wp_web_page_sk is not null
                                                  TableScan [TS_8] (rows=4602 width=585)
                                                    default@web_page,web_page,Tbl:COMPLETE,Col:NONE,Output:["wp_web_page_sk"]
                                    <-Reducer 17 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_269]
                                        PartitionCols:_col1
                                        Select Operator [SEL_268] (rows=3666666 width=1014)
                                          Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                          Group By Operator [GBY_267] (rows=3666666 width=1014)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)","sum(VALUE._col2)","count(VALUE._col3)","sum(VALUE._col4)","count(VALUE._col5)"],keys:KEY._col0, KEY._col1
                                          <-Reducer 16 [SIMPLE_EDGE]
                                            SHUFFLE [RS_53]
                                              PartitionCols:_col0, _col1
                                              Group By Operator [GBY_52] (rows=7333332 width=1014)
                                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(_col4)","count(_col4)","sum(_col16)","count(_col16)","sum(_col15)","count(_col15)"],keys:_col2, _col13
                                                Select Operator [SEL_51] (rows=7333332 width=1014)
                                                  Output:["_col2","_col4","_col13","_col15","_col16"]
                                                  Filter Operator [FIL_50] (rows=7333332 width=1014)
                                                    predicate:((((_col24 = 'KY') or (_col24 = 'GA') or (_col24 = 'NM')) and _col6 BETWEEN 100 AND 200) or (((_col24 = 'MT') or (_col24 = 'OR') or (_col24 = 'IN')) and _col6 BETWEEN 150 AND 300) or (((_col24 = 'WI') or (_col24 = 'MO') or (_col24 = 'WV')) and _col6 BETWEEN 50 AND 250))
                                                    Merge Join Operator [MERGEJOIN_226] (rows=22000000 width=1014)
                                                      Conds:RS_47._col11=RS_266._col0(Inner),Output:["_col2","_col4","_col6","_col13","_col15","_col16","_col24"]
                                                    <-Map 22 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_266]
                                                        PartitionCols:_col0
                                                        Select Operator [SEL_265] (rows=20000000 width=1014)
                                                          Output:["_col0","_col1"]
                                                          Filter Operator [FIL_264] (rows=20000000 width=1014)
                                                            predicate:((ca_country = 'United States') and ca_address_sk is not null)
                                                            TableScan [TS_31] (rows=40000000 width=1014)
                                                              default@customer_address,customer_address,Tbl:COMPLETE,Col:NONE,Output:["ca_address_sk","ca_state","ca_country"]
                                                    <-Reducer 15 [SIMPLE_EDGE]
                                                      SHUFFLE [RS_47]
                                                        PartitionCols:_col11
                                                        Merge Join Operator [MERGEJOIN_225] (rows=5856506 width=135)
                                                          Conds:RS_44._col12, _col18, _col19=RS_262._col0, _col1, _col2(Inner),Output:["_col2","_col4","_col6","_col11","_col13","_col15","_col16"]
                                                        <-Map 21 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_262]
                                                            PartitionCols:_col0, _col1, _col2
                                                            Select Operator [SEL_261] (rows=1861800 width=385)
                                                              Output:["_col0","_col1","_col2"]
                                                              Filter Operator [FIL_260] (rows=1861800 width=385)
                                                                predicate:((cd_education_status) IN ('4 yr Degree', 'Primary', 'Advanced Degree') and (cd_marital_status) IN ('M', 'D', 'U') and cd_demo_sk is not null)
                                                                TableScan [TS_28] (rows=1861800 width=385)
                                                                  default@customer_demographics,cd2,Tbl:COMPLETE,Col:NONE,Output:["cd_demo_sk","cd_marital_status","cd_education_status"]
                                                        <-Reducer 14 [SIMPLE_EDGE]
                                                          SHUFFLE [RS_44]
                                                            PartitionCols:_col12, _col18, _col19
                                                            Filter Operator [FIL_43] (rows=5324097 width=135)
                                                              predicate:(((_col18 = 'D') and (_col19 = 'Primary') and _col5 BETWEEN 50 AND 100) or ((_col18 = 'M') and (_col19 = '4 yr Degree') and _col5 BETWEEN 100 AND 150) or ((_col18 = 'U') and (_col19 = 'Advanced Degree') and _col5 BETWEEN 150 AND 200))
                                                              Merge Join Operator [MERGEJOIN_224] (rows=63889183 width=135)
                                                                Conds:RS_40._col10=RS_263._col0(Inner),Output:["_col2","_col4","_col5","_col6","_col11","_col12","_col13","_col15","_col16","_col18","_col19"]
                                                              <-Map 21 [SIMPLE_EDGE] vectorized
                                                                SHUFFLE [RS_263]
                                                                  PartitionCols:_col0
                                                                   Please refer to the previous Select Operator [SEL_261]
                                                              <-Reducer 13 [SIMPLE_EDGE]
                                                                SHUFFLE [RS_40]
                                                                  PartitionCols:_col10
                                                                  Merge Join Operator [MERGEJOIN_223] (rows=58081075 width=135)
                                                                    Conds:RS_37._col1, _col3=RS_259._col0, _col5(Inner),Output:["_col2","_col4","_col5","_col6","_col10","_col11","_col12","_col13","_col15","_col16"]
                                                                  <-Map 20 [SIMPLE_EDGE] vectorized
                                                                    SHUFFLE [RS_259]
                                                                      PartitionCols:_col0, _col5
                                                                      Select Operator [SEL_258] (rows=14398467 width=92)
                                                                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                                                        Filter Operator [FIL_257] (rows=14398467 width=92)
                                                                          predicate:(wr_item_sk is not null and wr_order_number is not null and wr_reason_sk is not null and wr_refunded_addr_sk is not null and wr_refunded_cdemo_sk is not null and wr_returning_cdemo_sk is not null)
                                                                          TableScan [TS_22] (rows=14398467 width=92)
                                                                            default@web_returns,web_returns,Tbl:COMPLETE,Col:NONE,Output:["wr_item_sk","wr_refunded_cdemo_sk","wr_refunded_addr_sk","wr_returning_cdemo_sk","wr_reason_sk","wr_order_number","wr_fee","wr_refunded_cash"]
                                                                  <-Reducer 12 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_37]
                                                                      PartitionCols:_col1, _col3
                                                                      Merge Join Operator [MERGEJOIN_222] (rows=52800977 width=135)
                                                                        Conds:RS_256._col0=RS_246._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6"]
                                                                      <-Map 18 [SIMPLE_EDGE] vectorized
                                                                        PARTITION_ONLY_SHUFFLE [RS_246]
                                                                          PartitionCols:_col0
                                                                          Select Operator [SEL_245] (rows=36524 width=1119)
                                                                            Output:["_col0"]
                                                                            Filter Operator [FIL_244] (rows=36524 width=1119)
                                                                              predicate:((d_year = 1998) and d_date_sk is not null)
                                                                              TableScan [TS_19] (rows=73049 width=1119)
                                                                                default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_year"]
                                                                      <-Map 11 [SIMPLE_EDGE] vectorized
                                                                        SHUFFLE [RS_256]
                                                                          PartitionCols:_col0
                                                                          Select Operator [SEL_255] (rows=48000888 width=135)
                                                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                                                                            Filter Operator [FIL_254] (rows=48000888 width=135)
                                                                              predicate:((ws_sales_price BETWEEN 100 AND 150 or ws_sales_price BETWEEN 50 AND 100 or ws_sales_price BETWEEN 150 AND 200) and (ws_sold_date_sk BETWEEN DynamicValue(RS_35_date_dim_d_date_sk_min) AND DynamicValue(RS_35_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_35_date_dim_d_date_sk_bloom_filter))) and (ws_web_page_sk BETWEEN DynamicValue(RS_56_web_page_wp_web_page_sk_min) AND DynamicValue(RS_56_web_page_wp_web_page_sk_max) and in_bloom_filter(ws_web_page_sk, DynamicValue(RS_56_web_page_wp_web_page_sk_bloom_filter))) and ws_item_sk is not null and ws_order_number is not null and ws_sold_date_sk is not null and ws_web_page_sk is not null)
                                                                              TableScan [TS_16] (rows=144002668 width=135)
                                                                                default@web_sales,web_sales,Tbl:COMPLETE,Col:NONE,Output:["ws_sold_date_sk","ws_item_sk","ws_web_page_sk","ws_order_number","ws_quantity","ws_sales_price","ws_net_profit"]
                                                                              <-Reducer 10 [BROADCAST_EDGE] vectorized
                                                                                BROADCAST [RS_253]
                                                                                  Group By Operator [GBY_252] (rows=1 width=16)
                                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                  <-Reducer 7 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                    FORWARD [RS_243]
                                                                                      Group By Operator [GBY_242] (rows=1 width=16)
                                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                        Select Operator [SEL_241] (rows=2301 width=585)
                                                                                          Output:["_col0"]
                                                                                           Please refer to the previous Group By Operator [GBY_239]
                                                                              <-Reducer 19 [BROADCAST_EDGE] vectorized
                                                                                BROADCAST [RS_251]
                                                                                  Group By Operator [GBY_250] (rows=1 width=12)
                                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                  <-Map 18 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                    PARTITION_ONLY_SHUFFLE [RS_249]
                                                                                      Group By Operator [GBY_248] (rows=1 width=12)
                                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                        Select Operator [SEL_247] (rows=36524 width=1119)
                                                                                          Output:["_col0"]
                                                                                           Please refer to the previous Select Operator [SEL_245]

