PREHOOK: query: explain
select  
   sum(ws_ext_discount_amt)  as `Excess Discount Amount` 
from 
    web_sales 
   ,item 
   ,date_dim
where
i_manufact_id = 269
and i_item_sk = ws_item_sk 
and d_date between '1998-03-18' and 
        (cast('1998-03-18' as date) + 90 days)
and d_date_sk = ws_sold_date_sk 
and ws_ext_discount_amt  
     > ( 
         SELECT 
            1.3 * avg(ws_ext_discount_amt) 
         FROM 
            web_sales 
           ,date_dim
         WHERE 
              ws_item_sk = i_item_sk 
          and d_date between '1998-03-18' and
                             (cast('1998-03-18' as date) + 90 days)
          and d_date_sk = ws_sold_date_sk 
      ) 
order by sum(ws_ext_discount_amt)
limit 100
PREHOOK: type: QUERY
POSTHOOK: query: explain
select  
   sum(ws_ext_discount_amt)  as `Excess Discount Amount` 
from 
    web_sales 
   ,item 
   ,date_dim
where
i_manufact_id = 269
and i_item_sk = ws_item_sk 
and d_date between '1998-03-18' and 
        (cast('1998-03-18' as date) + 90 days)
and d_date_sk = ws_sold_date_sk 
and ws_ext_discount_amt  
     > ( 
         SELECT 
            1.3 * avg(ws_ext_discount_amt) 
         FROM 
            web_sales 
           ,date_dim
         WHERE 
              ws_item_sk = i_item_sk 
          and d_date between '1998-03-18' and
                             (cast('1998-03-18' as date) + 90 days)
          and d_date_sk = ws_sold_date_sk 
      ) 
order by sum(ws_ext_discount_amt)
limit 100
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 12 (BROADCAST_EDGE), Reducer 17 (BROADCAST_EDGE), Reducer 7 (BROADCAST_EDGE)
Map 14 <- Reducer 13 (BROADCAST_EDGE), Reducer 17 (BROADCAST_EDGE)
Reducer 10 <- Reducer 9 (SIMPLE_EDGE)
Reducer 11 <- Map 16 (SIMPLE_EDGE), Reducer 10 (ONE_TO_ONE_EDGE)
Reducer 12 <- Reducer 10 (CUSTOM_SIMPLE_EDGE)
Reducer 13 <- Reducer 8 (CUSTOM_SIMPLE_EDGE)
Reducer 15 <- Map 14 (SIMPLE_EDGE)
Reducer 17 <- Map 16 (CUSTOM_SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 6 (SIMPLE_EDGE)
Reducer 3 <- Reducer 11 (ONE_TO_ONE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (CUSTOM_SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (SIMPLE_EDGE)
Reducer 7 <- Map 6 (CUSTOM_SIMPLE_EDGE)
Reducer 8 <- Map 6 (SIMPLE_EDGE)
Reducer 9 <- Reducer 15 (SIMPLE_EDGE), Reducer 8 (ONE_TO_ONE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 5 vectorized
      File Output Operator [FS_161]
        Limit [LIM_160] (rows=1 width=112)
          Number of rows:100
          Select Operator [SEL_159] (rows=1 width=112)
            Output:["_col0"]
          <-Reducer 4 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_158]
              Select Operator [SEL_157] (rows=1 width=112)
                Output:["_col1"]
                Group By Operator [GBY_156] (rows=1 width=112)
                  Output:["_col0"],aggregations:["sum(VALUE._col0)"]
                <-Reducer 3 [CUSTOM_SIMPLE_EDGE]
                  PARTITION_ONLY_SHUFFLE [RS_47]
                    Group By Operator [GBY_46] (rows=1 width=112)
                      Output:["_col0"],aggregations:["sum(_col2)"]
                      Select Operator [SEL_45] (rows=58081078 width=135)
                        Output:["_col2"]
                        Filter Operator [FIL_44] (rows=58081078 width=135)
                          predicate:(_col2 > CAST( (1.3 * _col6) AS decimal(14,7)))
                          Merge Join Operator [MERGEJOIN_118] (rows=174243235 width=135)
                            Conds:RS_41._col1=RS_42._col2(Inner),Output:["_col2","_col6"]
                          <-Reducer 11 [ONE_TO_ONE_EDGE]
                            FORWARD [RS_42]
                              PartitionCols:_col2
                              Merge Join Operator [MERGEJOIN_117] (rows=43560808 width=135)
                                Conds:RS_34._col0=RS_131._col0(Inner),Output:["_col1","_col2"]
                              <-Map 16 [SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_131]
                                  PartitionCols:_col0
                                  Select Operator [SEL_130] (rows=231000 width=1436)
                                    Output:["_col0"]
                                    Filter Operator [FIL_129] (rows=231000 width=1436)
                                      predicate:((i_manufact_id = 269) and i_item_sk is not null)
                                      TableScan [TS_31] (rows=462000 width=1436)
                                        default@item,item,Tbl:COMPLETE,Col:NONE,Output:["i_item_sk","i_manufact_id"]
                              <-Reducer 10 [ONE_TO_ONE_EDGE]
                                PARTITION_ONLY_SHUFFLE [RS_34]
                                  PartitionCols:_col0
                                  Select Operator [SEL_30] (rows=39600734 width=135)
                                    Output:["_col0","_col1"]
                                    Group By Operator [GBY_29] (rows=39600734 width=135)
                                      Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)","$sum0(VALUE._col1)"],keys:KEY._col0
                                    <-Reducer 9 [SIMPLE_EDGE]
                                      SHUFFLE [RS_28]
                                        PartitionCols:_col0
                                        Group By Operator [GBY_27] (rows=79201469 width=135)
                                          Output:["_col0","_col1","_col2"],aggregations:["sum(_col6)","$sum0(_col7)"],keys:_col1
                                          Select Operator [SEL_25] (rows=79201469 width=135)
                                            Output:["_col1","_col6","_col7"]
                                            Merge Join Operator [MERGEJOIN_116] (rows=79201469 width=135)
                                              Conds:RS_150._col0=RS_139._col0(Inner),Output:["_col1","_col2","_col3","_col5"]
                                            <-Reducer 8 [ONE_TO_ONE_EDGE] vectorized
                                              FORWARD [RS_139]
                                                PartitionCols:_col0
                                                Group By Operator [GBY_138] (rows=4058 width=1119)
                                                  Output:["_col0","_col1"],aggregations:["count(VALUE._col0)"],keys:KEY._col0
                                                <-Map 6 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_125]
                                                    PartitionCols:_col0
                                                    Group By Operator [GBY_123] (rows=8116 width=1119)
                                                      Output:["_col0","_col1"],aggregations:["count()"],keys:_col0
                                                      Select Operator [SEL_120] (rows=8116 width=1119)
                                                        Output:["_col0"]
                                                        Filter Operator [FIL_119] (rows=8116 width=1119)
                                                          predicate:(CAST( d_date AS TIMESTAMP) BETWEEN TIMESTAMP'1998-03-18 00:00:00' AND TIMESTAMP'1998-06-16 00:00:00' and d_date_sk is not null)
                                                          TableScan [TS_3] (rows=73049 width=1119)
                                                            default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_date"]
                                            <-Reducer 15 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_150]
                                                PartitionCols:_col0
                                                Group By Operator [GBY_149] (rows=72001334 width=135)
                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0, KEY._col1
                                                <-Map 14 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_148]
                                                    PartitionCols:_col0, _col1
                                                    Group By Operator [GBY_147] (rows=144002668 width=135)
                                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["sum(_col2)","count(_col2)"],keys:_col0, _col1
                                                      Select Operator [SEL_146] (rows=144002668 width=135)
                                                        Output:["_col0","_col1","_col2"]
                                                        Filter Operator [FIL_145] (rows=144002668 width=135)
                                                          predicate:((ws_item_sk BETWEEN DynamicValue(RS_35_item_i_item_sk_min) AND DynamicValue(RS_35_item_i_item_sk_max) and in_bloom_filter(ws_item_sk, DynamicValue(RS_35_item_i_item_sk_bloom_filter))) and (ws_sold_date_sk BETWEEN DynamicValue(RS_23_date_dim_d_date_sk_min) AND DynamicValue(RS_23_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_23_date_dim_d_date_sk_bloom_filter))) and ws_item_sk is not null and ws_sold_date_sk is not null)
                                                          TableScan [TS_6] (rows=144002668 width=135)
                                                            default@web_sales,web_sales,Tbl:COMPLETE,Col:NONE,Output:["ws_sold_date_sk","ws_item_sk","ws_ext_discount_amt"]
                                                          <-Reducer 17 [BROADCAST_EDGE] vectorized
                                                            BROADCAST [RS_137]
                                                              Group By Operator [GBY_135] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                              <-Map 16 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                PARTITION_ONLY_SHUFFLE [RS_134]
                                                                  Group By Operator [GBY_133] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                    Select Operator [SEL_132] (rows=231000 width=1436)
                                                                      Output:["_col0"]
                                                                       Please refer to the previous Select Operator [SEL_130]
                                                          <-Reducer 13 [BROADCAST_EDGE] vectorized
                                                            BROADCAST [RS_144]
                                                              Group By Operator [GBY_143] (rows=1 width=16)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                              <-Reducer 8 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                FORWARD [RS_142]
                                                                  Group By Operator [GBY_141] (rows=1 width=16)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                    Select Operator [SEL_140] (rows=4058 width=1119)
                                                                      Output:["_col0"]
                                                                       Please refer to the previous Group By Operator [GBY_138]
                          <-Reducer 2 [SIMPLE_EDGE]
                            SHUFFLE [RS_41]
                              PartitionCols:_col1
                              Merge Join Operator [MERGEJOIN_115] (rows=158402938 width=135)
                                Conds:RS_155._col0=RS_121._col0(Inner),Output:["_col1","_col2"]
                              <-Map 6 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_121]
                                  PartitionCols:_col0
                                   Please refer to the previous Select Operator [SEL_120]
                              <-Map 1 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_155]
                                  PartitionCols:_col0
                                  Select Operator [SEL_154] (rows=144002668 width=135)
                                    Output:["_col0","_col1","_col2"]
                                    Filter Operator [FIL_153] (rows=144002668 width=135)
                                      predicate:((ws_item_sk BETWEEN DynamicValue(RS_34_web_sales_ws_item_sk_min) AND DynamicValue(RS_34_web_sales_ws_item_sk_max) and in_bloom_filter(ws_item_sk, DynamicValue(RS_34_web_sales_ws_item_sk_bloom_filter))) and (ws_item_sk BETWEEN DynamicValue(RS_35_item_i_item_sk_min) AND DynamicValue(RS_35_item_i_item_sk_max) and in_bloom_filter(ws_item_sk, DynamicValue(RS_35_item_i_item_sk_bloom_filter))) and (ws_sold_date_sk BETWEEN DynamicValue(RS_39_date_dim_d_date_sk_min) AND DynamicValue(RS_39_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_39_date_dim_d_date_sk_bloom_filter))) and ws_item_sk is not null and ws_sold_date_sk is not null)
                                      TableScan [TS_0] (rows=144002668 width=135)
                                        default@web_sales,web_sales,Tbl:COMPLETE,Col:NONE,Output:["ws_sold_date_sk","ws_item_sk","ws_ext_discount_amt"]
                                      <-Reducer 17 [BROADCAST_EDGE] vectorized
                                        BROADCAST [RS_136]
                                           Please refer to the previous Group By Operator [GBY_135]
                                      <-Reducer 12 [BROADCAST_EDGE] vectorized
                                        BROADCAST [RS_152]
                                          Group By Operator [GBY_151] (rows=1 width=124)
                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=39600736)"]
                                          <-Reducer 10 [CUSTOM_SIMPLE_EDGE]
                                            PARTITION_ONLY_SHUFFLE [RS_89]
                                              Group By Operator [GBY_88] (rows=1 width=124)
                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=39600736)"]
                                                Select Operator [SEL_87] (rows=39600734 width=135)
                                                  Output:["_col0"]
                                                   Please refer to the previous Select Operator [SEL_30]
                                      <-Reducer 7 [BROADCAST_EDGE] vectorized
                                        BROADCAST [RS_128]
                                          Group By Operator [GBY_127] (rows=1 width=12)
                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                          <-Map 6 [CUSTOM_SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_126]
                                              Group By Operator [GBY_124] (rows=1 width=12)
                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                Select Operator [SEL_122] (rows=8116 width=1119)
                                                  Output:["_col0"]
                                                   Please refer to the previous Select Operator [SEL_120]

