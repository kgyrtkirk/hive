PREHOOK: query: explain
select  dt.d_year 
       ,item.i_brand_id brand_id 
       ,item.i_brand brand
       ,sum(ss_ext_sales_price) sum_agg
 from  date_dim dt 
      ,store_sales
      ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
   and store_sales.ss_item_sk = item.i_item_sk
   and item.i_manufact_id = 436
   and dt.d_moy=12
 group by dt.d_year
      ,item.i_brand
      ,item.i_brand_id
 order by dt.d_year
         ,sum_agg desc
         ,brand_id
 limit 100
PREHOOK: type: QUERY
POSTHOOK: query: explain
select  dt.d_year 
       ,item.i_brand_id brand_id 
       ,item.i_brand brand
       ,sum(ss_ext_sales_price) sum_agg
 from  date_dim dt 
      ,store_sales
      ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
   and store_sales.ss_item_sk = item.i_item_sk
   and item.i_manufact_id = 436
   and dt.d_moy=12
 group by dt.d_year
      ,item.i_brand
      ,item.i_brand_id
 order by dt.d_year
         ,sum_agg desc
         ,brand_id
 limit 100
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 10 (BROADCAST_EDGE), Reducer 13 (BROADCAST_EDGE)
Reducer 10 <- Reducer 9 (CUSTOM_SIMPLE_EDGE)
Reducer 12 <- Map 11 (SIMPLE_EDGE)
Reducer 13 <- Reducer 12 (CUSTOM_SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE)
Reducer 3 <- Reducer 2 (SIMPLE_EDGE), Reducer 9 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 12 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 6 (SIMPLE_EDGE)
Reducer 9 <- Map 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 7 vectorized
      File Output Operator [FS_111]
        Limit [LIM_110] (rows=100 width=88)
          Number of rows:100
          Select Operator [SEL_109] (rows=87119342 width=88)
            Output:["_col0","_col1","_col2","_col3"]
          <-Reducer 6 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_108]
              Group By Operator [GBY_107] (rows=87119342 width=88)
                Output:["_col0","_col1","_col2","_col3"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
              <-Reducer 5 [SIMPLE_EDGE]
                SHUFFLE [RS_39]
                  PartitionCols:_col0, _col1, _col2
                  Group By Operator [GBY_38] (rows=174238685 width=88)
                    Output:["_col0","_col1","_col2","_col3"],aggregations:["sum(_col7)"],keys:_col5, _col1, _col2
                    Select Operator [SEL_36] (rows=174238685 width=88)
                      Output:["_col1","_col2","_col5","_col7"]
                      Merge Join Operator [MERGEJOIN_75] (rows=174238685 width=88)
                        Conds:RS_106._col0=RS_92._col0(Inner),Output:["_col1","_col2","_col3","_col5","_col6"]
                      <-Reducer 12 [SIMPLE_EDGE] vectorized
                        SHUFFLE [RS_92]
                          PartitionCols:_col0
                          Group By Operator [GBY_91] (rows=18262 width=1119)
                            Output:["_col0","_col1","_col2"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1
                          <-Map 11 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_90]
                              PartitionCols:_col0, _col1
                              Group By Operator [GBY_89] (rows=36524 width=1119)
                                Output:["_col0","_col1","_col2"],aggregations:["count()"],keys:_col0, _col1
                                Select Operator [SEL_88] (rows=36524 width=1119)
                                  Output:["_col0","_col1"]
                                  Filter Operator [FIL_87] (rows=36524 width=1119)
                                    predicate:((d_moy = 12) and d_date_sk is not null)
                                    TableScan [TS_25] (rows=73049 width=1119)
                                      default@date_dim,dt,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_year","d_moy"]
                      <-Reducer 4 [SIMPLE_EDGE] vectorized
                        SHUFFLE [RS_106]
                          PartitionCols:_col0
                          Group By Operator [GBY_105] (rows=158398802 width=88)
                            Output:["_col0","_col1","_col2","_col3"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                          <-Reducer 3 [SIMPLE_EDGE]
                            SHUFFLE [RS_22]
                              PartitionCols:_col0, _col1, _col2
                              Group By Operator [GBY_21] (rows=316797605 width=88)
                                Output:["_col0","_col1","_col2","_col3"],aggregations:["sum(_col7)"],keys:_col0, _col4, _col5
                                Select Operator [SEL_19] (rows=316797605 width=88)
                                  Output:["_col0","_col4","_col5","_col7"]
                                  Merge Join Operator [MERGEJOIN_74] (rows=316797605 width=88)
                                    Conds:RS_104._col1=RS_81._col0(Inner),Output:["_col0","_col2","_col4","_col5","_col6"]
                                  <-Reducer 9 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_81]
                                      PartitionCols:_col0
                                      Group By Operator [GBY_80] (rows=115500 width=1436)
                                        Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                      <-Map 8 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_79]
                                          PartitionCols:_col0, _col1, _col2
                                          Group By Operator [GBY_78] (rows=231000 width=1436)
                                            Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col0, _col1, _col2
                                            Select Operator [SEL_77] (rows=231000 width=1436)
                                              Output:["_col0","_col1","_col2"]
                                              Filter Operator [FIL_76] (rows=231000 width=1436)
                                                predicate:((i_manufact_id = 436) and i_item_sk is not null)
                                                TableScan [TS_8] (rows=462000 width=1436)
                                                  default@item,item,Tbl:COMPLETE,Col:NONE,Output:["i_item_sk","i_brand_id","i_brand","i_manufact_id"]
                                  <-Reducer 2 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_104]
                                      PartitionCols:_col1
                                      Select Operator [SEL_103] (rows=287997817 width=88)
                                        Output:["_col0","_col1","_col2"]
                                        Group By Operator [GBY_102] (rows=287997817 width=88)
                                          Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1
                                        <-Map 1 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_101]
                                            PartitionCols:_col0, _col1
                                            Group By Operator [GBY_100] (rows=575995635 width=88)
                                              Output:["_col0","_col1","_col2"],aggregations:["sum(_col2)"],keys:_col1, _col0
                                              Select Operator [SEL_99] (rows=575995635 width=88)
                                                Output:["_col0","_col1","_col2"]
                                                Filter Operator [FIL_98] (rows=575995635 width=88)
                                                  predicate:((ss_item_sk BETWEEN DynamicValue(RS_17_item_i_item_sk_min) AND DynamicValue(RS_17_item_i_item_sk_max) and in_bloom_filter(ss_item_sk, DynamicValue(RS_17_item_i_item_sk_bloom_filter))) and (ss_sold_date_sk BETWEEN DynamicValue(RS_34_dt_d_date_sk_min) AND DynamicValue(RS_34_dt_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_34_dt_d_date_sk_bloom_filter))) and ss_item_sk is not null and ss_sold_date_sk is not null)
                                                  TableScan [TS_0] (rows=575995635 width=88)
                                                    default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_date_sk","ss_item_sk","ss_ext_sales_price"]
                                                  <-Reducer 10 [BROADCAST_EDGE] vectorized
                                                    BROADCAST [RS_86]
                                                      Group By Operator [GBY_85] (rows=1 width=20)
                                                        Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                      <-Reducer 9 [CUSTOM_SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_84]
                                                          Group By Operator [GBY_83] (rows=1 width=20)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                            Select Operator [SEL_82] (rows=115500 width=1436)
                                                              Output:["_col0"]
                                                               Please refer to the previous Group By Operator [GBY_80]
                                                  <-Reducer 13 [BROADCAST_EDGE] vectorized
                                                    BROADCAST [RS_97]
                                                      Group By Operator [GBY_96] (rows=1 width=16)
                                                        Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                      <-Reducer 12 [CUSTOM_SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_95]
                                                          Group By Operator [GBY_94] (rows=1 width=16)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                            Select Operator [SEL_93] (rows=18262 width=1119)
                                                              Output:["_col0"]
                                                               Please refer to the previous Group By Operator [GBY_91]

