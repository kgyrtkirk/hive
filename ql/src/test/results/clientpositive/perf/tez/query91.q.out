PREHOOK: query: explain
select  
        cc_call_center_id Call_Center,
        cc_name Call_Center_Name,
        cc_manager Manager,
        sum(cr_net_loss) Returns_Loss
from
        call_center,
        catalog_returns,
        date_dim,
        customer,
        customer_address,
        customer_demographics,
        household_demographics
where
        cr_call_center_sk       = cc_call_center_sk
and     cr_returned_date_sk     = d_date_sk
and     cr_returning_customer_sk= c_customer_sk
and     cd_demo_sk              = c_current_cdemo_sk
and     hd_demo_sk              = c_current_hdemo_sk
and     ca_address_sk           = c_current_addr_sk
and     d_year                  = 1999 
and     d_moy                   = 11
and     ( (cd_marital_status       = 'M' and cd_education_status     = 'Unknown')
        or(cd_marital_status       = 'W' and cd_education_status     = 'Advanced Degree'))
and     hd_buy_potential like '0-500%'
and     ca_gmt_offset           = -7
group by cc_call_center_id,cc_name,cc_manager,cd_marital_status,cd_education_status
order by sum(cr_net_loss) desc
PREHOOK: type: QUERY
POSTHOOK: query: explain
select  
        cc_call_center_id Call_Center,
        cc_name Call_Center_Name,
        cc_manager Manager,
        sum(cr_net_loss) Returns_Loss
from
        call_center,
        catalog_returns,
        date_dim,
        customer,
        customer_address,
        customer_demographics,
        household_demographics
where
        cr_call_center_sk       = cc_call_center_sk
and     cr_returned_date_sk     = d_date_sk
and     cr_returning_customer_sk= c_customer_sk
and     cd_demo_sk              = c_current_cdemo_sk
and     hd_demo_sk              = c_current_hdemo_sk
and     ca_address_sk           = c_current_addr_sk
and     d_year                  = 1999 
and     d_moy                   = 11
and     ( (cd_marital_status       = 'M' and cd_education_status     = 'Unknown')
        or(cd_marital_status       = 'W' and cd_education_status     = 'Advanced Degree'))
and     hd_buy_potential like '0-500%'
and     ca_gmt_offset           = -7
group by cc_call_center_id,cc_name,cc_manager,cd_marital_status,cd_education_status
order by sum(cr_net_loss) desc
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 13 <- Map 12 (SIMPLE_EDGE), Map 17 (SIMPLE_EDGE)
Reducer 14 <- Reducer 13 (SIMPLE_EDGE)
Reducer 15 <- Reducer 14 (SIMPLE_EDGE), Reducer 19 (SIMPLE_EDGE)
Reducer 16 <- Reducer 15 (SIMPLE_EDGE)
Reducer 19 <- Map 18 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 10 (SIMPLE_EDGE)
Reducer 21 <- Map 20 (SIMPLE_EDGE)
Reducer 3 <- Map 11 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 16 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 21 (ONE_TO_ONE_EDGE), Reducer 6 (SIMPLE_EDGE)
Reducer 8 <- Reducer 7 (SIMPLE_EDGE)
Reducer 9 <- Reducer 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 9 vectorized
      File Output Operator [FS_217]
        Select Operator [SEL_216] (rows=14641000 width=860)
          Output:["_col0","_col1","_col2","_col3"]
        <-Reducer 8 [SIMPLE_EDGE] vectorized
          SHUFFLE [RS_215]
            Select Operator [SEL_214] (rows=14641000 width=860)
              Output:["_col0","_col1","_col2","_col4"]
              Group By Operator [GBY_213] (rows=14641000 width=860)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4
              <-Reducer 7 [SIMPLE_EDGE]
                SHUFFLE [RS_74]
                  PartitionCols:_col0, _col1, _col2, _col3, _col4
                  Group By Operator [GBY_73] (rows=29282001 width=860)
                    Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(_col9)"],keys:_col1, _col2, _col3, _col4, _col5
                    Select Operator [SEL_71] (rows=29282001 width=860)
                      Output:["_col1","_col2","_col3","_col4","_col5","_col9"]
                      Merge Join Operator [MERGEJOIN_176] (rows=29282001 width=860)
                        Conds:RS_206._col0=RS_212._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6","_col8"]
                      <-Reducer 21 [ONE_TO_ONE_EDGE] vectorized
                        FORWARD [RS_212]
                          PartitionCols:_col0
                          Group By Operator [GBY_211] (rows=1800 width=107)
                            Output:["_col0","_col1"],aggregations:["count(VALUE._col0)"],keys:KEY._col0
                          <-Map 20 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_210]
                              PartitionCols:_col0
                              Group By Operator [GBY_209] (rows=3600 width=107)
                                Output:["_col0","_col1"],aggregations:["count()"],keys:_col0
                                Select Operator [SEL_208] (rows=3600 width=107)
                                  Output:["_col0"]
                                  Filter Operator [FIL_207] (rows=3600 width=107)
                                    predicate:((hd_buy_potential like '0-500%') and hd_demo_sk is not null)
                                    TableScan [TS_60] (rows=7200 width=107)
                                      default@household_demographics,household_demographics,Tbl:COMPLETE,Col:NONE,Output:["hd_demo_sk","hd_buy_potential"]
                      <-Reducer 6 [SIMPLE_EDGE] vectorized
                        SHUFFLE [RS_206]
                          PartitionCols:_col0
                          Group By Operator [GBY_205] (rows=26620001 width=860)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5
                          <-Reducer 5 [SIMPLE_EDGE]
                            SHUFFLE [RS_57]
                              PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5
                              Group By Operator [GBY_56] (rows=53240002 width=860)
                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col10)"],keys:_col1, _col2, _col3, _col6, _col7, _col8
                                Select Operator [SEL_54] (rows=53240002 width=860)
                                  Output:["_col1","_col2","_col3","_col6","_col7","_col8","_col10"]
                                  Merge Join Operator [MERGEJOIN_175] (rows=53240002 width=860)
                                    Conds:RS_187._col0=RS_204._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col6","_col7","_col8","_col9"]
                                  <-Reducer 16 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_204]
                                      PartitionCols:_col0
                                      Group By Operator [GBY_203] (rows=8711661 width=106)
                                        Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3
                                      <-Reducer 15 [SIMPLE_EDGE]
                                        SHUFFLE [RS_48]
                                          PartitionCols:_col0, _col1, _col2, _col3
                                          Group By Operator [GBY_47] (rows=17423322 width=106)
                                            Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col8)"],keys:_col0, _col4, _col5, _col6
                                            Select Operator [SEL_45] (rows=17423322 width=106)
                                              Output:["_col0","_col4","_col5","_col6","_col8"]
                                              Merge Join Operator [MERGEJOIN_174] (rows=17423322 width=106)
                                                Conds:RS_196._col1=RS_202._col0(Inner),Output:["_col0","_col2","_col4","_col5","_col6","_col7"]
                                              <-Reducer 14 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_196]
                                                  PartitionCols:_col1
                                                  Select Operator [SEL_195] (rows=15839384 width=106)
                                                    Output:["_col0","_col1","_col2"]
                                                    Group By Operator [GBY_194] (rows=15839384 width=106)
                                                      Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1
                                                    <-Reducer 13 [SIMPLE_EDGE]
                                                      SHUFFLE [RS_31]
                                                        PartitionCols:_col0, _col1
                                                        Group By Operator [GBY_30] (rows=31678769 width=106)
                                                          Output:["_col0","_col1","_col2"],aggregations:["sum(_col3)"],keys:_col2, _col1
                                                          Merge Join Operator [MERGEJOIN_173] (rows=31678769 width=106)
                                                            Conds:RS_190._col0=RS_193._col0(Inner),Output:["_col1","_col2","_col3"]
                                                          <-Map 12 [SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_190]
                                                              PartitionCols:_col0
                                                              Select Operator [SEL_189] (rows=28798881 width=106)
                                                                Output:["_col0","_col1","_col2","_col3"]
                                                                Filter Operator [FIL_188] (rows=28798881 width=106)
                                                                  predicate:(cr_call_center_sk is not null and cr_returned_date_sk is not null and cr_returning_customer_sk is not null)
                                                                  TableScan [TS_20] (rows=28798881 width=106)
                                                                    default@catalog_returns,catalog_returns,Tbl:COMPLETE,Col:NONE,Output:["cr_returned_date_sk","cr_returning_customer_sk","cr_call_center_sk","cr_net_loss"]
                                                          <-Map 17 [SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_193]
                                                              PartitionCols:_col0
                                                              Select Operator [SEL_192] (rows=18262 width=1119)
                                                                Output:["_col0"]
                                                                Filter Operator [FIL_191] (rows=18262 width=1119)
                                                                  predicate:((d_moy = 11) and (d_year = 1999) and d_date_sk is not null)
                                                                  TableScan [TS_23] (rows=73049 width=1119)
                                                                    default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_year","d_moy"]
                                              <-Reducer 19 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_202]
                                                  PartitionCols:_col0
                                                  Group By Operator [GBY_201] (rows=30 width=2045)
                                                    Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3
                                                  <-Map 18 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_200]
                                                      PartitionCols:_col0, _col1, _col2, _col3
                                                      Group By Operator [GBY_199] (rows=60 width=2045)
                                                        Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["count()"],keys:_col0, _col1, _col2, _col3
                                                        Select Operator [SEL_198] (rows=60 width=2045)
                                                          Output:["_col0","_col1","_col2","_col3"]
                                                          Filter Operator [FIL_197] (rows=60 width=2045)
                                                            predicate:cc_call_center_sk is not null
                                                            TableScan [TS_34] (rows=60 width=2045)
                                                              default@call_center,call_center,Tbl:COMPLETE,Col:NONE,Output:["cc_call_center_sk","cc_call_center_id","cc_name","cc_manager"]
                                  <-Reducer 4 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_187]
                                      PartitionCols:_col0
                                      Group By Operator [GBY_186] (rows=48400001 width=860)
                                        Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3
                                      <-Reducer 3 [SIMPLE_EDGE]
                                        SHUFFLE [RS_17]
                                          PartitionCols:_col0, _col1, _col2, _col3
                                          Group By Operator [GBY_16] (rows=96800003 width=860)
                                            Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["count()"],keys:_col0, _col2, _col5, _col6
                                            Merge Join Operator [MERGEJOIN_172] (rows=96800003 width=860)
                                              Conds:RS_12._col3=RS_185._col0(Inner),Output:["_col0","_col2","_col5","_col6"]
                                            <-Map 11 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_185]
                                                PartitionCols:_col0
                                                Select Operator [SEL_184] (rows=20000000 width=1014)
                                                  Output:["_col0"]
                                                  Filter Operator [FIL_183] (rows=20000000 width=1014)
                                                    predicate:((ca_gmt_offset = -7) and ca_address_sk is not null)
                                                    TableScan [TS_6] (rows=40000000 width=1014)
                                                      default@customer_address,customer_address,Tbl:COMPLETE,Col:NONE,Output:["ca_address_sk","ca_gmt_offset"]
                                            <-Reducer 2 [SIMPLE_EDGE]
                                              SHUFFLE [RS_12]
                                                PartitionCols:_col3
                                                Merge Join Operator [MERGEJOIN_171] (rows=88000001 width=860)
                                                  Conds:RS_179._col1=RS_182._col0(Inner),Output:["_col0","_col2","_col3","_col5","_col6"]
                                                <-Map 1 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_179]
                                                    PartitionCols:_col1
                                                    Select Operator [SEL_178] (rows=80000000 width=860)
                                                      Output:["_col0","_col1","_col2","_col3"]
                                                      Filter Operator [FIL_177] (rows=80000000 width=860)
                                                        predicate:(c_current_addr_sk is not null and c_current_cdemo_sk is not null and c_current_hdemo_sk is not null and c_customer_sk is not null)
                                                        TableScan [TS_0] (rows=80000000 width=860)
                                                          default@customer,customer,Tbl:COMPLETE,Col:NONE,Output:["c_customer_sk","c_current_cdemo_sk","c_current_hdemo_sk","c_current_addr_sk"]
                                                <-Map 10 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_182]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_181] (rows=930900 width=385)
                                                      Output:["_col0","_col1","_col2"]
                                                      Filter Operator [FIL_180] (rows=930900 width=385)
                                                        predicate:((cd_education_status) IN ('Unknown', 'Advanced Degree') and (cd_marital_status) IN ('M', 'W') and (struct(cd_marital_status,cd_education_status)) IN (const struct('M','Unknown'), const struct('W','Advanced Degree')) and cd_demo_sk is not null)
                                                        TableScan [TS_3] (rows=1861800 width=385)
                                                          default@customer_demographics,customer_demographics,Tbl:COMPLETE,Col:NONE,Output:["cd_demo_sk","cd_marital_status","cd_education_status"]

