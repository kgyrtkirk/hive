PREHOOK: query: explain
select  i_item_id
       ,i_item_desc
       ,i_current_price
 from item, inventory, date_dim, store_sales
 where i_current_price between 30 and 30+30
 and inv_item_sk = i_item_sk
 and d_date_sk=inv_date_sk
 and d_date between cast('2002-05-30' as date) and (cast('2002-05-30' as date) +  60 days)
 and i_manufact_id in (437,129,727,663)
 and inv_quantity_on_hand between 100 and 500
 and ss_item_sk = i_item_sk
 group by i_item_id,i_item_desc,i_current_price
 order by i_item_id
 limit 100
PREHOOK: type: QUERY
POSTHOOK: query: explain
select  i_item_id
       ,i_item_desc
       ,i_current_price
 from item, inventory, date_dim, store_sales
 where i_current_price between 30 and 30+30
 and inv_item_sk = i_item_sk
 and d_date_sk=inv_date_sk
 and d_date between cast('2002-05-30' as date) and (cast('2002-05-30' as date) +  60 days)
 and i_manufact_id in (437,129,727,663)
 and inv_quantity_on_hand between 100 and 500
 and ss_item_sk = i_item_sk
 group by i_item_id,i_item_desc,i_current_price
 order by i_item_id
 limit 100
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 12 (BROADCAST_EDGE), Reducer 9 (BROADCAST_EDGE)
Reducer 11 <- Map 10 (SIMPLE_EDGE), Map 13 (SIMPLE_EDGE)
Reducer 12 <- Reducer 11 (CUSTOM_SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE)
Reducer 3 <- Reducer 2 (ONE_TO_ONE_EDGE), Reducer 8 (SIMPLE_EDGE)
Reducer 4 <- Reducer 11 (SIMPLE_EDGE), Reducer 3 (ONE_TO_ONE_EDGE)
Reducer 5 <- Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (SIMPLE_EDGE)
Reducer 8 <- Map 7 (SIMPLE_EDGE)
Reducer 9 <- Reducer 8 (CUSTOM_SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 6 vectorized
      File Output Operator [FS_122]
        Limit [LIM_121] (rows=100 width=88)
          Number of rows:100
          Select Operator [SEL_120] (rows=174238686 width=88)
            Output:["_col0","_col1","_col2"]
          <-Reducer 5 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_119]
              Group By Operator [GBY_118] (rows=174238686 width=88)
                Output:["_col0","_col1","_col2"],keys:KEY._col0, KEY._col1, KEY._col2
              <-Reducer 4 [SIMPLE_EDGE]
                SHUFFLE [RS_37]
                  PartitionCols:_col0, _col1, _col2
                  Group By Operator [GBY_36] (rows=348477373 width=88)
                    Output:["_col0","_col1","_col2"],keys:_col1, _col2, _col3
                    Top N Key Operator [TNK_56] (rows=348477373 width=88)
                      keys:_col1, _col2, _col3,sort order:+++,top n:100
                      Merge Join Operator [MERGEJOIN_92] (rows=348477373 width=88)
                        Conds:RS_32._col0=RS_33._col0(Left Semi),Output:["_col1","_col2","_col3"]
                      <-Reducer 11 [SIMPLE_EDGE]
                        SHUFFLE [RS_33]
                          PartitionCols:_col0
                          Group By Operator [GBY_31] (rows=4593600 width=15)
                            Output:["_col0"],keys:_col0
                            Select Operator [SEL_29] (rows=4593600 width=15)
                              Output:["_col0"]
                              Merge Join Operator [MERGEJOIN_90] (rows=4593600 width=15)
                                Conds:RS_106._col0=RS_109._col0(Inner),Output:["_col1"]
                              <-Map 10 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_106]
                                  PartitionCols:_col0
                                  Select Operator [SEL_105] (rows=4176000 width=15)
                                    Output:["_col0","_col1"]
                                    Filter Operator [FIL_104] (rows=4176000 width=15)
                                      predicate:(inv_date_sk is not null and inv_item_sk is not null and inv_quantity_on_hand BETWEEN 100 AND 500)
                                      TableScan [TS_20] (rows=37584000 width=15)
                                        default@inventory,inventory,Tbl:COMPLETE,Col:NONE,Output:["inv_date_sk","inv_item_sk","inv_quantity_on_hand"]
                              <-Map 13 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_109]
                                  PartitionCols:_col0
                                  Select Operator [SEL_108] (rows=8116 width=1119)
                                    Output:["_col0"]
                                    Filter Operator [FIL_107] (rows=8116 width=1119)
                                      predicate:(CAST( d_date AS TIMESTAMP) BETWEEN TIMESTAMP'2002-05-30 00:00:00' AND TIMESTAMP'2002-07-29 00:00:00' and d_date_sk is not null)
                                      TableScan [TS_23] (rows=73049 width=1119)
                                        default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_date"]
                      <-Reducer 3 [ONE_TO_ONE_EDGE]
                        FORWARD [RS_32]
                          PartitionCols:_col0
                          Select Operator [SEL_19] (rows=316797605 width=88)
                            Output:["_col0","_col1","_col2","_col3"]
                            Merge Join Operator [MERGEJOIN_91] (rows=316797605 width=88)
                              Conds:RS_117._col0=RS_98._col0(Inner),Output:["_col1","_col2","_col3","_col4"]
                            <-Reducer 8 [SIMPLE_EDGE] vectorized
                              PARTITION_ONLY_SHUFFLE [RS_98]
                                PartitionCols:_col0
                                Group By Operator [GBY_97] (rows=25666 width=1436)
                                  Output:["_col0","_col1","_col2","_col3"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3
                                <-Map 7 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_96]
                                    PartitionCols:_col0, _col1, _col2, _col3
                                    Group By Operator [GBY_95] (rows=51333 width=1436)
                                      Output:["_col0","_col1","_col2","_col3"],keys:_col0, _col1, _col2, _col3
                                      Select Operator [SEL_94] (rows=51333 width=1436)
                                        Output:["_col0","_col1","_col2","_col3"]
                                        Filter Operator [FIL_93] (rows=51333 width=1436)
                                          predicate:((i_manufact_id) IN (437, 129, 727, 663) and i_current_price BETWEEN 30 AND 60 and i_item_sk is not null)
                                          TableScan [TS_8] (rows=462000 width=1436)
                                            default@item,item,Tbl:COMPLETE,Col:NONE,Output:["i_item_sk","i_item_id","i_item_desc","i_current_price","i_manufact_id"]
                            <-Reducer 2 [ONE_TO_ONE_EDGE] vectorized
                              FORWARD [RS_117]
                                PartitionCols:_col0
                                Group By Operator [GBY_116] (rows=287997817 width=88)
                                  Output:["_col0"],keys:KEY._col0
                                <-Map 1 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_115]
                                    PartitionCols:_col0
                                    Group By Operator [GBY_114] (rows=575995635 width=88)
                                      Output:["_col0"],keys:_col0
                                      Select Operator [SEL_113] (rows=575995635 width=88)
                                        Output:["_col0"]
                                        Filter Operator [FIL_112] (rows=575995635 width=88)
                                          predicate:((ss_item_sk BETWEEN DynamicValue(RS_17_item_i_item_sk_min) AND DynamicValue(RS_17_item_i_item_sk_max) and in_bloom_filter(ss_item_sk, DynamicValue(RS_17_item_i_item_sk_bloom_filter))) and (ss_item_sk BETWEEN DynamicValue(RS_33_inventory_inv_item_sk_min) AND DynamicValue(RS_33_inventory_inv_item_sk_max) and in_bloom_filter(ss_item_sk, DynamicValue(RS_33_inventory_inv_item_sk_bloom_filter))) and ss_item_sk is not null)
                                          TableScan [TS_0] (rows=575995635 width=88)
                                            default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_item_sk"]
                                          <-Reducer 12 [BROADCAST_EDGE] vectorized
                                            BROADCAST [RS_111]
                                              Group By Operator [GBY_110] (rows=1 width=12)
                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=4593600)"]
                                              <-Reducer 11 [CUSTOM_SIMPLE_EDGE]
                                                SHUFFLE [RS_64]
                                                  Group By Operator [GBY_63] (rows=1 width=12)
                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=4593600)"]
                                                    Select Operator [SEL_62] (rows=4593600 width=15)
                                                      Output:["_col0"]
                                                       Please refer to the previous Group By Operator [GBY_31]
                                          <-Reducer 9 [BROADCAST_EDGE] vectorized
                                            BROADCAST [RS_103]
                                              Group By Operator [GBY_102] (rows=1 width=12)
                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                              <-Reducer 8 [CUSTOM_SIMPLE_EDGE] vectorized
                                                PARTITION_ONLY_SHUFFLE [RS_101]
                                                  Group By Operator [GBY_100] (rows=1 width=12)
                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                    Select Operator [SEL_99] (rows=25666 width=1436)
                                                      Output:["_col0"]
                                                       Please refer to the previous Group By Operator [GBY_97]

