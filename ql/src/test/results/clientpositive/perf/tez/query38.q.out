PREHOOK: query: explain
select  count(*) from (
    select distinct c_last_name, c_first_name, d_date
    from store_sales, date_dim, customer
          where store_sales.ss_sold_date_sk = date_dim.d_date_sk
      and store_sales.ss_customer_sk = customer.c_customer_sk
      and d_month_seq between 1212 and 1212 + 11
  intersect
    select distinct c_last_name, c_first_name, d_date
    from catalog_sales, date_dim, customer
          where catalog_sales.cs_sold_date_sk = date_dim.d_date_sk
      and catalog_sales.cs_bill_customer_sk = customer.c_customer_sk
      and d_month_seq between 1212 and 1212 + 11
  intersect
    select distinct c_last_name, c_first_name, d_date
    from web_sales, date_dim, customer
          where web_sales.ws_sold_date_sk = date_dim.d_date_sk
      and web_sales.ws_bill_customer_sk = customer.c_customer_sk
      and d_month_seq between 1212 and 1212 + 11
) hot_cust
limit 100
PREHOOK: type: QUERY
POSTHOOK: query: explain
select  count(*) from (
    select distinct c_last_name, c_first_name, d_date
    from store_sales, date_dim, customer
          where store_sales.ss_sold_date_sk = date_dim.d_date_sk
      and store_sales.ss_customer_sk = customer.c_customer_sk
      and d_month_seq between 1212 and 1212 + 11
  intersect
    select distinct c_last_name, c_first_name, d_date
    from catalog_sales, date_dim, customer
          where catalog_sales.cs_sold_date_sk = date_dim.d_date_sk
      and catalog_sales.cs_bill_customer_sk = customer.c_customer_sk
      and d_month_seq between 1212 and 1212 + 11
  intersect
    select distinct c_last_name, c_first_name, d_date
    from web_sales, date_dim, customer
          where web_sales.ws_sold_date_sk = date_dim.d_date_sk
      and web_sales.ws_bill_customer_sk = customer.c_customer_sk
      and d_month_seq between 1212 and 1212 + 11
) hot_cust
limit 100
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Map 15 <- Reducer 19 (BROADCAST_EDGE), Reducer 8 (BROADCAST_EDGE)
Map 26 <- Reducer 11 (BROADCAST_EDGE), Reducer 22 (BROADCAST_EDGE)
Map 27 <- Reducer 14 (BROADCAST_EDGE), Reducer 25 (BROADCAST_EDGE)
Reducer 10 <- Reducer 9 (SIMPLE_EDGE), Union 5 (CONTAINS)
Reducer 11 <- Reducer 2 (CUSTOM_SIMPLE_EDGE)
Reducer 12 <- Reducer 2 (SIMPLE_EDGE), Reducer 24 (SIMPLE_EDGE)
Reducer 13 <- Reducer 12 (SIMPLE_EDGE), Union 5 (CONTAINS)
Reducer 14 <- Reducer 2 (CUSTOM_SIMPLE_EDGE)
Reducer 16 <- Map 15 (SIMPLE_EDGE), Map 18 (SIMPLE_EDGE)
Reducer 17 <- Reducer 16 (SIMPLE_EDGE)
Reducer 19 <- Map 18 (CUSTOM_SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE)
Reducer 20 <- Map 18 (SIMPLE_EDGE), Map 26 (SIMPLE_EDGE)
Reducer 21 <- Reducer 20 (SIMPLE_EDGE)
Reducer 22 <- Map 18 (CUSTOM_SIMPLE_EDGE)
Reducer 23 <- Map 18 (SIMPLE_EDGE), Map 27 (SIMPLE_EDGE)
Reducer 24 <- Reducer 23 (SIMPLE_EDGE)
Reducer 25 <- Map 18 (CUSTOM_SIMPLE_EDGE)
Reducer 3 <- Reducer 17 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE), Union 5 (CONTAINS)
Reducer 6 <- Union 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 6 (CUSTOM_SIMPLE_EDGE)
Reducer 8 <- Reducer 2 (CUSTOM_SIMPLE_EDGE)
Reducer 9 <- Reducer 2 (SIMPLE_EDGE), Reducer 21 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 7 vectorized
      File Output Operator [FS_282]
        Limit [LIM_281] (rows=1 width=16)
          Number of rows:100
          Group By Operator [GBY_280] (rows=1 width=16)
            Output:["_col0"],aggregations:["count(VALUE._col0)"]
          <-Reducer 6 [CUSTOM_SIMPLE_EDGE] vectorized
            PARTITION_ONLY_SHUFFLE [RS_279]
              Group By Operator [GBY_278] (rows=1 width=16)
                Output:["_col0"],aggregations:["count()"]
                Select Operator [SEL_277] (rows=1 width=108)
                  Filter Operator [FIL_276] (rows=1 width=108)
                    predicate:(_col3 = 3L)
                    Select Operator [SEL_275] (rows=76229105 width=108)
                      Output:["_col3"]
                      Group By Operator [GBY_274] (rows=76229105 width=108)
                        Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                      <-Union 5 [SIMPLE_EDGE]
                        <-Reducer 10 [CONTAINS] vectorized
                          Reduce Output Operator [RS_296]
                            PartitionCols:_col0, _col1, _col2
                            Group By Operator [GBY_295] (rows=152458211 width=108)
                              Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                              Group By Operator [GBY_294] (rows=43558464 width=135)
                                Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col1, _col0, _col2
                                Select Operator [SEL_293] (rows=87116929 width=135)
                                  Output:["_col0","_col1","_col2"]
                                  Group By Operator [GBY_292] (rows=87116929 width=135)
                                    Output:["_col0","_col1","_col2"],keys:KEY._col0, KEY._col1, KEY._col2
                                  <-Reducer 9 [SIMPLE_EDGE]
                                    SHUFFLE [RS_62]
                                      PartitionCols:_col0, _col1, _col2
                                      Group By Operator [GBY_61] (rows=174233858 width=135)
                                        Output:["_col0","_col1","_col2"],keys:_col2, _col1, _col4
                                        Merge Join Operator [MERGEJOIN_209] (rows=174233858 width=135)
                                          Conds:RS_236._col0=RS_291._col0(Inner),Output:["_col1","_col2","_col4"]
                                        <-Reducer 2 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_236]
                                            PartitionCols:_col0
                                            Group By Operator [GBY_233] (rows=40000000 width=860)
                                              Output:["_col0","_col1","_col2"],keys:KEY._col0, KEY._col1, KEY._col2
                                            <-Map 1 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_232]
                                                PartitionCols:_col0, _col1, _col2
                                                Group By Operator [GBY_231] (rows=80000000 width=860)
                                                  Output:["_col0","_col1","_col2"],keys:_col0, _col1, _col2
                                                  Select Operator [SEL_230] (rows=80000000 width=860)
                                                    Output:["_col0","_col1","_col2"]
                                                    Filter Operator [FIL_229] (rows=80000000 width=860)
                                                      predicate:c_customer_sk is not null
                                                      TableScan [TS_0] (rows=80000000 width=860)
                                                        default@customer,customer,Tbl:COMPLETE,Col:NONE,Output:["c_customer_sk","c_first_name","c_last_name"]
                                        <-Reducer 21 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_291]
                                            PartitionCols:_col0
                                            Group By Operator [GBY_290] (rows=158394413 width=135)
                                              Output:["_col0","_col1"],keys:KEY._col0, KEY._col1
                                            <-Reducer 20 [SIMPLE_EDGE]
                                              SHUFFLE [RS_54]
                                                PartitionCols:_col0, _col1
                                                Group By Operator [GBY_53] (rows=316788826 width=135)
                                                  Output:["_col0","_col1"],keys:_col1, _col3
                                                  Merge Join Operator [MERGEJOIN_206] (rows=316788826 width=135)
                                                    Conds:RS_289._col0=RS_250._col0(Inner),Output:["_col1","_col3"]
                                                  <-Map 18 [SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_250]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_247] (rows=73049 width=1119)
                                                        Output:["_col0","_col1"]
                                                        Filter Operator [FIL_246] (rows=73049 width=1119)
                                                          predicate:(d_date_sk is not null and d_month_seq BETWEEN 1212 AND 1223)
                                                          TableScan [TS_11] (rows=73049 width=1119)
                                                            default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_date","d_month_seq"]
                                                  <-Map 26 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_289]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_288] (rows=287989836 width=135)
                                                        Output:["_col0","_col1"]
                                                        Filter Operator [FIL_287] (rows=287989836 width=135)
                                                          predicate:((cs_bill_customer_sk BETWEEN DynamicValue(RS_57_customer_c_customer_sk_min) AND DynamicValue(RS_57_customer_c_customer_sk_max) and in_bloom_filter(cs_bill_customer_sk, DynamicValue(RS_57_customer_c_customer_sk_bloom_filter))) and (cs_sold_date_sk BETWEEN DynamicValue(RS_50_date_dim_d_date_sk_min) AND DynamicValue(RS_50_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_50_date_dim_d_date_sk_bloom_filter))) and cs_bill_customer_sk is not null and cs_sold_date_sk is not null)
                                                          TableScan [TS_43] (rows=287989836 width=135)
                                                            default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:NONE,Output:["cs_sold_date_sk","cs_bill_customer_sk"]
                                                          <-Reducer 11 [BROADCAST_EDGE] vectorized
                                                            BROADCAST [RS_286]
                                                              Group By Operator [GBY_285] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=40000000)"]
                                                              <-Reducer 2 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                SHUFFLE [RS_244]
                                                                  Group By Operator [GBY_241] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=40000000)"]
                                                                    Select Operator [SEL_237] (rows=40000000 width=860)
                                                                      Output:["_col0"]
                                                                       Please refer to the previous Group By Operator [GBY_233]
                                                          <-Reducer 22 [BROADCAST_EDGE] vectorized
                                                            BROADCAST [RS_284]
                                                              Group By Operator [GBY_283] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                              <-Map 18 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                PARTITION_ONLY_SHUFFLE [RS_258]
                                                                  Group By Operator [GBY_255] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                    Select Operator [SEL_251] (rows=73049 width=1119)
                                                                      Output:["_col0"]
                                                                       Please refer to the previous Select Operator [SEL_247]
                        <-Reducer 13 [CONTAINS] vectorized
                          Reduce Output Operator [RS_310]
                            PartitionCols:_col0, _col1, _col2
                            Group By Operator [GBY_309] (rows=152458211 width=108)
                              Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                              Group By Operator [GBY_308] (rows=21780404 width=135)
                                Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col1, _col0, _col2
                                Select Operator [SEL_307] (rows=43560808 width=135)
                                  Output:["_col0","_col1","_col2"]
                                  Group By Operator [GBY_306] (rows=43560808 width=135)
                                    Output:["_col0","_col1","_col2"],keys:KEY._col0, KEY._col1, KEY._col2
                                  <-Reducer 12 [SIMPLE_EDGE]
                                    SHUFFLE [RS_98]
                                      PartitionCols:_col0, _col1, _col2
                                      Group By Operator [GBY_97] (rows=87121617 width=135)
                                        Output:["_col0","_col1","_col2"],keys:_col2, _col1, _col4
                                        Merge Join Operator [MERGEJOIN_210] (rows=87121617 width=135)
                                          Conds:RS_238._col0=RS_305._col0(Inner),Output:["_col1","_col2","_col4"]
                                        <-Reducer 2 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_238]
                                            PartitionCols:_col0
                                             Please refer to the previous Group By Operator [GBY_233]
                                        <-Reducer 24 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_305]
                                            PartitionCols:_col0
                                            Group By Operator [GBY_304] (rows=79201469 width=135)
                                              Output:["_col0","_col1"],keys:KEY._col0, KEY._col1
                                            <-Reducer 23 [SIMPLE_EDGE]
                                              SHUFFLE [RS_90]
                                                PartitionCols:_col0, _col1
                                                Group By Operator [GBY_89] (rows=158402938 width=135)
                                                  Output:["_col0","_col1"],keys:_col1, _col3
                                                  Merge Join Operator [MERGEJOIN_207] (rows=158402938 width=135)
                                                    Conds:RS_303._col0=RS_252._col0(Inner),Output:["_col1","_col3"]
                                                  <-Map 18 [SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_252]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_247]
                                                  <-Map 27 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_303]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_302] (rows=144002668 width=135)
                                                        Output:["_col0","_col1"]
                                                        Filter Operator [FIL_301] (rows=144002668 width=135)
                                                          predicate:((ws_bill_customer_sk BETWEEN DynamicValue(RS_93_customer_c_customer_sk_min) AND DynamicValue(RS_93_customer_c_customer_sk_max) and in_bloom_filter(ws_bill_customer_sk, DynamicValue(RS_93_customer_c_customer_sk_bloom_filter))) and (ws_sold_date_sk BETWEEN DynamicValue(RS_86_date_dim_d_date_sk_min) AND DynamicValue(RS_86_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_86_date_dim_d_date_sk_bloom_filter))) and ws_bill_customer_sk is not null and ws_sold_date_sk is not null)
                                                          TableScan [TS_79] (rows=144002668 width=135)
                                                            default@web_sales,web_sales,Tbl:COMPLETE,Col:NONE,Output:["ws_sold_date_sk","ws_bill_customer_sk"]
                                                          <-Reducer 14 [BROADCAST_EDGE] vectorized
                                                            BROADCAST [RS_300]
                                                              Group By Operator [GBY_299] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=40000000)"]
                                                              <-Reducer 2 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                SHUFFLE [RS_245]
                                                                  Group By Operator [GBY_242] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=40000000)"]
                                                                    Select Operator [SEL_239] (rows=40000000 width=860)
                                                                      Output:["_col0"]
                                                                       Please refer to the previous Group By Operator [GBY_233]
                                                          <-Reducer 25 [BROADCAST_EDGE] vectorized
                                                            BROADCAST [RS_298]
                                                              Group By Operator [GBY_297] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                              <-Map 18 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                PARTITION_ONLY_SHUFFLE [RS_259]
                                                                  Group By Operator [GBY_256] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                    Select Operator [SEL_253] (rows=73049 width=1119)
                                                                      Output:["_col0"]
                                                                       Please refer to the previous Select Operator [SEL_247]
                        <-Reducer 4 [CONTAINS] vectorized
                          Reduce Output Operator [RS_273]
                            PartitionCols:_col0, _col1, _col2
                            Group By Operator [GBY_272] (rows=152458211 width=108)
                              Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                              Group By Operator [GBY_271] (rows=87119343 width=88)
                                Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col1, _col0, _col2
                                Select Operator [SEL_270] (rows=174238687 width=88)
                                  Output:["_col0","_col1","_col2"]
                                  Group By Operator [GBY_269] (rows=174238687 width=88)
                                    Output:["_col0","_col1","_col2"],keys:KEY._col0, KEY._col1, KEY._col2
                                  <-Reducer 3 [SIMPLE_EDGE]
                                    SHUFFLE [RS_27]
                                      PartitionCols:_col0, _col1, _col2
                                      Group By Operator [GBY_26] (rows=348477374 width=88)
                                        Output:["_col0","_col1","_col2"],keys:_col2, _col1, _col4
                                        Merge Join Operator [MERGEJOIN_208] (rows=348477374 width=88)
                                          Conds:RS_234._col0=RS_268._col0(Inner),Output:["_col1","_col2","_col4"]
                                        <-Reducer 2 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_234]
                                            PartitionCols:_col0
                                             Please refer to the previous Group By Operator [GBY_233]
                                        <-Reducer 17 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_268]
                                            PartitionCols:_col0
                                            Group By Operator [GBY_267] (rows=316797606 width=88)
                                              Output:["_col0","_col1"],keys:KEY._col0, KEY._col1
                                            <-Reducer 16 [SIMPLE_EDGE]
                                              SHUFFLE [RS_19]
                                                PartitionCols:_col0, _col1
                                                Group By Operator [GBY_18] (rows=633595212 width=88)
                                                  Output:["_col0","_col1"],keys:_col1, _col3
                                                  Merge Join Operator [MERGEJOIN_205] (rows=633595212 width=88)
                                                    Conds:RS_266._col0=RS_248._col0(Inner),Output:["_col1","_col3"]
                                                  <-Map 18 [SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_248]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_247]
                                                  <-Map 15 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_266]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_265] (rows=575995635 width=88)
                                                        Output:["_col0","_col1"]
                                                        Filter Operator [FIL_264] (rows=575995635 width=88)
                                                          predicate:((ss_customer_sk BETWEEN DynamicValue(RS_22_customer_c_customer_sk_min) AND DynamicValue(RS_22_customer_c_customer_sk_max) and in_bloom_filter(ss_customer_sk, DynamicValue(RS_22_customer_c_customer_sk_bloom_filter))) and (ss_sold_date_sk BETWEEN DynamicValue(RS_15_date_dim_d_date_sk_min) AND DynamicValue(RS_15_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_15_date_dim_d_date_sk_bloom_filter))) and ss_customer_sk is not null and ss_sold_date_sk is not null)
                                                          TableScan [TS_8] (rows=575995635 width=88)
                                                            default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_date_sk","ss_customer_sk"]
                                                          <-Reducer 19 [BROADCAST_EDGE] vectorized
                                                            BROADCAST [RS_261]
                                                              Group By Operator [GBY_260] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                              <-Map 18 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                PARTITION_ONLY_SHUFFLE [RS_257]
                                                                  Group By Operator [GBY_254] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                    Select Operator [SEL_249] (rows=73049 width=1119)
                                                                      Output:["_col0"]
                                                                       Please refer to the previous Select Operator [SEL_247]
                                                          <-Reducer 8 [BROADCAST_EDGE] vectorized
                                                            BROADCAST [RS_263]
                                                              Group By Operator [GBY_262] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=40000000)"]
                                                              <-Reducer 2 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                SHUFFLE [RS_243]
                                                                  Group By Operator [GBY_240] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=40000000)"]
                                                                    Select Operator [SEL_235] (rows=40000000 width=860)
                                                                      Output:["_col0"]
                                                                       Please refer to the previous Group By Operator [GBY_233]

