PREHOOK: query: explain
select   
     i_item_id
    ,i_item_desc
    ,s_store_id
    ,s_store_name
    ,sum(ss_quantity)        as store_sales_quantity
    ,sum(sr_return_quantity) as store_returns_quantity
    ,sum(cs_quantity)        as catalog_sales_quantity
 from
    store_sales
   ,store_returns
   ,catalog_sales
   ,date_dim             d1
   ,date_dim             d2
   ,date_dim             d3
   ,store
   ,item
 where
     d1.d_moy               = 4 
 and d1.d_year              = 1999
 and d1.d_date_sk           = ss_sold_date_sk
 and i_item_sk              = ss_item_sk
 and s_store_sk             = ss_store_sk
 and ss_customer_sk         = sr_customer_sk
 and ss_item_sk             = sr_item_sk
 and ss_ticket_number       = sr_ticket_number
 and sr_returned_date_sk    = d2.d_date_sk
 and d2.d_moy               between 4 and  4 + 3 
 and d2.d_year              = 1999
 and sr_customer_sk         = cs_bill_customer_sk
 and sr_item_sk             = cs_item_sk
 and cs_sold_date_sk        = d3.d_date_sk     
 and d3.d_year              in (1999,1999+1,1999+2)
 group by
    i_item_id
   ,i_item_desc
   ,s_store_id
   ,s_store_name
 order by
    i_item_id 
   ,i_item_desc
   ,s_store_id
   ,s_store_name
 limit 100
PREHOOK: type: QUERY
POSTHOOK: query: explain
select   
     i_item_id
    ,i_item_desc
    ,s_store_id
    ,s_store_name
    ,sum(ss_quantity)        as store_sales_quantity
    ,sum(sr_return_quantity) as store_returns_quantity
    ,sum(cs_quantity)        as catalog_sales_quantity
 from
    store_sales
   ,store_returns
   ,catalog_sales
   ,date_dim             d1
   ,date_dim             d2
   ,date_dim             d3
   ,store
   ,item
 where
     d1.d_moy               = 4 
 and d1.d_year              = 1999
 and d1.d_date_sk           = ss_sold_date_sk
 and i_item_sk              = ss_item_sk
 and s_store_sk             = ss_store_sk
 and ss_customer_sk         = sr_customer_sk
 and ss_item_sk             = sr_item_sk
 and ss_ticket_number       = sr_ticket_number
 and sr_returned_date_sk    = d2.d_date_sk
 and d2.d_moy               between 4 and  4 + 3 
 and d2.d_year              = 1999
 and sr_customer_sk         = cs_bill_customer_sk
 and sr_item_sk             = cs_item_sk
 and cs_sold_date_sk        = d3.d_date_sk     
 and d3.d_year              in (1999,1999+1,1999+2)
 group by
    i_item_id
   ,i_item_desc
   ,s_store_id
   ,s_store_name
 order by
    i_item_id 
   ,i_item_desc
   ,s_store_id
   ,s_store_name
 limit 100
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 14 (BROADCAST_EDGE), Reducer 24 (BROADCAST_EDGE), Reducer 8 (BROADCAST_EDGE)
Map 15 <- Reducer 14 (BROADCAST_EDGE), Reducer 21 (BROADCAST_EDGE), Reducer 24 (BROADCAST_EDGE), Reducer 25 (BROADCAST_EDGE), Reducer 26 (BROADCAST_EDGE), Reducer 30 (BROADCAST_EDGE)
Reducer 10 <- Map 9 (SIMPLE_EDGE)
Reducer 11 <- Reducer 10 (SIMPLE_EDGE), Reducer 19 (SIMPLE_EDGE)
Reducer 12 <- Reducer 11 (SIMPLE_EDGE), Reducer 29 (SIMPLE_EDGE)
Reducer 13 <- Reducer 12 (SIMPLE_EDGE)
Reducer 14 <- Reducer 10 (CUSTOM_SIMPLE_EDGE)
Reducer 16 <- Map 15 (SIMPLE_EDGE), Map 20 (SIMPLE_EDGE)
Reducer 17 <- Reducer 16 (SIMPLE_EDGE)
Reducer 18 <- Reducer 17 (SIMPLE_EDGE), Reducer 23 (ONE_TO_ONE_EDGE)
Reducer 19 <- Reducer 18 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 7 (SIMPLE_EDGE)
Reducer 21 <- Map 20 (CUSTOM_SIMPLE_EDGE)
Reducer 22 <- Map 20 (SIMPLE_EDGE), Map 27 (SIMPLE_EDGE)
Reducer 23 <- Reducer 22 (SIMPLE_EDGE)
Reducer 24 <- Reducer 23 (CUSTOM_SIMPLE_EDGE)
Reducer 25 <- Reducer 23 (CUSTOM_SIMPLE_EDGE)
Reducer 26 <- Reducer 23 (CUSTOM_SIMPLE_EDGE)
Reducer 29 <- Map 28 (SIMPLE_EDGE)
Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
Reducer 30 <- Reducer 29 (CUSTOM_SIMPLE_EDGE)
Reducer 4 <- Reducer 13 (SIMPLE_EDGE), Reducer 3 (ONE_TO_ONE_EDGE)
Reducer 5 <- Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (SIMPLE_EDGE)
Reducer 8 <- Map 7 (CUSTOM_SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 6 vectorized
      File Output Operator [FS_326]
        Limit [LIM_325] (rows=100 width=135)
          Number of rows:100
          Select Operator [SEL_324] (rows=87116929 width=135)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
          <-Reducer 5 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_323]
              Group By Operator [GBY_322] (rows=87116929 width=135)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3
              <-Reducer 4 [SIMPLE_EDGE]
                SHUFFLE [RS_87]
                  PartitionCols:_col0, _col1, _col2, _col3
                  Group By Operator [GBY_86] (rows=174233858 width=135)
                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col13)","sum(_col14)","sum(_col15)"],keys:_col4, _col5, _col8, _col9
                    Top N Key Operator [TNK_131] (rows=174233858 width=135)
                      keys:_col4, _col5, _col8, _col9,sort order:++++,top n:100
                      Select Operator [SEL_84] (rows=174233858 width=135)
                        Output:["_col4","_col5","_col8","_col9","_col13","_col14","_col15"]
                        Merge Join Operator [MERGEJOIN_247] (rows=174233858 width=135)
                          Conds:RS_298._col0, _col1=RS_82._col3, _col2(Inner),Output:["_col2","_col3","_col4","_col5","_col8","_col9","_col10","_col11","_col12"]
                        <-Reducer 13 [SIMPLE_EDGE]
                          SHUFFLE [RS_82]
                            PartitionCols:_col3, _col2
                            Select Operator [SEL_80] (rows=105414409 width=88)
                              Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"]
                              Group By Operator [GBY_79] (rows=105414409 width=88)
                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)","$sum0(VALUE._col2)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5
                              <-Reducer 12 [SIMPLE_EDGE]
                                SHUFFLE [RS_78]
                                  PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5
                                  Group By Operator [GBY_77] (rows=210828819 width=88)
                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"],aggregations:["sum(_col12)","sum(_col13)","$sum0(_col14)"],keys:_col4, _col3, _col0, _col1, _col9, _col10
                                    Select Operator [SEL_75] (rows=210828819 width=88)
                                      Output:["_col0","_col1","_col3","_col4","_col9","_col10","_col12","_col13","_col14"]
                                      Merge Join Operator [MERGEJOIN_246] (rows=210828819 width=88)
                                        Conds:RS_72._col2=RS_310._col0(Inner),Output:["_col0","_col1","_col3","_col4","_col5","_col6","_col7","_col9","_col10","_col11"]
                                      <-Reducer 29 [SIMPLE_EDGE] vectorized
                                        PARTITION_ONLY_SHUFFLE [RS_310]
                                          PartitionCols:_col0
                                          Group By Operator [GBY_309] (rows=852 width=1910)
                                            Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                          <-Map 28 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_308]
                                              PartitionCols:_col0, _col1, _col2
                                              Group By Operator [GBY_307] (rows=1704 width=1910)
                                                Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col0, _col1, _col2
                                                Select Operator [SEL_306] (rows=1704 width=1910)
                                                  Output:["_col0","_col1","_col2"]
                                                  Filter Operator [FIL_305] (rows=1704 width=1910)
                                                    predicate:s_store_sk is not null
                                                    TableScan [TS_64] (rows=1704 width=1910)
                                                      default@store,store,Tbl:COMPLETE,Col:NONE,Output:["s_store_sk","s_store_id","s_store_name"]
                                      <-Reducer 11 [SIMPLE_EDGE]
                                        SHUFFLE [RS_72]
                                          PartitionCols:_col2
                                          Select Operator [SEL_62] (rows=191662559 width=88)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                            Merge Join Operator [MERGEJOIN_245] (rows=191662559 width=88)
                                              Conds:RS_261._col0=RS_60._col0(Inner),Output:["_col1","_col2","_col3","_col5","_col6","_col7","_col8","_col9","_col10"]
                                            <-Reducer 10 [SIMPLE_EDGE] vectorized
                                              PARTITION_ONLY_SHUFFLE [RS_261]
                                                PartitionCols:_col0
                                                Group By Operator [GBY_260] (rows=231000 width=1436)
                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                <-Map 9 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_259]
                                                    PartitionCols:_col0, _col1, _col2
                                                    Group By Operator [GBY_258] (rows=462000 width=1436)
                                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col0, _col1, _col2
                                                      Select Operator [SEL_257] (rows=462000 width=1436)
                                                        Output:["_col0","_col1","_col2"]
                                                        Filter Operator [FIL_256] (rows=462000 width=1436)
                                                          predicate:i_item_sk is not null
                                                          TableScan [TS_14] (rows=462000 width=1436)
                                                            default@item,item,Tbl:COMPLETE,Col:NONE,Output:["i_item_sk","i_item_id","i_item_desc"]
                                            <-Reducer 19 [SIMPLE_EDGE]
                                              SHUFFLE [RS_60]
                                                PartitionCols:_col0
                                                Group By Operator [GBY_57] (rows=174238687 width=88)
                                                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)","$sum0(VALUE._col2)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3
                                                <-Reducer 18 [SIMPLE_EDGE]
                                                  SHUFFLE [RS_56]
                                                    PartitionCols:_col0, _col1, _col2, _col3
                                                    Group By Operator [GBY_55] (rows=348477374 width=88)
                                                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col11)","sum(_col12)","$sum0(_col13)"],keys:_col0, _col2, _col6, _col7
                                                      Select Operator [SEL_53] (rows=348477374 width=88)
                                                        Output:["_col0","_col2","_col6","_col7","_col11","_col12","_col13"]
                                                        Merge Join Operator [MERGEJOIN_244] (rows=348477374 width=88)
                                                          Conds:RS_321._col0, _col1, _col3=RS_281._col0, _col1, _col2(Inner),Output:["_col0","_col2","_col4","_col5","_col6","_col7","_col9","_col10"]
                                                        <-Reducer 23 [ONE_TO_ONE_EDGE] vectorized
                                                          PARTITION_ONLY_SHUFFLE [RS_281]
                                                            PartitionCols:_col0, _col1, _col2
                                                            Group By Operator [GBY_280] (rows=31675133 width=77)
                                                              Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["count(VALUE._col0)","sum(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                            <-Reducer 22 [SIMPLE_EDGE]
                                                              SHUFFLE [RS_47]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_46] (rows=63350266 width=77)
                                                                  Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["count()","sum(_col4)"],keys:_col1, _col2, _col3
                                                                  Merge Join Operator [MERGEJOIN_243] (rows=63350266 width=77)
                                                                    Conds:RS_279._col0=RS_274._col0(Inner),Output:["_col1","_col2","_col3","_col4"]
                                                                  <-Map 20 [SIMPLE_EDGE] vectorized
                                                                    SHUFFLE [RS_274]
                                                                      PartitionCols:_col0
                                                                      Select Operator [SEL_271] (rows=36524 width=1119)
                                                                        Output:["_col0"]
                                                                        Filter Operator [FIL_269] (rows=36524 width=1119)
                                                                          predicate:((d_year = 1999) and d_date_sk is not null and d_moy BETWEEN 4 AND 7)
                                                                          TableScan [TS_25] (rows=73049 width=1119)
                                                                            default@date_dim,d1,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_year","d_moy"]
                                                                  <-Map 27 [SIMPLE_EDGE] vectorized
                                                                    SHUFFLE [RS_279]
                                                                      PartitionCols:_col0
                                                                      Select Operator [SEL_278] (rows=57591150 width=77)
                                                                        Output:["_col0","_col1","_col2","_col3","_col4"]
                                                                        Filter Operator [FIL_277] (rows=57591150 width=77)
                                                                          predicate:(sr_customer_sk is not null and sr_item_sk is not null and sr_returned_date_sk is not null and sr_ticket_number is not null)
                                                                          TableScan [TS_36] (rows=57591150 width=77)
                                                                            default@store_returns,store_returns,Tbl:COMPLETE,Col:NONE,Output:["sr_returned_date_sk","sr_item_sk","sr_customer_sk","sr_ticket_number","sr_return_quantity"]
                                                        <-Reducer 17 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_321]
                                                            PartitionCols:_col0, _col1, _col3
                                                            Select Operator [SEL_320] (rows=316797606 width=88)
                                                              Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                                              Group By Operator [GBY_319] (rows=316797606 width=88)
                                                                Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3
                                                              <-Reducer 16 [SIMPLE_EDGE]
                                                                SHUFFLE [RS_33]
                                                                  PartitionCols:_col0, _col1, _col2, _col3
                                                                  Group By Operator [GBY_32] (rows=633595212 width=88)
                                                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(_col5)","count()"],keys:_col1, _col2, _col4, _col3
                                                                    Merge Join Operator [MERGEJOIN_242] (rows=633595212 width=88)
                                                                      Conds:RS_318._col0=RS_272._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5"]
                                                                    <-Map 20 [SIMPLE_EDGE] vectorized
                                                                      SHUFFLE [RS_272]
                                                                        PartitionCols:_col0
                                                                        Select Operator [SEL_270] (rows=18262 width=1119)
                                                                          Output:["_col0"]
                                                                          Filter Operator [FIL_268] (rows=18262 width=1119)
                                                                            predicate:((d_moy = 4) and (d_year = 1999) and d_date_sk is not null)
                                                                             Please refer to the previous TableScan [TS_25]
                                                                    <-Map 15 [SIMPLE_EDGE] vectorized
                                                                      SHUFFLE [RS_318]
                                                                        PartitionCols:_col0
                                                                        Select Operator [SEL_317] (rows=575995635 width=88)
                                                                          Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                                                          Filter Operator [FIL_316] (rows=575995635 width=88)
                                                                            predicate:((ss_customer_sk BETWEEN DynamicValue(RS_51_store_returns_sr_customer_sk_min) AND DynamicValue(RS_51_store_returns_sr_customer_sk_max) and in_bloom_filter(ss_customer_sk, DynamicValue(RS_51_store_returns_sr_customer_sk_bloom_filter))) and (ss_item_sk BETWEEN DynamicValue(RS_51_store_returns_sr_item_sk_min) AND DynamicValue(RS_51_store_returns_sr_item_sk_max) and in_bloom_filter(ss_item_sk, DynamicValue(RS_51_store_returns_sr_item_sk_bloom_filter))) and (ss_item_sk BETWEEN DynamicValue(RS_59_item_i_item_sk_min) AND DynamicValue(RS_59_item_i_item_sk_max) and in_bloom_filter(ss_item_sk, DynamicValue(RS_59_item_i_item_sk_bloom_filter))) and (ss_sold_date_sk BETWEEN DynamicValue(RS_29_d1_d_date_sk_min) AND DynamicValue(RS_29_d1_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_29_d1_d_date_sk_bloom_filter))) and (ss_store_sk BETWEEN DynamicValue(RS_73_store_s_store_sk_min) AND DynamicValue(RS_73_store_s_store_sk_max) and in_bloom_filter(ss_store_sk, DynamicValue(RS_73_store_s_store_sk_bloom_filter))) and (ss_ticket_number BETWEEN DynamicValue(RS_51_store_returns_sr_ticket_number_min) AND DynamicValue(RS_51_store_returns_sr_ticket_number_max) and in_bloom_filter(ss_ticket_number, DynamicValue(RS_51_store_returns_sr_ticket_number_bloom_filter))) and ss_customer_sk is not null and ss_item_sk is not null and ss_sold_date_sk is not null and ss_store_sk is not null and ss_ticket_number is not null)
                                                                            TableScan [TS_22] (rows=575995635 width=88)
                                                                              default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_date_sk","ss_item_sk","ss_customer_sk","ss_store_sk","ss_ticket_number","ss_quantity"]
                                                                            <-Reducer 14 [BROADCAST_EDGE] vectorized
                                                                              BROADCAST [RS_267]
                                                                                Group By Operator [GBY_265] (rows=1 width=20)
                                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                <-Reducer 10 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                  PARTITION_ONLY_SHUFFLE [RS_264]
                                                                                    Group By Operator [GBY_263] (rows=1 width=20)
                                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                      Select Operator [SEL_262] (rows=231000 width=1436)
                                                                                        Output:["_col0"]
                                                                                         Please refer to the previous Group By Operator [GBY_260]
                                                                            <-Reducer 24 [BROADCAST_EDGE] vectorized
                                                                              BROADCAST [RS_293]
                                                                                Group By Operator [GBY_291] (rows=1 width=28)
                                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=31675132)"]
                                                                                <-Reducer 23 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                  PARTITION_ONLY_SHUFFLE [RS_288]
                                                                                    Group By Operator [GBY_285] (rows=1 width=28)
                                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=31675132)"]
                                                                                      Select Operator [SEL_282] (rows=31675133 width=77)
                                                                                        Output:["_col0"]
                                                                                         Please refer to the previous Group By Operator [GBY_280]
                                                                            <-Reducer 21 [BROADCAST_EDGE] vectorized
                                                                              BROADCAST [RS_300]
                                                                                Group By Operator [GBY_299] (rows=1 width=12)
                                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                <-Map 20 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                  SHUFFLE [RS_276]
                                                                                    Group By Operator [GBY_275] (rows=1 width=12)
                                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                      Select Operator [SEL_273] (rows=18262 width=1119)
                                                                                        Output:["_col0"]
                                                                                         Please refer to the previous Select Operator [SEL_270]
                                                                            <-Reducer 25 [BROADCAST_EDGE] vectorized
                                                                              BROADCAST [RS_302]
                                                                                Group By Operator [GBY_301] (rows=1 width=28)
                                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=31675132)"]
                                                                                <-Reducer 23 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                  PARTITION_ONLY_SHUFFLE [RS_289]
                                                                                    Group By Operator [GBY_286] (rows=1 width=28)
                                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=31675132)"]
                                                                                      Select Operator [SEL_283] (rows=31675133 width=77)
                                                                                        Output:["_col0"]
                                                                                         Please refer to the previous Group By Operator [GBY_280]
                                                                            <-Reducer 26 [BROADCAST_EDGE] vectorized
                                                                              BROADCAST [RS_304]
                                                                                Group By Operator [GBY_303] (rows=1 width=28)
                                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=31675132)"]
                                                                                <-Reducer 23 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                  PARTITION_ONLY_SHUFFLE [RS_290]
                                                                                    Group By Operator [GBY_287] (rows=1 width=28)
                                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=31675132)"]
                                                                                      Select Operator [SEL_284] (rows=31675133 width=77)
                                                                                        Output:["_col0"]
                                                                                         Please refer to the previous Group By Operator [GBY_280]
                                                                            <-Reducer 30 [BROADCAST_EDGE] vectorized
                                                                              BROADCAST [RS_315]
                                                                                Group By Operator [GBY_314] (rows=1 width=20)
                                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                <-Reducer 29 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                  PARTITION_ONLY_SHUFFLE [RS_313]
                                                                                    Group By Operator [GBY_312] (rows=1 width=20)
                                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                      Select Operator [SEL_311] (rows=852 width=1910)
                                                                                        Output:["_col0"]
                                                                                         Please refer to the previous Group By Operator [GBY_309]
                        <-Reducer 3 [ONE_TO_ONE_EDGE] vectorized
                          FORWARD [RS_298]
                            PartitionCols:_col0, _col1
                            Group By Operator [GBY_297] (rows=158394413 width=135)
                              Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)","sum(VALUE._col1)"],keys:KEY._col0, KEY._col1
                            <-Reducer 2 [SIMPLE_EDGE]
                              SHUFFLE [RS_11]
                                PartitionCols:_col0, _col1
                                Group By Operator [GBY_10] (rows=316788826 width=135)
                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count()","sum(_col3)"],keys:_col1, _col2
                                  Merge Join Operator [MERGEJOIN_241] (rows=316788826 width=135)
                                    Conds:RS_296._col0=RS_250._col0(Inner),Output:["_col1","_col2","_col3"]
                                  <-Map 7 [SIMPLE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_250]
                                      PartitionCols:_col0
                                      Select Operator [SEL_249] (rows=73049 width=1119)
                                        Output:["_col0"]
                                        Filter Operator [FIL_248] (rows=73049 width=1119)
                                          predicate:((d_year) IN (1999, 2000, 2001) and d_date_sk is not null)
                                          TableScan [TS_3] (rows=73049 width=1119)
                                            default@date_dim,d3,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_year"]
                                  <-Map 1 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_296]
                                      PartitionCols:_col0
                                      Select Operator [SEL_295] (rows=287989836 width=135)
                                        Output:["_col0","_col1","_col2","_col3"]
                                        Filter Operator [FIL_294] (rows=287989836 width=135)
                                          predicate:((cs_item_sk BETWEEN DynamicValue(RS_51_store_returns_sr_item_sk_min) AND DynamicValue(RS_51_store_returns_sr_item_sk_max) and in_bloom_filter(cs_item_sk, DynamicValue(RS_51_store_returns_sr_item_sk_bloom_filter))) and (cs_item_sk BETWEEN DynamicValue(RS_59_item_i_item_sk_min) AND DynamicValue(RS_59_item_i_item_sk_max) and in_bloom_filter(cs_item_sk, DynamicValue(RS_59_item_i_item_sk_bloom_filter))) and (cs_sold_date_sk BETWEEN DynamicValue(RS_7_d3_d_date_sk_min) AND DynamicValue(RS_7_d3_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_7_d3_d_date_sk_bloom_filter))) and cs_bill_customer_sk is not null and cs_item_sk is not null and cs_sold_date_sk is not null)
                                          TableScan [TS_0] (rows=287989836 width=135)
                                            default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:NONE,Output:["cs_sold_date_sk","cs_bill_customer_sk","cs_item_sk","cs_quantity"]
                                          <-Reducer 14 [BROADCAST_EDGE] vectorized
                                            BROADCAST [RS_266]
                                               Please refer to the previous Group By Operator [GBY_265]
                                          <-Reducer 24 [BROADCAST_EDGE] vectorized
                                            BROADCAST [RS_292]
                                               Please refer to the previous Group By Operator [GBY_291]
                                          <-Reducer 8 [BROADCAST_EDGE] vectorized
                                            BROADCAST [RS_255]
                                              Group By Operator [GBY_254] (rows=1 width=12)
                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                              <-Map 7 [CUSTOM_SIMPLE_EDGE] vectorized
                                                PARTITION_ONLY_SHUFFLE [RS_253]
                                                  Group By Operator [GBY_252] (rows=1 width=12)
                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                    Select Operator [SEL_251] (rows=73049 width=1119)
                                                      Output:["_col0"]
                                                       Please refer to the previous Select Operator [SEL_249]

