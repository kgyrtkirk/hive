PREHOOK: query: explain
select 
	s_store_name,
	i_item_desc,
	sc.revenue,
	i_current_price,
	i_wholesale_cost,
	i_brand
 from store, item,
     (select ss_store_sk, avg(revenue) as ave
 	from
 	    (select  ss_store_sk, ss_item_sk, 
 		     sum(ss_sales_price) as revenue
 		from store_sales, date_dim
 		where ss_sold_date_sk = d_date_sk and d_month_seq between 1212 and 1212+11
 		group by ss_store_sk, ss_item_sk) sa
 	group by ss_store_sk) sb,
     (select  ss_store_sk, ss_item_sk, sum(ss_sales_price) as revenue
 	from store_sales, date_dim
 	where ss_sold_date_sk = d_date_sk and d_month_seq between 1212 and 1212+11
 	group by ss_store_sk, ss_item_sk) sc
 where sb.ss_store_sk = sc.ss_store_sk and 
       sc.revenue <= 0.1 * sb.ave and
       s_store_sk = sc.ss_store_sk and
       i_item_sk = sc.ss_item_sk
 order by s_store_name, i_item_desc
limit 100
PREHOOK: type: QUERY
POSTHOOK: query: explain
select 
	s_store_name,
	i_item_desc,
	sc.revenue,
	i_current_price,
	i_wholesale_cost,
	i_brand
 from store, item,
     (select ss_store_sk, avg(revenue) as ave
 	from
 	    (select  ss_store_sk, ss_item_sk, 
 		     sum(ss_sales_price) as revenue
 		from store_sales, date_dim
 		where ss_sold_date_sk = d_date_sk and d_month_seq between 1212 and 1212+11
 		group by ss_store_sk, ss_item_sk) sa
 	group by ss_store_sk) sb,
     (select  ss_store_sk, ss_item_sk, sum(ss_sales_price) as revenue
 	from store_sales, date_dim
 	where ss_sold_date_sk = d_date_sk and d_month_seq between 1212 and 1212+11
 	group by ss_store_sk, ss_item_sk) sc
 where sb.ss_store_sk = sc.ss_store_sk and 
       sc.revenue <= 0.1 * sb.ave and
       s_store_sk = sc.ss_store_sk and
       i_item_sk = sc.ss_item_sk
 order by s_store_name, i_item_desc
limit 100
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 9 (BROADCAST_EDGE)
Map 13 <- Reducer 12 (BROADCAST_EDGE), Reducer 7 (BROADCAST_EDGE)
Reducer 10 <- Map 13 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)
Reducer 11 <- Reducer 10 (SIMPLE_EDGE)
Reducer 12 <- Map 8 (CUSTOM_SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)
Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Map 14 (SIMPLE_EDGE), Reducer 11 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Map 15 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 3 (CUSTOM_SIMPLE_EDGE)
Reducer 9 <- Map 8 (CUSTOM_SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 6 vectorized
      File Output Operator [FS_170]
        Limit [LIM_169] (rows=100 width=705)
          Number of rows:100
          Select Operator [SEL_168] (rows=65392 width=704)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
          <-Reducer 5 [SIMPLE_EDGE]
            SHUFFLE [RS_48]
              Select Operator [SEL_47] (rows=65392 width=704)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                Merge Join Operator [MERGEJOIN_129] (rows=65392 width=704)
                  Conds:RS_44._col1=RS_167._col0(Inner),Output:["_col2","_col6","_col8","_col9","_col10","_col11"]
                <-Map 15 [SIMPLE_EDGE] vectorized
                  SHUFFLE [RS_167]
                    PartitionCols:_col0
                    Select Operator [SEL_166] (rows=462000 width=511)
                      Output:["_col0","_col1","_col2","_col3","_col4"]
                      Filter Operator [FIL_165] (rows=462000 width=511)
                        predicate:i_item_sk is not null
                        TableScan [TS_36] (rows=462000 width=511)
                          default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_item_desc","i_current_price","i_wholesale_cost","i_brand"]
                <-Reducer 4 [SIMPLE_EDGE]
                  SHUFFLE [RS_44]
                    PartitionCols:_col1
                    Filter Operator [FIL_43] (rows=65392 width=316)
                      predicate:(_col2 <= (0.1 * _col4))
                      Merge Join Operator [MERGEJOIN_128] (rows=196176 width=316)
                        Conds:RS_146._col0=RS_161._col0(Inner),RS_146._col0=RS_164._col0(Inner),Output:["_col1","_col2","_col4","_col6"]
                      <-Reducer 3 [SIMPLE_EDGE] vectorized
                        PARTITION_ONLY_SHUFFLE [RS_146]
                          PartitionCols:_col0
                          Group By Operator [GBY_145] (rows=184637 width=118)
                            Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1
                          <-Reducer 2 [SIMPLE_EDGE]
                            SHUFFLE [RS_11]
                              PartitionCols:_col0, _col1
                              Group By Operator [GBY_10] (rows=6093021 width=118)
                                Output:["_col0","_col1","_col2"],aggregations:["sum(_col3)"],keys:_col2, _col1
                                Merge Join Operator [MERGEJOIN_126] (rows=91197860 width=89)
                                  Conds:RS_144._col0=RS_132._col0(Inner),Output:["_col1","_col2","_col3"]
                                <-Map 8 [SIMPLE_EDGE] vectorized
                                  PARTITION_ONLY_SHUFFLE [RS_132]
                                    PartitionCols:_col0
                                    Select Operator [SEL_131] (rows=317 width=8)
                                      Output:["_col0"]
                                      Filter Operator [FIL_130] (rows=317 width=8)
                                        predicate:(d_date_sk is not null and d_month_seq BETWEEN 1212 AND 1223)
                                        TableScan [TS_3] (rows=73049 width=8)
                                          default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_month_seq"]
                                <-Map 1 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_144]
                                    PartitionCols:_col0
                                    Select Operator [SEL_143] (rows=525329897 width=118)
                                      Output:["_col0","_col1","_col2","_col3"]
                                      Filter Operator [FIL_142] (rows=525329897 width=118)
                                        predicate:((ss_sold_date_sk BETWEEN DynamicValue(RS_7_date_dim_d_date_sk_min) AND DynamicValue(RS_7_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_7_date_dim_d_date_sk_bloom_filter))) and ss_item_sk is not null and ss_sold_date_sk is not null and ss_store_sk is not null)
                                        TableScan [TS_0] (rows=575995635 width=118)
                                          default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_store_sk","ss_sales_price"]
                                        <-Reducer 9 [BROADCAST_EDGE] vectorized
                                          BROADCAST [RS_141]
                                            Group By Operator [GBY_140] (rows=1 width=12)
                                              Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                            <-Map 8 [CUSTOM_SIMPLE_EDGE] vectorized
                                              PARTITION_ONLY_SHUFFLE [RS_138]
                                                Group By Operator [GBY_136] (rows=1 width=12)
                                                  Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                  Select Operator [SEL_133] (rows=317 width=4)
                                                    Output:["_col0"]
                                                     Please refer to the previous Select Operator [SEL_131]
                      <-Map 14 [SIMPLE_EDGE] vectorized
                        SHUFFLE [RS_164]
                          PartitionCols:_col0
                          Select Operator [SEL_163] (rows=1704 width=92)
                            Output:["_col0","_col1"]
                            Filter Operator [FIL_162] (rows=1704 width=92)
                              predicate:s_store_sk is not null
                              TableScan [TS_33] (rows=1704 width=92)
                                default@store,store,Tbl:COMPLETE,Col:COMPLETE,Output:["s_store_sk","s_store_name"]
                      <-Reducer 11 [SIMPLE_EDGE] vectorized
                        SHUFFLE [RS_161]
                          PartitionCols:_col0
                          Select Operator [SEL_160] (rows=17 width=115)
                            Output:["_col0","_col1"]
                            Group By Operator [GBY_159] (rows=17 width=123)
                              Output:["_col0","_col1","_col2"],aggregations:["sum(_col2)","count(_col2)"],keys:_col1
                              Select Operator [SEL_158] (rows=184637 width=118)
                                Output:["_col1","_col2"]
                                Group By Operator [GBY_157] (rows=184637 width=118)
                                  Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1
                                <-Reducer 10 [SIMPLE_EDGE]
                                  SHUFFLE [RS_25]
                                    PartitionCols:_col0
                                    Group By Operator [GBY_24] (rows=6093021 width=118)
                                      Output:["_col0","_col1","_col2"],aggregations:["sum(_col3)"],keys:_col2, _col1
                                      Merge Join Operator [MERGEJOIN_127] (rows=91197860 width=89)
                                        Conds:RS_156._col0=RS_134._col0(Inner),Output:["_col1","_col2","_col3"]
                                      <-Map 8 [SIMPLE_EDGE] vectorized
                                        PARTITION_ONLY_SHUFFLE [RS_134]
                                          PartitionCols:_col0
                                           Please refer to the previous Select Operator [SEL_131]
                                      <-Map 13 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_156]
                                          PartitionCols:_col0
                                          Select Operator [SEL_155] (rows=525329897 width=118)
                                            Output:["_col0","_col1","_col2","_col3"]
                                            Filter Operator [FIL_154] (rows=525329897 width=118)
                                              predicate:((ss_sold_date_sk BETWEEN DynamicValue(RS_21_date_dim_d_date_sk_min) AND DynamicValue(RS_21_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_21_date_dim_d_date_sk_bloom_filter))) and (ss_store_sk BETWEEN DynamicValue(RS_39_store_sales_ss_store_sk_min) AND DynamicValue(RS_39_store_sales_ss_store_sk_max) and in_bloom_filter(ss_store_sk, DynamicValue(RS_39_store_sales_ss_store_sk_bloom_filter))) and ss_sold_date_sk is not null and ss_store_sk is not null)
                                              TableScan [TS_14] (rows=575995635 width=118)
                                                default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_store_sk","ss_sales_price"]
                                              <-Reducer 12 [BROADCAST_EDGE] vectorized
                                                BROADCAST [RS_151]
                                                  Group By Operator [GBY_150] (rows=1 width=12)
                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                  <-Map 8 [CUSTOM_SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_139]
                                                      Group By Operator [GBY_137] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                        Select Operator [SEL_135] (rows=317 width=4)
                                                          Output:["_col0"]
                                                           Please refer to the previous Select Operator [SEL_131]
                                              <-Reducer 7 [BROADCAST_EDGE] vectorized
                                                BROADCAST [RS_153]
                                                  Group By Operator [GBY_152] (rows=1 width=12)
                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                  <-Reducer 3 [CUSTOM_SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_149]
                                                      Group By Operator [GBY_148] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                        Select Operator [SEL_147] (rows=184637 width=2)
                                                          Output:["_col0"]
                                                           Please refer to the previous Group By Operator [GBY_145]

