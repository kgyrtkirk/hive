PREHOOK: query: explain
select  * from 
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1212,1212+1,1212+2,1212+3,1212+4,1212+5,1212+6,1212+7,1212+8,1212+9,1212+10,1212+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0 
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales 
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100
PREHOOK: type: QUERY
POSTHOOK: query: explain
select  * from 
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1212,1212+1,1212+2,1212+3,1212+4,1212+5,1212+6,1212+7,1212+8,1212+9,1212+10,1212+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0 
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales 
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Map 7 <- Reducer 12 (BROADCAST_EDGE), Reducer 14 (BROADCAST_EDGE), Reducer 6 (BROADCAST_EDGE)
Reducer 10 <- Reducer 9 (SIMPLE_EDGE)
Reducer 12 <- Map 11 (CUSTOM_SIMPLE_EDGE)
Reducer 14 <- Map 13 (CUSTOM_SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE)
Reducer 3 <- Reducer 10 (SIMPLE_EDGE), Reducer 2 (ONE_TO_ONE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 2 (CUSTOM_SIMPLE_EDGE)
Reducer 8 <- Map 11 (SIMPLE_EDGE), Map 7 (SIMPLE_EDGE)
Reducer 9 <- Map 13 (SIMPLE_EDGE), Reducer 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 5 vectorized
      File Output Operator [FS_132]
        Limit [LIM_131] (rows=100 width=88)
          Number of rows:100
          Select Operator [SEL_130] (rows=95831279 width=88)
            Output:["_col0","_col1","_col2"]
          <-Reducer 4 [SIMPLE_EDGE]
            SHUFFLE [RS_44]
              Select Operator [SEL_41] (rows=95831279 width=88)
                Output:["_col0","_col1","_col2"]
                Filter Operator [FIL_57] (rows=95831279 width=88)
                  predicate:CASE WHEN ((avg_window_0 > 0)) THEN (((abs((_col2 - avg_window_0)) / avg_window_0) > 0.1)) ELSE (null) END
                  Select Operator [SEL_40] (rows=191662559 width=88)
                    Output:["avg_window_0","_col0","_col2"]
                    PTF Operator [PTF_39] (rows=191662559 width=88)
                      Function definitions:[{},{"name:":"windowingtablefunction","order by:":"_col0 ASC NULLS FIRST","partition by:":"_col0"}]
                      Select Operator [SEL_36] (rows=191662559 width=88)
                        Output:["_col0","_col2"]
                        Group By Operator [GBY_35] (rows=191662559 width=88)
                          Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1
                        <-Reducer 3 [SIMPLE_EDGE]
                          SHUFFLE [RS_34]
                            PartitionCols:_col0
                            Group By Operator [GBY_33] (rows=383325119 width=88)
                              Output:["_col0","_col1","_col2"],aggregations:["sum(_col6)"],keys:_col3, _col4
                              Select Operator [SEL_31] (rows=383325119 width=88)
                                Output:["_col3","_col4","_col6"]
                                Merge Join Operator [MERGEJOIN_95] (rows=383325119 width=88)
                                  Conds:RS_101._col0=RS_127._col0(Inner),Output:["_col1","_col3","_col4","_col5"]
                                <-Reducer 2 [ONE_TO_ONE_EDGE] vectorized
                                  PARTITION_ONLY_SHUFFLE [RS_101]
                                    PartitionCols:_col0
                                    Group By Operator [GBY_100] (rows=852 width=1910)
                                      Output:["_col0","_col1"],aggregations:["count(VALUE._col0)"],keys:KEY._col0
                                    <-Map 1 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_99]
                                        PartitionCols:_col0
                                        Group By Operator [GBY_98] (rows=1704 width=1910)
                                          Output:["_col0","_col1"],aggregations:["count()"],keys:_col0
                                          Select Operator [SEL_97] (rows=1704 width=1910)
                                            Output:["_col0"]
                                            Filter Operator [FIL_96] (rows=1704 width=1910)
                                              predicate:s_store_sk is not null
                                              TableScan [TS_0] (rows=1704 width=1910)
                                                default@store,store,Tbl:COMPLETE,Col:NONE,Output:["s_store_sk"]
                                <-Reducer 10 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_127]
                                    PartitionCols:_col0
                                    Group By Operator [GBY_126] (rows=348477374 width=88)
                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                    <-Reducer 9 [SIMPLE_EDGE]
                                      SHUFFLE [RS_25]
                                        PartitionCols:_col0, _col1, _col2
                                        Group By Operator [GBY_24] (rows=696954748 width=88)
                                          Output:["_col0","_col1","_col2","_col3"],aggregations:["sum(_col3)"],keys:_col2, _col8, _col11
                                          Merge Join Operator [MERGEJOIN_94] (rows=696954748 width=88)
                                            Conds:RS_20._col0=RS_115._col0(Inner),Output:["_col2","_col3","_col8","_col11"]
                                          <-Map 13 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_115]
                                              PartitionCols:_col0
                                              Select Operator [SEL_114] (rows=73049 width=1119)
                                                Output:["_col0","_col2"]
                                                Filter Operator [FIL_113] (rows=73049 width=1119)
                                                  predicate:((d_month_seq) IN (1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223) and d_date_sk is not null)
                                                  TableScan [TS_14] (rows=73049 width=1119)
                                                    default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_month_seq","d_qoy"]
                                          <-Reducer 8 [SIMPLE_EDGE]
                                            SHUFFLE [RS_20]
                                              PartitionCols:_col0
                                              Merge Join Operator [MERGEJOIN_93] (rows=633595212 width=88)
                                                Conds:RS_125._col1=RS_107._col0(Inner),Output:["_col0","_col2","_col3","_col8"]
                                              <-Map 11 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_107]
                                                  PartitionCols:_col0
                                                  Select Operator [SEL_106] (rows=462000 width=1436)
                                                    Output:["_col0","_col4"]
                                                    Filter Operator [FIL_105] (rows=462000 width=1436)
                                                      predicate:((((i_category) IN ('Books', 'Children', 'Electronics') and (i_class) IN ('personal', 'portable', 'reference', 'self-help') and (i_brand) IN ('scholaramalgamalg #14', 'scholaramalgamalg #7', 'exportiunivamalg #9', 'scholaramalgamalg #9')) or ((i_category) IN ('Women', 'Music', 'Men') and (i_class) IN ('accessories', 'classical', 'fragrances', 'pants') and (i_brand) IN ('amalgimporto #1', 'edu packscholar #1', 'exportiimporto #1', 'importoamalg #1'))) and i_item_sk is not null)
                                                      TableScan [TS_11] (rows=462000 width=1436)
                                                        default@item,item,Tbl:COMPLETE,Col:NONE,Output:["i_item_sk","i_brand","i_class","i_category","i_manufact_id"]
                                              <-Map 7 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_125]
                                                  PartitionCols:_col1
                                                  Select Operator [SEL_124] (rows=575995635 width=88)
                                                    Output:["_col0","_col1","_col2","_col3"]
                                                    Filter Operator [FIL_123] (rows=575995635 width=88)
                                                      predicate:((ss_item_sk BETWEEN DynamicValue(RS_18_item_i_item_sk_min) AND DynamicValue(RS_18_item_i_item_sk_max) and in_bloom_filter(ss_item_sk, DynamicValue(RS_18_item_i_item_sk_bloom_filter))) and (ss_sold_date_sk BETWEEN DynamicValue(RS_21_date_dim_d_date_sk_min) AND DynamicValue(RS_21_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_21_date_dim_d_date_sk_bloom_filter))) and (ss_store_sk BETWEEN DynamicValue(RS_28_store_s_store_sk_min) AND DynamicValue(RS_28_store_s_store_sk_max) and in_bloom_filter(ss_store_sk, DynamicValue(RS_28_store_s_store_sk_bloom_filter))) and ss_item_sk is not null and ss_sold_date_sk is not null and ss_store_sk is not null)
                                                      TableScan [TS_8] (rows=575995635 width=88)
                                                        default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_date_sk","ss_item_sk","ss_store_sk","ss_sales_price"]
                                                      <-Reducer 12 [BROADCAST_EDGE] vectorized
                                                        BROADCAST [RS_112]
                                                          Group By Operator [GBY_111] (rows=1 width=12)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                          <-Map 11 [CUSTOM_SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_110]
                                                              Group By Operator [GBY_109] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                Select Operator [SEL_108] (rows=462000 width=1436)
                                                                  Output:["_col0"]
                                                                   Please refer to the previous Select Operator [SEL_106]
                                                      <-Reducer 14 [BROADCAST_EDGE] vectorized
                                                        BROADCAST [RS_120]
                                                          Group By Operator [GBY_119] (rows=1 width=12)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                          <-Map 13 [CUSTOM_SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_118]
                                                              Group By Operator [GBY_117] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                Select Operator [SEL_116] (rows=73049 width=1119)
                                                                  Output:["_col0"]
                                                                   Please refer to the previous Select Operator [SEL_114]
                                                      <-Reducer 6 [BROADCAST_EDGE] vectorized
                                                        BROADCAST [RS_122]
                                                          Group By Operator [GBY_121] (rows=1 width=16)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                          <-Reducer 2 [CUSTOM_SIMPLE_EDGE] vectorized
                                                            PARTITION_ONLY_SHUFFLE [RS_104]
                                                              Group By Operator [GBY_103] (rows=1 width=16)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                Select Operator [SEL_102] (rows=852 width=1910)
                                                                  Output:["_col0"]
                                                                   Please refer to the previous Group By Operator [GBY_100]

