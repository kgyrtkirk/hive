PREHOOK: query: explain
with customer_total_return as
 (select cr_returning_customer_sk as ctr_customer_sk
        ,ca_state as ctr_state, 
 	sum(cr_return_amt_inc_tax) as ctr_total_return
 from catalog_returns
     ,date_dim
     ,customer_address
 where cr_returned_date_sk = d_date_sk 
   and d_year =1998
   and cr_returning_addr_sk = ca_address_sk 
 group by cr_returning_customer_sk
         ,ca_state )
  select  c_customer_id,c_salutation,c_first_name,c_last_name,ca_street_number,ca_street_name
                   ,ca_street_type,ca_suite_number,ca_city,ca_county,ca_state,ca_zip,ca_country,ca_gmt_offset
                  ,ca_location_type,ctr_total_return
 from customer_total_return ctr1
     ,customer_address
     ,customer
 where ctr1.ctr_total_return > (select avg(ctr_total_return)*1.2
 			  from customer_total_return ctr2 
                  	  where ctr1.ctr_state = ctr2.ctr_state)
       and ca_address_sk = c_current_addr_sk
       and ca_state = 'IL'
       and ctr1.ctr_customer_sk = c_customer_sk
 order by c_customer_id,c_salutation,c_first_name,c_last_name,ca_street_number,ca_street_name
                   ,ca_street_type,ca_suite_number,ca_city,ca_county,ca_state,ca_zip,ca_country,ca_gmt_offset
                  ,ca_location_type,ctr_total_return
 limit 100
PREHOOK: type: QUERY
POSTHOOK: query: explain
with customer_total_return as
 (select cr_returning_customer_sk as ctr_customer_sk
        ,ca_state as ctr_state, 
 	sum(cr_return_amt_inc_tax) as ctr_total_return
 from catalog_returns
     ,date_dim
     ,customer_address
 where cr_returned_date_sk = d_date_sk 
   and d_year =1998
   and cr_returning_addr_sk = ca_address_sk 
 group by cr_returning_customer_sk
         ,ca_state )
  select  c_customer_id,c_salutation,c_first_name,c_last_name,ca_street_number,ca_street_name
                   ,ca_street_type,ca_suite_number,ca_city,ca_county,ca_state,ca_zip,ca_country,ca_gmt_offset
                  ,ca_location_type,ctr_total_return
 from customer_total_return ctr1
     ,customer_address
     ,customer
 where ctr1.ctr_total_return > (select avg(ctr_total_return)*1.2
 			  from customer_total_return ctr2 
                  	  where ctr1.ctr_state = ctr2.ctr_state)
       and ca_address_sk = c_current_addr_sk
       and ca_state = 'IL'
       and ctr1.ctr_customer_sk = c_customer_sk
 order by c_customer_id,c_salutation,c_first_name,c_last_name,ca_street_number,ca_street_name
                   ,ca_street_type,ca_suite_number,ca_city,ca_county,ca_state,ca_zip,ca_country,ca_gmt_offset
                  ,ca_location_type,ctr_total_return
 limit 100
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 10 <- Reducer 12 (SIMPLE_EDGE), Reducer 9 (SIMPLE_EDGE)
Reducer 11 <- Reducer 17 (SIMPLE_EDGE), Reducer 7 (SIMPLE_EDGE)
Reducer 12 <- Reducer 11 (SIMPLE_EDGE)
Reducer 14 <- Map 13 (SIMPLE_EDGE), Map 18 (SIMPLE_EDGE)
Reducer 15 <- Reducer 14 (SIMPLE_EDGE)
Reducer 16 <- Map 13 (SIMPLE_EDGE), Map 18 (SIMPLE_EDGE)
Reducer 17 <- Reducer 16 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 5 (SIMPLE_EDGE)
Reducer 3 <- Reducer 10 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
Reducer 7 <- Map 6 (SIMPLE_EDGE)
Reducer 8 <- Reducer 15 (SIMPLE_EDGE), Reducer 7 (SIMPLE_EDGE)
Reducer 9 <- Reducer 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 4 vectorized
      File Output Operator [FS_241]
        Select Operator [SEL_240] (rows=100 width=860)
          Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15"]
          Limit [LIM_239] (rows=100 width=860)
            Number of rows:100
            Select Operator [SEL_238] (rows=96800003 width=860)
              Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14"]
            <-Reducer 3 [SIMPLE_EDGE]
              SHUFFLE [RS_85]
                Select Operator [SEL_84] (rows=96800003 width=860)
                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14"]
                  Merge Join Operator [MERGEJOIN_200] (rows=96800003 width=860)
                    Conds:RS_81._col0=RS_82._col0(Inner),Output:["_col1","_col3","_col4","_col5","_col7","_col8","_col9","_col10","_col11","_col12","_col14","_col15","_col16","_col17","_col20"]
                  <-Reducer 10 [SIMPLE_EDGE]
                    SHUFFLE [RS_82]
                      PartitionCols:_col0
                      Select Operator [SEL_77] (rows=4033333 width=1014)
                        Output:["_col0","_col2"]
                        Filter Operator [FIL_76] (rows=4033333 width=1014)
                          predicate:(_col2 > _col3)
                          Merge Join Operator [MERGEJOIN_199] (rows=12100000 width=1014)
                            Conds:RS_229._col1=RS_237._col1(Inner),Output:["_col0","_col2","_col3"]
                          <-Reducer 12 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_237]
                              PartitionCols:_col1
                              Select Operator [SEL_236] (rows=5500000 width=1014)
                                Output:["_col0","_col1"]
                                Group By Operator [GBY_235] (rows=5500000 width=1014)
                                  Output:["_col0","_col1","_col2"],aggregations:["sum(_col2)","count(_col2)"],keys:_col0
                                  Select Operator [SEL_234] (rows=11000000 width=1014)
                                    Output:["_col0","_col2"]
                                    Group By Operator [GBY_233] (rows=11000000 width=1014)
                                      Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1
                                    <-Reducer 11 [SIMPLE_EDGE]
                                      SHUFFLE [RS_65]
                                        PartitionCols:_col0
                                        Group By Operator [GBY_64] (rows=22000000 width=1014)
                                          Output:["_col0","_col1","_col2"],aggregations:["sum(_col6)"],keys:_col1, _col3
                                          Select Operator [SEL_62] (rows=22000000 width=1014)
                                            Output:["_col1","_col3","_col6"]
                                            Merge Join Operator [MERGEJOIN_198] (rows=22000000 width=1014)
                                              Conds:RS_213._col0=RS_232._col1(Inner),Output:["_col1","_col2","_col3","_col5"]
                                            <-Reducer 7 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_213]
                                                PartitionCols:_col0
                                                Group By Operator [GBY_211] (rows=20000000 width=1014)
                                                  Output:["_col0","_col1","_col2"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1
                                                <-Map 6 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_210]
                                                    PartitionCols:_col0, _col1
                                                    Group By Operator [GBY_209] (rows=40000000 width=1014)
                                                      Output:["_col0","_col1","_col2"],aggregations:["count()"],keys:_col0, _col1
                                                      Select Operator [SEL_208] (rows=40000000 width=1014)
                                                        Output:["_col0","_col1"]
                                                        Filter Operator [FIL_207] (rows=40000000 width=1014)
                                                          predicate:(ca_address_sk is not null and ca_state is not null)
                                                          TableScan [TS_6] (rows=40000000 width=1014)
                                                            default@customer_address,customer_address,Tbl:COMPLETE,Col:NONE,Output:["ca_address_sk","ca_state"]
                                            <-Reducer 17 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_232]
                                                PartitionCols:_col1
                                                Select Operator [SEL_231] (rows=15839384 width=106)
                                                  Output:["_col0","_col1","_col2"]
                                                  Group By Operator [GBY_230] (rows=15839384 width=106)
                                                    Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1
                                                  <-Reducer 16 [SIMPLE_EDGE]
                                                    SHUFFLE [RS_56]
                                                      PartitionCols:_col0, _col1
                                                      Group By Operator [GBY_55] (rows=31678769 width=106)
                                                        Output:["_col0","_col1","_col2"],aggregations:["sum(_col3)"],keys:_col2, _col1
                                                        Merge Join Operator [MERGEJOIN_196] (rows=31678769 width=106)
                                                          Conds:RS_219._col0=RS_223._col0(Inner),Output:["_col1","_col2","_col3"]
                                                        <-Map 13 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_219]
                                                            PartitionCols:_col0
                                                            Select Operator [SEL_217] (rows=28798881 width=106)
                                                              Output:["_col0","_col1","_col2","_col3"]
                                                              Filter Operator [FIL_215] (rows=28798881 width=106)
                                                                predicate:(cr_returned_date_sk is not null and cr_returning_addr_sk is not null)
                                                                TableScan [TS_14] (rows=28798881 width=106)
                                                                  default@catalog_returns,catalog_returns,Tbl:COMPLETE,Col:NONE,Output:["cr_returned_date_sk","cr_returning_customer_sk","cr_returning_addr_sk","cr_return_amt_inc_tax"]
                                                        <-Map 18 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_223]
                                                            PartitionCols:_col0
                                                            Select Operator [SEL_221] (rows=36524 width=1119)
                                                              Output:["_col0"]
                                                              Filter Operator [FIL_220] (rows=36524 width=1119)
                                                                predicate:((d_year = 1998) and d_date_sk is not null)
                                                                TableScan [TS_17] (rows=73049 width=1119)
                                                                  default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_year"]
                          <-Reducer 9 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_229]
                              PartitionCols:_col1
                              Select Operator [SEL_228] (rows=11000000 width=1014)
                                Output:["_col0","_col1","_col2"]
                                Group By Operator [GBY_227] (rows=11000000 width=1014)
                                  Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1
                                <-Reducer 8 [SIMPLE_EDGE]
                                  SHUFFLE [RS_34]
                                    PartitionCols:_col0, _col1
                                    Group By Operator [GBY_33] (rows=22000000 width=1014)
                                      Output:["_col0","_col1","_col2"],aggregations:["sum(_col6)"],keys:_col1, _col3
                                      Select Operator [SEL_31] (rows=22000000 width=1014)
                                        Output:["_col1","_col3","_col6"]
                                        Merge Join Operator [MERGEJOIN_197] (rows=22000000 width=1014)
                                          Conds:RS_212._col0=RS_226._col1(Inner),Output:["_col1","_col2","_col3","_col5"]
                                        <-Reducer 7 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_212]
                                            PartitionCols:_col0
                                             Please refer to the previous Group By Operator [GBY_211]
                                        <-Reducer 15 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_226]
                                            PartitionCols:_col1
                                            Select Operator [SEL_225] (rows=15839384 width=106)
                                              Output:["_col0","_col1","_col2"]
                                              Group By Operator [GBY_224] (rows=15839384 width=106)
                                                Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1
                                              <-Reducer 14 [SIMPLE_EDGE]
                                                SHUFFLE [RS_25]
                                                  PartitionCols:_col0, _col1
                                                  Group By Operator [GBY_24] (rows=31678769 width=106)
                                                    Output:["_col0","_col1","_col2"],aggregations:["sum(_col3)"],keys:_col2, _col1
                                                    Merge Join Operator [MERGEJOIN_195] (rows=31678769 width=106)
                                                      Conds:RS_218._col0=RS_222._col0(Inner),Output:["_col1","_col2","_col3"]
                                                    <-Map 13 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_218]
                                                        PartitionCols:_col0
                                                        Select Operator [SEL_216] (rows=28798881 width=106)
                                                          Output:["_col0","_col1","_col2","_col3"]
                                                          Filter Operator [FIL_214] (rows=28798881 width=106)
                                                            predicate:(cr_returned_date_sk is not null and cr_returning_addr_sk is not null and cr_returning_customer_sk is not null)
                                                             Please refer to the previous TableScan [TS_14]
                                                    <-Map 18 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_222]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_221]
                  <-Reducer 2 [SIMPLE_EDGE]
                    SHUFFLE [RS_81]
                      PartitionCols:_col0
                      Merge Join Operator [MERGEJOIN_194] (rows=88000001 width=860)
                        Conds:RS_203._col2=RS_206._col0(Inner),Output:["_col0","_col1","_col3","_col4","_col5","_col7","_col8","_col9","_col10","_col11","_col12","_col14","_col15","_col16","_col17"]
                      <-Map 1 [SIMPLE_EDGE] vectorized
                        SHUFFLE [RS_203]
                          PartitionCols:_col2
                          Select Operator [SEL_202] (rows=80000000 width=860)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                            Filter Operator [FIL_201] (rows=80000000 width=860)
                              predicate:(c_current_addr_sk is not null and c_customer_sk is not null)
                              TableScan [TS_0] (rows=80000000 width=860)
                                default@customer,customer,Tbl:COMPLETE,Col:NONE,Output:["c_customer_sk","c_customer_id","c_current_addr_sk","c_salutation","c_first_name","c_last_name"]
                      <-Map 5 [SIMPLE_EDGE] vectorized
                        SHUFFLE [RS_206]
                          PartitionCols:_col0
                          Select Operator [SEL_205] (rows=20000000 width=1014)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col8","_col9","_col10","_col11"]
                            Filter Operator [FIL_204] (rows=20000000 width=1014)
                              predicate:((ca_state = 'IL') and ca_address_sk is not null)
                              TableScan [TS_3] (rows=40000000 width=1014)
                                default@customer_address,customer_address,Tbl:COMPLETE,Col:NONE,Output:["ca_address_sk","ca_street_number","ca_street_name","ca_street_type","ca_suite_number","ca_city","ca_county","ca_state","ca_zip","ca_country","ca_gmt_offset","ca_location_type"]

