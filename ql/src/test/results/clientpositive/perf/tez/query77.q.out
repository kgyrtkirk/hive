Warning: Shuffle Join MERGEJOIN[414][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 18' is a cross product
PREHOOK: query: explain
with ss as
 (select s_store_sk,
         sum(ss_ext_sales_price) as sales,
         sum(ss_net_profit) as profit
 from store_sales,
      date_dim,
      store
 where ss_sold_date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date) 
                  and (cast('1998-08-04' as date) +  30 days) 
       and ss_store_sk = s_store_sk
 group by s_store_sk)
 ,
 sr as
 (select s_store_sk,
         sum(sr_return_amt) as returns,
         sum(sr_net_loss) as profit_loss
 from store_returns,
      date_dim,
      store
 where sr_returned_date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date)
                  and (cast('1998-08-04' as date) +  30 days)
       and sr_store_sk = s_store_sk
 group by s_store_sk), 
 cs as
 (select cs_call_center_sk,
        sum(cs_ext_sales_price) as sales,
        sum(cs_net_profit) as profit
 from catalog_sales,
      date_dim
 where cs_sold_date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date)
                  and (cast('1998-08-04' as date) +  30 days)
 group by cs_call_center_sk 
 ), 
 cr as
 (select
        sum(cr_return_amount) as returns,
        sum(cr_net_loss) as profit_loss
 from catalog_returns,
      date_dim
 where cr_returned_date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date)
                  and (cast('1998-08-04' as date) +  30 days)
 ), 
 ws as
 ( select wp_web_page_sk,
        sum(ws_ext_sales_price) as sales,
        sum(ws_net_profit) as profit
 from web_sales,
      date_dim,
      web_page
 where ws_sold_date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date)
                  and (cast('1998-08-04' as date) +  30 days)
       and ws_web_page_sk = wp_web_page_sk
 group by wp_web_page_sk), 
 wr as
 (select wp_web_page_sk,
        sum(wr_return_amt) as returns,
        sum(wr_net_loss) as profit_loss
 from web_returns,
      date_dim,
      web_page
 where wr_returned_date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date)
                  and (cast('1998-08-04' as date) +  30 days)
       and wr_web_page_sk = wp_web_page_sk
 group by wp_web_page_sk)
  select  channel
        , id
        , sum(sales) as sales
        , sum(returns) as returns
        , sum(profit) as profit
 from 
 (select 'store channel' as channel
        , ss.s_store_sk as id
        , sales
        , coalesce(returns, 0) as returns
        , (profit - coalesce(profit_loss,0)) as profit
 from   ss left join sr
        on  ss.s_store_sk = sr.s_store_sk
 union all
 select 'catalog channel' as channel
        , cs_call_center_sk as id
        , sales
        , returns
        , (profit - profit_loss) as profit
 from  cs
       , cr
 union all
 select 'web channel' as channel
        , ws.wp_web_page_sk as id
        , sales
        , coalesce(returns, 0) returns
        , (profit - coalesce(profit_loss,0)) as profit
 from   ws left join wr
        on  ws.wp_web_page_sk = wr.wp_web_page_sk
 ) x
 group by rollup (channel, id)
 order by channel
         ,id
 limit 100
PREHOOK: type: QUERY
POSTHOOK: query: explain
with ss as
 (select s_store_sk,
         sum(ss_ext_sales_price) as sales,
         sum(ss_net_profit) as profit
 from store_sales,
      date_dim,
      store
 where ss_sold_date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date) 
                  and (cast('1998-08-04' as date) +  30 days) 
       and ss_store_sk = s_store_sk
 group by s_store_sk)
 ,
 sr as
 (select s_store_sk,
         sum(sr_return_amt) as returns,
         sum(sr_net_loss) as profit_loss
 from store_returns,
      date_dim,
      store
 where sr_returned_date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date)
                  and (cast('1998-08-04' as date) +  30 days)
       and sr_store_sk = s_store_sk
 group by s_store_sk), 
 cs as
 (select cs_call_center_sk,
        sum(cs_ext_sales_price) as sales,
        sum(cs_net_profit) as profit
 from catalog_sales,
      date_dim
 where cs_sold_date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date)
                  and (cast('1998-08-04' as date) +  30 days)
 group by cs_call_center_sk 
 ), 
 cr as
 (select
        sum(cr_return_amount) as returns,
        sum(cr_net_loss) as profit_loss
 from catalog_returns,
      date_dim
 where cr_returned_date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date)
                  and (cast('1998-08-04' as date) +  30 days)
 ), 
 ws as
 ( select wp_web_page_sk,
        sum(ws_ext_sales_price) as sales,
        sum(ws_net_profit) as profit
 from web_sales,
      date_dim,
      web_page
 where ws_sold_date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date)
                  and (cast('1998-08-04' as date) +  30 days)
       and ws_web_page_sk = wp_web_page_sk
 group by wp_web_page_sk), 
 wr as
 (select wp_web_page_sk,
        sum(wr_return_amt) as returns,
        sum(wr_net_loss) as profit_loss
 from web_returns,
      date_dim,
      web_page
 where wr_returned_date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date)
                  and (cast('1998-08-04' as date) +  30 days)
       and wr_web_page_sk = wp_web_page_sk
 group by wp_web_page_sk)
  select  channel
        , id
        , sum(sales) as sales
        , sum(returns) as returns
        , sum(profit) as profit
 from 
 (select 'store channel' as channel
        , ss.s_store_sk as id
        , sales
        , coalesce(returns, 0) as returns
        , (profit - coalesce(profit_loss,0)) as profit
 from   ss left join sr
        on  ss.s_store_sk = sr.s_store_sk
 union all
 select 'catalog channel' as channel
        , cs_call_center_sk as id
        , sales
        , returns
        , (profit - profit_loss) as profit
 from  cs
       , cr
 union all
 select 'web channel' as channel
        , ws.wp_web_page_sk as id
        , sales
        , coalesce(returns, 0) returns
        , (profit - coalesce(profit_loss,0)) as profit
 from   ws left join wr
        on  ws.wp_web_page_sk = wr.wp_web_page_sk
 ) x
 group by rollup (channel, id)
 order by channel
         ,id
 limit 100
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 12 (BROADCAST_EDGE), Reducer 31 (BROADCAST_EDGE)
Map 34 <- Reducer 19 (BROADCAST_EDGE)
Map 42 <- Reducer 24 (BROADCAST_EDGE), Reducer 41 (BROADCAST_EDGE)
Reducer 11 <- Map 10 (SIMPLE_EDGE)
Reducer 12 <- Reducer 11 (CUSTOM_SIMPLE_EDGE)
Reducer 13 <- Reducer 11 (ONE_TO_ONE_EDGE), Reducer 33 (SIMPLE_EDGE)
Reducer 14 <- Reducer 13 (SIMPLE_EDGE)
Reducer 15 <- Reducer 14 (ONE_TO_ONE_EDGE), Reducer 30 (ONE_TO_ONE_EDGE)
Reducer 16 <- Reducer 11 (ONE_TO_ONE_EDGE), Reducer 35 (SIMPLE_EDGE)
Reducer 17 <- Reducer 16 (SIMPLE_EDGE)
Reducer 18 <- Reducer 17 (CUSTOM_SIMPLE_EDGE), Reducer 38 (CUSTOM_SIMPLE_EDGE), Union 7 (CONTAINS)
Reducer 19 <- Reducer 11 (CUSTOM_SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE)
Reducer 20 <- Reducer 11 (ONE_TO_ONE_EDGE), Reducer 43 (SIMPLE_EDGE)
Reducer 21 <- Reducer 20 (SIMPLE_EDGE)
Reducer 22 <- Reducer 21 (ONE_TO_ONE_EDGE), Reducer 40 (ONE_TO_ONE_EDGE)
Reducer 23 <- Reducer 22 (ONE_TO_ONE_EDGE), Reducer 27 (ONE_TO_ONE_EDGE), Union 7 (CONTAINS)
Reducer 24 <- Reducer 11 (CUSTOM_SIMPLE_EDGE)
Reducer 25 <- Reducer 11 (ONE_TO_ONE_EDGE), Reducer 45 (SIMPLE_EDGE)
Reducer 26 <- Reducer 25 (SIMPLE_EDGE)
Reducer 27 <- Reducer 26 (ONE_TO_ONE_EDGE), Reducer 40 (ONE_TO_ONE_EDGE)
Reducer 3 <- Reducer 11 (ONE_TO_ONE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 30 <- Map 29 (SIMPLE_EDGE)
Reducer 31 <- Reducer 30 (CUSTOM_SIMPLE_EDGE)
Reducer 33 <- Map 32 (SIMPLE_EDGE)
Reducer 35 <- Map 34 (SIMPLE_EDGE)
Reducer 37 <- Map 10 (SIMPLE_EDGE), Map 36 (SIMPLE_EDGE)
Reducer 38 <- Reducer 37 (CUSTOM_SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
Reducer 40 <- Map 39 (SIMPLE_EDGE)
Reducer 41 <- Reducer 40 (CUSTOM_SIMPLE_EDGE)
Reducer 43 <- Map 42 (SIMPLE_EDGE)
Reducer 45 <- Map 44 (SIMPLE_EDGE)
Reducer 5 <- Reducer 30 (ONE_TO_ONE_EDGE), Reducer 4 (ONE_TO_ONE_EDGE)
Reducer 6 <- Reducer 15 (ONE_TO_ONE_EDGE), Reducer 5 (ONE_TO_ONE_EDGE), Union 7 (CONTAINS)
Reducer 8 <- Union 7 (SIMPLE_EDGE)
Reducer 9 <- Reducer 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 9 vectorized
      File Output Operator [FS_481]
        Limit [LIM_480] (rows=100 width=163)
          Number of rows:100
          Select Operator [SEL_479] (rows=478164978 width=163)
            Output:["_col0","_col1","_col2","_col3","_col4"]
          <-Reducer 8 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_478]
              Select Operator [SEL_477] (rows=478164978 width=163)
                Output:["_col0","_col1","_col2","_col3","_col4"]
                Group By Operator [GBY_476] (rows=478164978 width=163)
                  Output:["_col0","_col1","_col3","_col4","_col5"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)"],keys:KEY._col0, KEY._col1, KEY._col2
                <-Union 7 [SIMPLE_EDGE]
                  <-Reducer 18 [CONTAINS]
                    Reduce Output Operator [RS_419]
                      PartitionCols:_col0, _col1, _col2
                      Group By Operator [GBY_418] (rows=956329956 width=163)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(_col2)","sum(_col3)","sum(_col4)"],keys:_col0, _col1, 0L
                        Top N Key Operator [TNK_417] (rows=318776652 width=163)
                          keys:_col0, _col1, 0L,sort order:+++,top n:100
                          Select Operator [SEL_415] (rows=79197206 width=360)
                            Output:["_col0","_col1","_col2","_col3","_col4"]
                            Merge Join Operator [MERGEJOIN_414] (rows=79197206 width=360)
                              Conds:(Inner),Output:["_col0","_col1","_col2","_col3","_col4"]
                            <-Reducer 17 [CUSTOM_SIMPLE_EDGE] vectorized
                              PARTITION_ONLY_SHUFFLE [RS_491]
                                Group By Operator [GBY_490] (rows=79197206 width=135)
                                  Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)"],keys:KEY._col0
                                <-Reducer 16 [SIMPLE_EDGE]
                                  SHUFFLE [RS_102]
                                    PartitionCols:_col0
                                    Group By Operator [GBY_101] (rows=158394413 width=135)
                                      Output:["_col0","_col1","_col2"],aggregations:["sum(_col6)","sum(_col7)"],keys:_col1
                                      Select Operator [SEL_99] (rows=158394413 width=135)
                                        Output:["_col1","_col6","_col7"]
                                        Merge Join Operator [MERGEJOIN_398] (rows=158394413 width=135)
                                          Conds:RS_489._col0=RS_435._col0(Inner),Output:["_col1","_col2","_col3","_col5"]
                                        <-Reducer 11 [ONE_TO_ONE_EDGE] vectorized
                                          FORWARD [RS_435]
                                            PartitionCols:_col0
                                            Group By Operator [GBY_431] (rows=4058 width=1119)
                                              Output:["_col0","_col1"],aggregations:["count(VALUE._col0)"],keys:KEY._col0
                                            <-Map 10 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_429]
                                                PartitionCols:_col0
                                                Group By Operator [GBY_428] (rows=8116 width=1119)
                                                  Output:["_col0","_col1"],aggregations:["count()"],keys:_col0
                                                  Select Operator [SEL_427] (rows=8116 width=1119)
                                                    Output:["_col0"]
                                                    Filter Operator [FIL_426] (rows=8116 width=1119)
                                                      predicate:(CAST( d_date AS TIMESTAMP) BETWEEN TIMESTAMP'1998-08-04 00:00:00' AND TIMESTAMP'1998-09-03 00:00:00' and d_date_sk is not null)
                                                      TableScan [TS_8] (rows=73049 width=1119)
                                                        default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_date"]
                                        <-Reducer 35 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_489]
                                            PartitionCols:_col0
                                            Group By Operator [GBY_488] (rows=143994918 width=135)
                                              Output:["_col0","_col1","_col2","_col3"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)"],keys:KEY._col0, KEY._col1
                                            <-Map 34 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_487]
                                                PartitionCols:_col0, _col1
                                                Group By Operator [GBY_486] (rows=287989836 width=135)
                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["sum(_col2)","sum(_col3)"],keys:_col0, _col1
                                                  Select Operator [SEL_485] (rows=287989836 width=135)
                                                    Output:["_col0","_col1","_col2","_col3"]
                                                    Filter Operator [FIL_484] (rows=287989836 width=135)
                                                      predicate:((cs_sold_date_sk BETWEEN DynamicValue(RS_97_date_dim_d_date_sk_min) AND DynamicValue(RS_97_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_97_date_dim_d_date_sk_bloom_filter))) and cs_sold_date_sk is not null)
                                                      TableScan [TS_80] (rows=287989836 width=135)
                                                        default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:NONE,Output:["cs_sold_date_sk","cs_call_center_sk","cs_ext_sales_price","cs_net_profit"]
                                                      <-Reducer 19 [BROADCAST_EDGE] vectorized
                                                        BROADCAST [RS_483]
                                                          Group By Operator [GBY_482] (rows=1 width=16)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                          <-Reducer 11 [CUSTOM_SIMPLE_EDGE] vectorized
                                                            FORWARD [RS_444]
                                                              Group By Operator [GBY_441] (rows=1 width=16)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                Select Operator [SEL_436] (rows=4058 width=1119)
                                                                  Output:["_col0"]
                                                                   Please refer to the previous Group By Operator [GBY_431]
                            <-Reducer 38 [CUSTOM_SIMPLE_EDGE] vectorized
                              PARTITION_ONLY_SHUFFLE [RS_497]
                                Group By Operator [GBY_496] (rows=1 width=224)
                                  Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)"]
                                <-Reducer 37 [CUSTOM_SIMPLE_EDGE]
                                  PARTITION_ONLY_SHUFFLE [RS_127]
                                    Group By Operator [GBY_126] (rows=1 width=224)
                                      Output:["_col0","_col1"],aggregations:["sum(_col5)","sum(_col6)"]
                                      Select Operator [SEL_124] (rows=15839384 width=106)
                                        Output:["_col5","_col6"]
                                        Merge Join Operator [MERGEJOIN_399] (rows=15839384 width=106)
                                          Conds:GBY_111._col0=GBY_119._col0(Inner),Output:["_col1","_col2","_col4"]
                                        <-Group By Operator [GBY_119] (rows=4058 width=1119)
                                            Output:["_col0","_col1"],aggregations:["count(VALUE._col0)"],keys:KEY._col0
                                        <-Group By Operator [GBY_111] (rows=14399440 width=106)
                                            Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)"],keys:KEY._col0
                                          <-Map 10 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_430]
                                              PartitionCols:_col0
                                               Please refer to the previous Group By Operator [GBY_428]
                                          <-Map 36 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_495]
                                              PartitionCols:_col0
                                              Group By Operator [GBY_494] (rows=28798881 width=106)
                                                Output:["_col0","_col1","_col2"],aggregations:["sum(_col1)","sum(_col2)"],keys:_col0
                                                Select Operator [SEL_493] (rows=28798881 width=106)
                                                  Output:["_col0","_col1","_col2"]
                                                  Filter Operator [FIL_492] (rows=28798881 width=106)
                                                    predicate:cr_returned_date_sk is not null
                                                    TableScan [TS_105] (rows=28798881 width=106)
                                                      default@catalog_returns,catalog_returns,Tbl:COMPLETE,Col:NONE,Output:["cr_returned_date_sk","cr_return_amount","cr_net_loss"]
                  <-Reducer 23 [CONTAINS]
                    Reduce Output Operator [RS_425]
                      PartitionCols:_col0, _col1, _col2
                      Group By Operator [GBY_424] (rows=956329956 width=163)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(_col2)","sum(_col3)","sum(_col4)"],keys:_col0, _col1, 0L
                        Top N Key Operator [TNK_423] (rows=318776652 width=163)
                          keys:_col0, _col1, 0L,sort order:+++,top n:100
                          Select Operator [SEL_421] (rows=47916889 width=135)
                            Output:["_col0","_col1","_col2","_col3","_col4"]
                            Merge Join Operator [MERGEJOIN_420] (rows=47916889 width=135)
                              Conds:RS_212._col0=RS_213._col0(Left Outer),Output:["_col0","_col1","_col2","_col4","_col5"]
                            <-Reducer 22 [ONE_TO_ONE_EDGE]
                              FORWARD [RS_212]
                                PartitionCols:_col0
                                Select Operator [SEL_172] (rows=43560808 width=135)
                                  Output:["_col0","_col1","_col2"]
                                  Merge Join Operator [MERGEJOIN_402] (rows=43560808 width=135)
                                    Conds:RS_505._col0=RS_519._col0(Inner),Output:["_col0","_col1","_col3","_col4"]
                                  <-Reducer 40 [ONE_TO_ONE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_505]
                                      PartitionCols:_col0
                                      Group By Operator [GBY_504] (rows=2301 width=585)
                                        Output:["_col0","_col1"],aggregations:["count(VALUE._col0)"],keys:KEY._col0
                                      <-Map 39 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_503]
                                          PartitionCols:_col0
                                          Group By Operator [GBY_502] (rows=4602 width=585)
                                            Output:["_col0","_col1"],aggregations:["count()"],keys:_col0
                                            Select Operator [SEL_501] (rows=4602 width=585)
                                              Output:["_col0"]
                                              Filter Operator [FIL_500] (rows=4602 width=585)
                                                predicate:wp_web_page_sk is not null
                                                TableScan [TS_136] (rows=4602 width=585)
                                                  default@web_page,web_page,Tbl:COMPLETE,Col:NONE,Output:["wp_web_page_sk"]
                                  <-Reducer 21 [ONE_TO_ONE_EDGE] vectorized
                                    FORWARD [RS_519]
                                      PartitionCols:_col0
                                      Group By Operator [GBY_518] (rows=39600734 width=135)
                                        Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)"],keys:KEY._col0
                                      <-Reducer 20 [SIMPLE_EDGE]
                                        SHUFFLE [RS_166]
                                          PartitionCols:_col0
                                          Group By Operator [GBY_165] (rows=79201469 width=135)
                                            Output:["_col0","_col1","_col2"],aggregations:["sum(_col6)","sum(_col7)"],keys:_col1
                                            Select Operator [SEL_163] (rows=79201469 width=135)
                                              Output:["_col1","_col6","_col7"]
                                              Merge Join Operator [MERGEJOIN_401] (rows=79201469 width=135)
                                                Conds:RS_517._col0=RS_437._col0(Inner),Output:["_col1","_col2","_col3","_col5"]
                                              <-Reducer 11 [ONE_TO_ONE_EDGE] vectorized
                                                FORWARD [RS_437]
                                                  PartitionCols:_col0
                                                   Please refer to the previous Group By Operator [GBY_431]
                                              <-Reducer 43 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_517]
                                                  PartitionCols:_col0
                                                  Group By Operator [GBY_516] (rows=72001334 width=135)
                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)"],keys:KEY._col0, KEY._col1
                                                  <-Map 42 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_515]
                                                      PartitionCols:_col0, _col1
                                                      Group By Operator [GBY_514] (rows=144002668 width=135)
                                                        Output:["_col0","_col1","_col2","_col3"],aggregations:["sum(_col2)","sum(_col3)"],keys:_col0, _col1
                                                        Select Operator [SEL_513] (rows=144002668 width=135)
                                                          Output:["_col0","_col1","_col2","_col3"]
                                                          Filter Operator [FIL_512] (rows=144002668 width=135)
                                                            predicate:((ws_sold_date_sk BETWEEN DynamicValue(RS_161_date_dim_d_date_sk_min) AND DynamicValue(RS_161_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_161_date_dim_d_date_sk_bloom_filter))) and (ws_web_page_sk BETWEEN DynamicValue(RS_169_web_page_wp_web_page_sk_min) AND DynamicValue(RS_169_web_page_wp_web_page_sk_max) and in_bloom_filter(ws_web_page_sk, DynamicValue(RS_169_web_page_wp_web_page_sk_bloom_filter))) and ws_sold_date_sk is not null and ws_web_page_sk is not null)
                                                            TableScan [TS_144] (rows=144002668 width=135)
                                                              default@web_sales,web_sales,Tbl:COMPLETE,Col:NONE,Output:["ws_sold_date_sk","ws_web_page_sk","ws_ext_sales_price","ws_net_profit"]
                                                            <-Reducer 24 [BROADCAST_EDGE] vectorized
                                                              BROADCAST [RS_499]
                                                                Group By Operator [GBY_498] (rows=1 width=16)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                <-Reducer 11 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                  FORWARD [RS_445]
                                                                    Group By Operator [GBY_442] (rows=1 width=16)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                      Select Operator [SEL_438] (rows=4058 width=1119)
                                                                        Output:["_col0"]
                                                                         Please refer to the previous Group By Operator [GBY_431]
                                                            <-Reducer 41 [BROADCAST_EDGE] vectorized
                                                              BROADCAST [RS_511]
                                                                Group By Operator [GBY_510] (rows=1 width=16)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                <-Reducer 40 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                  PARTITION_ONLY_SHUFFLE [RS_509]
                                                                    Group By Operator [GBY_508] (rows=1 width=16)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                      Select Operator [SEL_506] (rows=2301 width=585)
                                                                        Output:["_col0"]
                                                                         Please refer to the previous Group By Operator [GBY_504]
                            <-Reducer 27 [ONE_TO_ONE_EDGE]
                              FORWARD [RS_213]
                                PartitionCols:_col0
                                Select Operator [SEL_210] (rows=4355535 width=92)
                                  Output:["_col0","_col1","_col2"]
                                  Merge Join Operator [MERGEJOIN_404] (rows=4355535 width=92)
                                    Conds:RS_507._col0=RS_527._col0(Inner),Output:["_col0","_col1","_col3","_col4"]
                                  <-Reducer 40 [ONE_TO_ONE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_507]
                                      PartitionCols:_col0
                                       Please refer to the previous Group By Operator [GBY_504]
                                  <-Reducer 26 [ONE_TO_ONE_EDGE] vectorized
                                    FORWARD [RS_527]
                                      PartitionCols:_col0
                                      Group By Operator [GBY_526] (rows=3959578 width=92)
                                        Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)"],keys:KEY._col0
                                      <-Reducer 25 [SIMPLE_EDGE]
                                        SHUFFLE [RS_204]
                                          PartitionCols:_col0
                                          Group By Operator [GBY_203] (rows=7919156 width=92)
                                            Output:["_col0","_col1","_col2"],aggregations:["sum(_col6)","sum(_col7)"],keys:_col1
                                            Select Operator [SEL_201] (rows=7919156 width=92)
                                              Output:["_col1","_col6","_col7"]
                                              Merge Join Operator [MERGEJOIN_403] (rows=7919156 width=92)
                                                Conds:RS_525._col0=RS_439._col0(Inner),Output:["_col1","_col2","_col3","_col5"]
                                              <-Reducer 11 [ONE_TO_ONE_EDGE] vectorized
                                                FORWARD [RS_439]
                                                  PartitionCols:_col0
                                                   Please refer to the previous Group By Operator [GBY_431]
                                              <-Reducer 45 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_525]
                                                  PartitionCols:_col0
                                                  Group By Operator [GBY_524] (rows=7199233 width=92)
                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)"],keys:KEY._col0, KEY._col1
                                                  <-Map 44 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_523]
                                                      PartitionCols:_col0, _col1
                                                      Group By Operator [GBY_522] (rows=14398467 width=92)
                                                        Output:["_col0","_col1","_col2","_col3"],aggregations:["sum(_col2)","sum(_col3)"],keys:_col0, _col1
                                                        Select Operator [SEL_521] (rows=14398467 width=92)
                                                          Output:["_col0","_col1","_col2","_col3"]
                                                          Filter Operator [FIL_520] (rows=14398467 width=92)
                                                            predicate:(wr_returned_date_sk is not null and wr_web_page_sk is not null)
                                                            TableScan [TS_182] (rows=14398467 width=92)
                                                              default@web_returns,web_returns,Tbl:COMPLETE,Col:NONE,Output:["wr_returned_date_sk","wr_web_page_sk","wr_return_amt","wr_net_loss"]
                  <-Reducer 6 [CONTAINS]
                    Reduce Output Operator [RS_413]
                      PartitionCols:_col0, _col1, _col2
                      Group By Operator [GBY_412] (rows=956329956 width=163)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(_col2)","sum(_col3)","sum(_col4)"],keys:_col0, _col1, 0L
                        Top N Key Operator [TNK_411] (rows=318776652 width=163)
                          keys:_col0, _col1, 0L,sort order:+++,top n:100
                          Select Operator [SEL_409] (rows=191662557 width=88)
                            Output:["_col0","_col1","_col2","_col3","_col4"]
                            Merge Join Operator [MERGEJOIN_408] (rows=191662557 width=88)
                              Conds:RS_76._col0=RS_77._col0(Left Outer),Output:["_col0","_col1","_col2","_col4","_col5"]
                            <-Reducer 15 [ONE_TO_ONE_EDGE]
                              FORWARD [RS_77]
                                PartitionCols:_col0
                                Select Operator [SEL_74] (rows=17421322 width=77)
                                  Output:["_col0","_col1","_col2"]
                                  Merge Join Operator [MERGEJOIN_397] (rows=17421322 width=77)
                                    Conds:RS_455._col0=RS_475._col0(Inner),Output:["_col0","_col1","_col3","_col4"]
                                  <-Reducer 30 [ONE_TO_ONE_EDGE] vectorized
                                    FORWARD [RS_455]
                                      PartitionCols:_col0
                                      Group By Operator [GBY_452] (rows=852 width=1910)
                                        Output:["_col0","_col1"],aggregations:["count(VALUE._col0)"],keys:KEY._col0
                                      <-Map 29 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_451]
                                          PartitionCols:_col0
                                          Group By Operator [GBY_450] (rows=1704 width=1910)
                                            Output:["_col0","_col1"],aggregations:["count()"],keys:_col0
                                            Select Operator [SEL_449] (rows=1704 width=1910)
                                              Output:["_col0"]
                                              Filter Operator [FIL_448] (rows=1704 width=1910)
                                                predicate:s_store_sk is not null
                                                TableScan [TS_25] (rows=1704 width=1910)
                                                  default@store,store,Tbl:COMPLETE,Col:NONE,Output:["s_store_sk"]
                                  <-Reducer 14 [ONE_TO_ONE_EDGE] vectorized
                                    FORWARD [RS_475]
                                      PartitionCols:_col0
                                      Group By Operator [GBY_474] (rows=15837566 width=77)
                                        Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)"],keys:KEY._col0
                                      <-Reducer 13 [SIMPLE_EDGE]
                                        SHUFFLE [RS_68]
                                          PartitionCols:_col0
                                          Group By Operator [GBY_67] (rows=31675133 width=77)
                                            Output:["_col0","_col1","_col2"],aggregations:["sum(_col6)","sum(_col7)"],keys:_col1
                                            Select Operator [SEL_65] (rows=31675133 width=77)
                                              Output:["_col1","_col6","_col7"]
                                              Merge Join Operator [MERGEJOIN_396] (rows=31675133 width=77)
                                                Conds:RS_473._col0=RS_434._col0(Inner),Output:["_col1","_col2","_col3","_col5"]
                                              <-Reducer 11 [ONE_TO_ONE_EDGE] vectorized
                                                FORWARD [RS_434]
                                                  PartitionCols:_col0
                                                   Please refer to the previous Group By Operator [GBY_431]
                                              <-Reducer 33 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_473]
                                                  PartitionCols:_col0
                                                  Group By Operator [GBY_472] (rows=28795575 width=77)
                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)"],keys:KEY._col0, KEY._col1
                                                  <-Map 32 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_471]
                                                      PartitionCols:_col0, _col1
                                                      Group By Operator [GBY_470] (rows=57591150 width=77)
                                                        Output:["_col0","_col1","_col2","_col3"],aggregations:["sum(_col2)","sum(_col3)"],keys:_col0, _col1
                                                        Select Operator [SEL_469] (rows=57591150 width=77)
                                                          Output:["_col0","_col1","_col2","_col3"]
                                                          Filter Operator [FIL_468] (rows=57591150 width=77)
                                                            predicate:(sr_returned_date_sk is not null and sr_store_sk is not null)
                                                            TableScan [TS_46] (rows=57591150 width=77)
                                                              default@store_returns,store_returns,Tbl:COMPLETE,Col:NONE,Output:["sr_returned_date_sk","sr_store_sk","sr_return_amt","sr_net_loss"]
                            <-Reducer 5 [ONE_TO_ONE_EDGE]
                              FORWARD [RS_76]
                                PartitionCols:_col0
                                Select Operator [SEL_36] (rows=174238685 width=88)
                                  Output:["_col0","_col1","_col2"]
                                  Merge Join Operator [MERGEJOIN_395] (rows=174238685 width=88)
                                    Conds:RS_467._col0=RS_453._col0(Inner),Output:["_col1","_col2","_col3","_col4"]
                                  <-Reducer 30 [ONE_TO_ONE_EDGE] vectorized
                                    FORWARD [RS_453]
                                      PartitionCols:_col0
                                       Please refer to the previous Group By Operator [GBY_452]
                                  <-Reducer 4 [ONE_TO_ONE_EDGE] vectorized
                                    FORWARD [RS_467]
                                      PartitionCols:_col0
                                      Group By Operator [GBY_466] (rows=158398802 width=88)
                                        Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)"],keys:KEY._col0
                                      <-Reducer 3 [SIMPLE_EDGE]
                                        SHUFFLE [RS_22]
                                          PartitionCols:_col0
                                          Group By Operator [GBY_21] (rows=316797605 width=88)
                                            Output:["_col0","_col1","_col2"],aggregations:["sum(_col6)","sum(_col7)"],keys:_col1
                                            Select Operator [SEL_19] (rows=316797605 width=88)
                                              Output:["_col1","_col6","_col7"]
                                              Merge Join Operator [MERGEJOIN_394] (rows=316797605 width=88)
                                                Conds:RS_465._col0=RS_432._col0(Inner),Output:["_col1","_col2","_col3","_col5"]
                                              <-Reducer 11 [ONE_TO_ONE_EDGE] vectorized
                                                FORWARD [RS_432]
                                                  PartitionCols:_col0
                                                   Please refer to the previous Group By Operator [GBY_431]
                                              <-Reducer 2 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_465]
                                                  PartitionCols:_col0
                                                  Group By Operator [GBY_464] (rows=287997817 width=88)
                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)"],keys:KEY._col0, KEY._col1
                                                  <-Map 1 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_463]
                                                      PartitionCols:_col0, _col1
                                                      Group By Operator [GBY_462] (rows=575995635 width=88)
                                                        Output:["_col0","_col1","_col2","_col3"],aggregations:["sum(_col2)","sum(_col3)"],keys:_col0, _col1
                                                        Select Operator [SEL_461] (rows=575995635 width=88)
                                                          Output:["_col0","_col1","_col2","_col3"]
                                                          Filter Operator [FIL_460] (rows=575995635 width=88)
                                                            predicate:((ss_sold_date_sk BETWEEN DynamicValue(RS_17_date_dim_d_date_sk_min) AND DynamicValue(RS_17_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_17_date_dim_d_date_sk_bloom_filter))) and (ss_store_sk BETWEEN DynamicValue(RS_34_store_s_store_sk_min) AND DynamicValue(RS_34_store_s_store_sk_max) and in_bloom_filter(ss_store_sk, DynamicValue(RS_34_store_s_store_sk_bloom_filter))) and ss_sold_date_sk is not null and ss_store_sk is not null)
                                                            TableScan [TS_0] (rows=575995635 width=88)
                                                              default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_date_sk","ss_store_sk","ss_ext_sales_price","ss_net_profit"]
                                                            <-Reducer 12 [BROADCAST_EDGE] vectorized
                                                              BROADCAST [RS_447]
                                                                Group By Operator [GBY_446] (rows=1 width=16)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                <-Reducer 11 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                  FORWARD [RS_443]
                                                                    Group By Operator [GBY_440] (rows=1 width=16)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                      Select Operator [SEL_433] (rows=4058 width=1119)
                                                                        Output:["_col0"]
                                                                         Please refer to the previous Group By Operator [GBY_431]
                                                            <-Reducer 31 [BROADCAST_EDGE] vectorized
                                                              BROADCAST [RS_459]
                                                                Group By Operator [GBY_458] (rows=1 width=16)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                <-Reducer 30 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                  FORWARD [RS_457]
                                                                    Group By Operator [GBY_456] (rows=1 width=16)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                      Select Operator [SEL_454] (rows=852 width=1910)
                                                                        Output:["_col0"]
                                                                         Please refer to the previous Group By Operator [GBY_452]

