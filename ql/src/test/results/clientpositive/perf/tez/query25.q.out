PREHOOK: query: explain
select  
 i_item_id
 ,i_item_desc
 ,s_store_id
 ,s_store_name
 ,sum(ss_net_profit) as store_sales_profit
 ,sum(sr_net_loss) as store_returns_loss
 ,sum(cs_net_profit) as catalog_sales_profit
 from
 store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where
 d1.d_moy = 4
 and d1.d_year = 2000
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_moy               between 4 and  10
 and d2.d_year              = 2000
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_moy               between 4 and  10 
 and d3.d_year              = 2000
 group by
 i_item_id
 ,i_item_desc
 ,s_store_id
 ,s_store_name
 order by
 i_item_id
 ,i_item_desc
 ,s_store_id
 ,s_store_name
 limit 100
PREHOOK: type: QUERY
POSTHOOK: query: explain
select  
 i_item_id
 ,i_item_desc
 ,s_store_id
 ,s_store_name
 ,sum(ss_net_profit) as store_sales_profit
 ,sum(sr_net_loss) as store_returns_loss
 ,sum(cs_net_profit) as catalog_sales_profit
 from
 store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where
 d1.d_moy = 4
 and d1.d_year = 2000
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_moy               between 4 and  10
 and d2.d_year              = 2000
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_moy               between 4 and  10 
 and d3.d_year              = 2000
 group by
 i_item_id
 ,i_item_desc
 ,s_store_id
 ,s_store_name
 order by
 i_item_id
 ,i_item_desc
 ,s_store_id
 ,s_store_name
 limit 100
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Map 24 <- Reducer 19 (BROADCAST_EDGE), Reducer 22 (BROADCAST_EDGE), Reducer 23 (BROADCAST_EDGE), Reducer 8 (BROADCAST_EDGE)
Map 9 <- Reducer 15 (BROADCAST_EDGE), Reducer 22 (BROADCAST_EDGE), Reducer 23 (BROADCAST_EDGE), Reducer 28 (BROADCAST_EDGE), Reducer 8 (BROADCAST_EDGE)
Reducer 10 <- Map 14 (SIMPLE_EDGE), Map 9 (SIMPLE_EDGE)
Reducer 11 <- Reducer 10 (SIMPLE_EDGE)
Reducer 12 <- Reducer 11 (SIMPLE_EDGE), Reducer 18 (SIMPLE_EDGE)
Reducer 13 <- Reducer 12 (SIMPLE_EDGE)
Reducer 15 <- Map 14 (CUSTOM_SIMPLE_EDGE)
Reducer 16 <- Map 14 (SIMPLE_EDGE), Map 24 (SIMPLE_EDGE)
Reducer 17 <- Reducer 16 (SIMPLE_EDGE)
Reducer 18 <- Reducer 17 (ONE_TO_ONE_EDGE), Reducer 21 (SIMPLE_EDGE)
Reducer 19 <- Map 14 (CUSTOM_SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE)
Reducer 20 <- Map 14 (SIMPLE_EDGE), Map 25 (SIMPLE_EDGE)
Reducer 21 <- Reducer 20 (SIMPLE_EDGE)
Reducer 22 <- Reducer 21 (CUSTOM_SIMPLE_EDGE)
Reducer 23 <- Reducer 21 (CUSTOM_SIMPLE_EDGE)
Reducer 27 <- Map 26 (SIMPLE_EDGE)
Reducer 28 <- Reducer 27 (CUSTOM_SIMPLE_EDGE)
Reducer 3 <- Reducer 13 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 27 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 6 (SIMPLE_EDGE)
Reducer 8 <- Reducer 2 (CUSTOM_SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 7 vectorized
      File Output Operator [FS_333]
        Limit [LIM_332] (rows=100 width=88)
          Number of rows:100
          Select Operator [SEL_331] (rows=52707204 width=88)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
          <-Reducer 6 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_330]
              Group By Operator [GBY_329] (rows=52707204 width=88)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3
              <-Reducer 5 [SIMPLE_EDGE]
                SHUFFLE [RS_87]
                  PartitionCols:_col0, _col1, _col2, _col3
                  Group By Operator [GBY_86] (rows=105414409 width=88)
                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col10)","sum(_col11)","sum(_col12)"],keys:_col0, _col1, _col7, _col8
                    Top N Key Operator [TNK_133] (rows=105414409 width=88)
                      keys:_col0, _col1, _col7, _col8,sort order:++++,top n:100
                      Select Operator [SEL_84] (rows=105414409 width=88)
                        Output:["_col0","_col1","_col7","_col8","_col10","_col11","_col12"]
                        Merge Join Operator [MERGEJOIN_252] (rows=105414409 width=88)
                          Conds:RS_328._col2=RS_304._col0(Inner),Output:["_col0","_col1","_col3","_col4","_col5","_col7","_col8","_col9"]
                        <-Reducer 27 [SIMPLE_EDGE] vectorized
                          SHUFFLE [RS_304]
                            PartitionCols:_col0
                            Group By Operator [GBY_303] (rows=852 width=1910)
                              Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                            <-Map 26 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_302]
                                PartitionCols:_col0, _col1, _col2
                                Group By Operator [GBY_301] (rows=1704 width=1910)
                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col0, _col1, _col2
                                  Select Operator [SEL_300] (rows=1704 width=1910)
                                    Output:["_col0","_col1","_col2"]
                                    Filter Operator [FIL_299] (rows=1704 width=1910)
                                      predicate:s_store_sk is not null
                                      TableScan [TS_73] (rows=1704 width=1910)
                                        default@store,store,Tbl:COMPLETE,Col:NONE,Output:["s_store_sk","s_store_id","s_store_name"]
                        <-Reducer 4 [SIMPLE_EDGE] vectorized
                          SHUFFLE [RS_328]
                            PartitionCols:_col2
                            Select Operator [SEL_327] (rows=95831279 width=88)
                              Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                              Group By Operator [GBY_326] (rows=95831279 width=88)
                                Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)"],keys:KEY._col0, KEY._col1, KEY._col2
                              <-Reducer 3 [SIMPLE_EDGE]
                                SHUFFLE [RS_70]
                                  PartitionCols:_col0, _col1, _col2
                                  Group By Operator [GBY_69] (rows=191662559 width=88)
                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(_col9)","sum(_col10)","sum(_col11)"],keys:_col5, _col1, _col2
                                    Select Operator [SEL_67] (rows=191662559 width=88)
                                      Output:["_col1","_col2","_col5","_col9","_col10","_col11"]
                                      Merge Join Operator [MERGEJOIN_251] (rows=191662559 width=88)
                                        Conds:RS_258._col0=RS_325._col0(Inner),Output:["_col1","_col2","_col3","_col5","_col6","_col7","_col8"]
                                      <-Reducer 2 [SIMPLE_EDGE] vectorized
                                        PARTITION_ONLY_SHUFFLE [RS_258]
                                          PartitionCols:_col0
                                          Group By Operator [GBY_257] (rows=231000 width=1436)
                                            Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                          <-Map 1 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_256]
                                              PartitionCols:_col0, _col1, _col2
                                              Group By Operator [GBY_255] (rows=462000 width=1436)
                                                Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col0, _col1, _col2
                                                Select Operator [SEL_254] (rows=462000 width=1436)
                                                  Output:["_col0","_col1","_col2"]
                                                  Filter Operator [FIL_253] (rows=462000 width=1436)
                                                    predicate:i_item_sk is not null
                                                    TableScan [TS_0] (rows=462000 width=1436)
                                                      default@item,item,Tbl:COMPLETE,Col:NONE,Output:["i_item_sk","i_item_id","i_item_desc"]
                                      <-Reducer 13 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_325]
                                          PartitionCols:_col0
                                          Group By Operator [GBY_324] (rows=174238687 width=88)
                                            Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)"],keys:KEY._col0, KEY._col1
                                          <-Reducer 12 [SIMPLE_EDGE]
                                            SHUFFLE [RS_61]
                                              PartitionCols:_col0, _col1
                                              Group By Operator [GBY_60] (rows=348477374 width=88)
                                                Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col12)","sum(_col13)","sum(_col14)"],keys:_col0, _col2
                                                Select Operator [SEL_58] (rows=348477374 width=88)
                                                  Output:["_col0","_col2","_col12","_col13","_col14"]
                                                  Merge Join Operator [MERGEJOIN_250] (rows=348477374 width=88)
                                                    Conds:RS_315._col0, _col1, _col3=RS_56._col0, _col1, _col2(Inner),Output:["_col0","_col2","_col4","_col5","_col9","_col10","_col11"]
                                                  <-Reducer 11 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_315]
                                                      PartitionCols:_col0, _col1, _col3
                                                      Select Operator [SEL_314] (rows=316797606 width=88)
                                                        Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                                        Group By Operator [GBY_313] (rows=316797606 width=88)
                                                          Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3
                                                        <-Reducer 10 [SIMPLE_EDGE]
                                                          SHUFFLE [RS_19]
                                                            PartitionCols:_col0, _col1, _col2, _col3
                                                            Group By Operator [GBY_18] (rows=633595212 width=88)
                                                              Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(_col5)","count()"],keys:_col1, _col2, _col4, _col3
                                                              Merge Join Operator [MERGEJOIN_246] (rows=633595212 width=88)
                                                                Conds:RS_312._col0=RS_268._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5"]
                                                              <-Map 14 [SIMPLE_EDGE] vectorized
                                                                SHUFFLE [RS_268]
                                                                  PartitionCols:_col0
                                                                  Select Operator [SEL_265] (rows=18262 width=1119)
                                                                    Output:["_col0"]
                                                                    Filter Operator [FIL_262] (rows=18262 width=1119)
                                                                      predicate:((d_moy = 4) and (d_year = 2000) and d_date_sk is not null)
                                                                      TableScan [TS_11] (rows=73049 width=1119)
                                                                        default@date_dim,d1,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_year","d_moy"]
                                                              <-Map 9 [SIMPLE_EDGE] vectorized
                                                                SHUFFLE [RS_312]
                                                                  PartitionCols:_col0
                                                                  Select Operator [SEL_311] (rows=575995635 width=88)
                                                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                                                    Filter Operator [FIL_310] (rows=575995635 width=88)
                                                                      predicate:((ss_customer_sk BETWEEN DynamicValue(RS_51_store_returns_sr_item_sk_min) AND DynamicValue(RS_51_store_returns_sr_item_sk_max) and in_bloom_filter(ss_customer_sk, DynamicValue(RS_51_store_returns_sr_item_sk_bloom_filter))) and (ss_item_sk BETWEEN DynamicValue(RS_51_store_returns_sr_customer_sk_min) AND DynamicValue(RS_51_store_returns_sr_customer_sk_max) and in_bloom_filter(ss_item_sk, DynamicValue(RS_51_store_returns_sr_customer_sk_bloom_filter))) and (ss_item_sk BETWEEN DynamicValue(RS_64_item_i_item_sk_min) AND DynamicValue(RS_64_item_i_item_sk_max) and in_bloom_filter(ss_item_sk, DynamicValue(RS_64_item_i_item_sk_bloom_filter))) and (ss_sold_date_sk BETWEEN DynamicValue(RS_15_d1_d_date_sk_min) AND DynamicValue(RS_15_d1_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_15_d1_d_date_sk_bloom_filter))) and (ss_store_sk BETWEEN DynamicValue(RS_82_store_s_store_sk_min) AND DynamicValue(RS_82_store_s_store_sk_max) and in_bloom_filter(ss_store_sk, DynamicValue(RS_82_store_s_store_sk_bloom_filter))) and ss_customer_sk is not null and ss_item_sk is not null and ss_sold_date_sk is not null and ss_store_sk is not null and ss_ticket_number is not null)
                                                                      TableScan [TS_8] (rows=575995635 width=88)
                                                                        default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_date_sk","ss_item_sk","ss_customer_sk","ss_store_sk","ss_ticket_number","ss_net_profit"]
                                                                      <-Reducer 22 [BROADCAST_EDGE] vectorized
                                                                        BROADCAST [RS_291]
                                                                          Group By Operator [GBY_290] (rows=1 width=132)
                                                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=31675132)"]
                                                                          <-Reducer 21 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                            PARTITION_ONLY_SHUFFLE [RS_288]
                                                                              Group By Operator [GBY_286] (rows=1 width=132)
                                                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=31675132)"]
                                                                                Select Operator [SEL_284] (rows=31675133 width=77)
                                                                                  Output:["_col0"]
                                                                                  Group By Operator [GBY_282] (rows=31675133 width=77)
                                                                                    Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["count(VALUE._col0)","sum(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                                  <-Reducer 20 [SIMPLE_EDGE]
                                                                                    SHUFFLE [RS_47]
                                                                                      PartitionCols:_col0, _col1, _col2
                                                                                      Group By Operator [GBY_46] (rows=63350266 width=77)
                                                                                        Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["count()","sum(_col4)"],keys:_col1, _col2, _col3
                                                                                        Merge Join Operator [MERGEJOIN_248] (rows=63350266 width=77)
                                                                                          Conds:RS_281._col0=RS_272._col0(Inner),Output:["_col1","_col2","_col3","_col4"]
                                                                                        <-Map 14 [SIMPLE_EDGE] vectorized
                                                                                          SHUFFLE [RS_272]
                                                                                            PartitionCols:_col0
                                                                                            Select Operator [SEL_267] (rows=36524 width=1119)
                                                                                              Output:["_col0"]
                                                                                              Filter Operator [FIL_264] (rows=36524 width=1119)
                                                                                                predicate:((d_year = 2000) and d_date_sk is not null and d_moy BETWEEN 4 AND 10)
                                                                                                 Please refer to the previous TableScan [TS_11]
                                                                                        <-Map 25 [SIMPLE_EDGE] vectorized
                                                                                          SHUFFLE [RS_281]
                                                                                            PartitionCols:_col0
                                                                                            Select Operator [SEL_280] (rows=57591150 width=77)
                                                                                              Output:["_col0","_col1","_col2","_col3","_col4"]
                                                                                              Filter Operator [FIL_279] (rows=57591150 width=77)
                                                                                                predicate:(sr_customer_sk is not null and sr_item_sk is not null and sr_returned_date_sk is not null and sr_ticket_number is not null)
                                                                                                TableScan [TS_36] (rows=57591150 width=77)
                                                                                                  default@store_returns,store_returns,Tbl:COMPLETE,Col:NONE,Output:["sr_returned_date_sk","sr_item_sk","sr_customer_sk","sr_ticket_number","sr_net_loss"]
                                                                      <-Reducer 23 [BROADCAST_EDGE] vectorized
                                                                        BROADCAST [RS_294]
                                                                          Group By Operator [GBY_293] (rows=1 width=132)
                                                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=31675132)"]
                                                                          <-Reducer 21 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                            PARTITION_ONLY_SHUFFLE [RS_289]
                                                                              Group By Operator [GBY_287] (rows=1 width=132)
                                                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=31675132)"]
                                                                                Select Operator [SEL_285] (rows=31675133 width=77)
                                                                                  Output:["_col0"]
                                                                                   Please refer to the previous Group By Operator [GBY_282]
                                                                      <-Reducer 8 [BROADCAST_EDGE] vectorized
                                                                        BROADCAST [RS_297]
                                                                          Group By Operator [GBY_296] (rows=1 width=20)
                                                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                          <-Reducer 2 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                            PARTITION_ONLY_SHUFFLE [RS_261]
                                                                              Group By Operator [GBY_260] (rows=1 width=20)
                                                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                Select Operator [SEL_259] (rows=231000 width=1436)
                                                                                  Output:["_col0"]
                                                                                   Please refer to the previous Group By Operator [GBY_257]
                                                                      <-Reducer 15 [BROADCAST_EDGE] vectorized
                                                                        BROADCAST [RS_278]
                                                                          Group By Operator [GBY_277] (rows=1 width=12)
                                                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                          <-Map 14 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                            SHUFFLE [RS_275]
                                                                              Group By Operator [GBY_273] (rows=1 width=12)
                                                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                Select Operator [SEL_269] (rows=18262 width=1119)
                                                                                  Output:["_col0"]
                                                                                   Please refer to the previous Select Operator [SEL_265]
                                                                      <-Reducer 28 [BROADCAST_EDGE] vectorized
                                                                        BROADCAST [RS_309]
                                                                          Group By Operator [GBY_308] (rows=1 width=20)
                                                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                          <-Reducer 27 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                            SHUFFLE [RS_307]
                                                                              Group By Operator [GBY_306] (rows=1 width=20)
                                                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                Select Operator [SEL_305] (rows=852 width=1910)
                                                                                  Output:["_col0"]
                                                                                   Please refer to the previous Group By Operator [GBY_303]
                                                  <-Reducer 18 [SIMPLE_EDGE]
                                                    SHUFFLE [RS_56]
                                                      PartitionCols:_col0, _col1, _col2
                                                      Select Operator [SEL_53] (rows=174233858 width=135)
                                                        Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                                        Merge Join Operator [MERGEJOIN_249] (rows=174233858 width=135)
                                                          Conds:RS_323._col1, _col0=RS_283._col0, _col1(Inner),Output:["_col2","_col3","_col4","_col5","_col6","_col7","_col8"]
                                                        <-Reducer 21 [SIMPLE_EDGE] vectorized
                                                          PARTITION_ONLY_SHUFFLE [RS_283]
                                                            PartitionCols:_col0, _col1
                                                             Please refer to the previous Group By Operator [GBY_282]
                                                        <-Reducer 17 [ONE_TO_ONE_EDGE] vectorized
                                                          FORWARD [RS_323]
                                                            PartitionCols:_col1, _col0
                                                            Select Operator [SEL_322] (rows=158394413 width=135)
                                                              Output:["_col0","_col1","_col2","_col3"]
                                                              Group By Operator [GBY_321] (rows=158394413 width=135)
                                                                Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)","sum(VALUE._col1)"],keys:KEY._col0, KEY._col1
                                                              <-Reducer 16 [SIMPLE_EDGE]
                                                                SHUFFLE [RS_33]
                                                                  PartitionCols:_col0, _col1
                                                                  Group By Operator [GBY_32] (rows=316788826 width=135)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count()","sum(_col3)"],keys:_col2, _col1
                                                                    Merge Join Operator [MERGEJOIN_247] (rows=316788826 width=135)
                                                                      Conds:RS_320._col0=RS_270._col0(Inner),Output:["_col1","_col2","_col3"]
                                                                    <-Map 14 [SIMPLE_EDGE] vectorized
                                                                      SHUFFLE [RS_270]
                                                                        PartitionCols:_col0
                                                                        Select Operator [SEL_266] (rows=36524 width=1119)
                                                                          Output:["_col0"]
                                                                          Filter Operator [FIL_263] (rows=36524 width=1119)
                                                                            predicate:((d_year = 2000) and d_date_sk is not null and d_moy BETWEEN 4 AND 10)
                                                                             Please refer to the previous TableScan [TS_11]
                                                                    <-Map 24 [SIMPLE_EDGE] vectorized
                                                                      SHUFFLE [RS_320]
                                                                        PartitionCols:_col0
                                                                        Select Operator [SEL_319] (rows=287989836 width=135)
                                                                          Output:["_col0","_col1","_col2","_col3"]
                                                                          Filter Operator [FIL_318] (rows=287989836 width=135)
                                                                            predicate:((cs_bill_customer_sk BETWEEN DynamicValue(RS_51_store_returns_sr_customer_sk_min) AND DynamicValue(RS_51_store_returns_sr_customer_sk_max) and in_bloom_filter(cs_bill_customer_sk, DynamicValue(RS_51_store_returns_sr_customer_sk_bloom_filter))) and (cs_item_sk BETWEEN DynamicValue(RS_51_store_returns_sr_item_sk_min) AND DynamicValue(RS_51_store_returns_sr_item_sk_max) and in_bloom_filter(cs_item_sk, DynamicValue(RS_51_store_returns_sr_item_sk_bloom_filter))) and (cs_item_sk BETWEEN DynamicValue(RS_64_item_i_item_sk_min) AND DynamicValue(RS_64_item_i_item_sk_max) and in_bloom_filter(cs_item_sk, DynamicValue(RS_64_item_i_item_sk_bloom_filter))) and (cs_sold_date_sk BETWEEN DynamicValue(RS_29_d3_d_date_sk_min) AND DynamicValue(RS_29_d3_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_29_d3_d_date_sk_bloom_filter))) and cs_bill_customer_sk is not null and cs_item_sk is not null and cs_sold_date_sk is not null)
                                                                            TableScan [TS_22] (rows=287989836 width=135)
                                                                              default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:NONE,Output:["cs_sold_date_sk","cs_bill_customer_sk","cs_item_sk","cs_net_profit"]
                                                                            <-Reducer 22 [BROADCAST_EDGE] vectorized
                                                                              BROADCAST [RS_292]
                                                                                 Please refer to the previous Group By Operator [GBY_290]
                                                                            <-Reducer 23 [BROADCAST_EDGE] vectorized
                                                                              BROADCAST [RS_295]
                                                                                 Please refer to the previous Group By Operator [GBY_293]
                                                                            <-Reducer 8 [BROADCAST_EDGE] vectorized
                                                                              BROADCAST [RS_298]
                                                                                 Please refer to the previous Group By Operator [GBY_296]
                                                                            <-Reducer 19 [BROADCAST_EDGE] vectorized
                                                                              BROADCAST [RS_317]
                                                                                Group By Operator [GBY_316] (rows=1 width=12)
                                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                <-Map 14 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                  SHUFFLE [RS_276]
                                                                                    Group By Operator [GBY_274] (rows=1 width=12)
                                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                      Select Operator [SEL_271] (rows=36524 width=1119)
                                                                                        Output:["_col0"]
                                                                                         Please refer to the previous Select Operator [SEL_266]

