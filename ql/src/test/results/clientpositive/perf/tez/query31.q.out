PREHOOK: query: explain
with ss as
 (select ca_county,d_qoy, d_year,sum(ss_ext_sales_price) as store_sales
 from store_sales,date_dim,customer_address
 where ss_sold_date_sk = d_date_sk
  and ss_addr_sk=ca_address_sk
 group by ca_county,d_qoy, d_year),
 ws as
 (select ca_county,d_qoy, d_year,sum(ws_ext_sales_price) as web_sales
 from web_sales,date_dim,customer_address
 where ws_sold_date_sk = d_date_sk
  and ws_bill_addr_sk=ca_address_sk
 group by ca_county,d_qoy, d_year)
 select /* tt */
        ss1.ca_county
       ,ss1.d_year
       ,ws2.web_sales/ws1.web_sales web_q1_q2_increase
       ,ss2.store_sales/ss1.store_sales store_q1_q2_increase
       ,ws3.web_sales/ws2.web_sales web_q2_q3_increase
       ,ss3.store_sales/ss2.store_sales store_q2_q3_increase
 from
        ss ss1
       ,ss ss2
       ,ss ss3
       ,ws ws1
       ,ws ws2
       ,ws ws3
 where
    ss1.d_qoy = 1
    and ss1.d_year = 2000
    and ss1.ca_county = ss2.ca_county
    and ss2.d_qoy = 2
    and ss2.d_year = 2000
 and ss2.ca_county = ss3.ca_county
    and ss3.d_qoy = 3
    and ss3.d_year = 2000
    and ss1.ca_county = ws1.ca_county
    and ws1.d_qoy = 1
    and ws1.d_year = 2000
    and ws1.ca_county = ws2.ca_county
    and ws2.d_qoy = 2
    and ws2.d_year = 2000
    and ws1.ca_county = ws3.ca_county
    and ws3.d_qoy = 3
    and ws3.d_year =2000
    and case when ws1.web_sales > 0 then ws2.web_sales/ws1.web_sales else null end 
       > case when ss1.store_sales > 0 then ss2.store_sales/ss1.store_sales else null end
    and case when ws2.web_sales > 0 then ws3.web_sales/ws2.web_sales else null end
       > case when ss2.store_sales > 0 then ss3.store_sales/ss2.store_sales else null end
 order by ss1.d_year
PREHOOK: type: QUERY
POSTHOOK: query: explain
with ss as
 (select ca_county,d_qoy, d_year,sum(ss_ext_sales_price) as store_sales
 from store_sales,date_dim,customer_address
 where ss_sold_date_sk = d_date_sk
  and ss_addr_sk=ca_address_sk
 group by ca_county,d_qoy, d_year),
 ws as
 (select ca_county,d_qoy, d_year,sum(ws_ext_sales_price) as web_sales
 from web_sales,date_dim,customer_address
 where ws_sold_date_sk = d_date_sk
  and ws_bill_addr_sk=ca_address_sk
 group by ca_county,d_qoy, d_year)
 select /* tt */
        ss1.ca_county
       ,ss1.d_year
       ,ws2.web_sales/ws1.web_sales web_q1_q2_increase
       ,ss2.store_sales/ss1.store_sales store_q1_q2_increase
       ,ws3.web_sales/ws2.web_sales web_q2_q3_increase
       ,ss3.store_sales/ss2.store_sales store_q2_q3_increase
 from
        ss ss1
       ,ss ss2
       ,ss ss3
       ,ws ws1
       ,ws ws2
       ,ws ws3
 where
    ss1.d_qoy = 1
    and ss1.d_year = 2000
    and ss1.ca_county = ss2.ca_county
    and ss2.d_qoy = 2
    and ss2.d_year = 2000
 and ss2.ca_county = ss3.ca_county
    and ss3.d_qoy = 3
    and ss3.d_year = 2000
    and ss1.ca_county = ws1.ca_county
    and ws1.d_qoy = 1
    and ws1.d_year = 2000
    and ws1.ca_county = ws2.ca_county
    and ws2.d_qoy = 2
    and ws2.d_year = 2000
    and ws1.ca_county = ws3.ca_county
    and ws3.d_qoy = 3
    and ws3.d_year =2000
    and case when ws1.web_sales > 0 then ws2.web_sales/ws1.web_sales else null end 
       > case when ss1.store_sales > 0 then ss2.store_sales/ss1.store_sales else null end
    and case when ws2.web_sales > 0 then ws3.web_sales/ws2.web_sales else null end
       > case when ss2.store_sales > 0 then ss3.store_sales/ss2.store_sales else null end
 order by ss1.d_year
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Map 23 <- Reducer 27 (BROADCAST_EDGE), Reducer 6 (BROADCAST_EDGE)
Map 43 <- Reducer 30 (BROADCAST_EDGE), Reducer 9 (BROADCAST_EDGE)
Map 44 <- Reducer 12 (BROADCAST_EDGE), Reducer 33 (BROADCAST_EDGE)
Map 45 <- Reducer 16 (BROADCAST_EDGE), Reducer 36 (BROADCAST_EDGE)
Map 46 <- Reducer 19 (BROADCAST_EDGE), Reducer 39 (BROADCAST_EDGE)
Map 47 <- Reducer 22 (BROADCAST_EDGE), Reducer 42 (BROADCAST_EDGE)
Reducer 10 <- Reducer 2 (SIMPLE_EDGE), Reducer 32 (ONE_TO_ONE_EDGE)
Reducer 11 <- Reducer 10 (SIMPLE_EDGE)
Reducer 12 <- Reducer 2 (CUSTOM_SIMPLE_EDGE)
Reducer 13 <- Reducer 2 (SIMPLE_EDGE), Reducer 35 (ONE_TO_ONE_EDGE)
Reducer 14 <- Reducer 13 (SIMPLE_EDGE)
Reducer 15 <- Reducer 14 (ONE_TO_ONE_EDGE), Reducer 18 (ONE_TO_ONE_EDGE), Reducer 21 (ONE_TO_ONE_EDGE)
Reducer 16 <- Reducer 2 (CUSTOM_SIMPLE_EDGE)
Reducer 17 <- Reducer 2 (SIMPLE_EDGE), Reducer 38 (ONE_TO_ONE_EDGE)
Reducer 18 <- Reducer 17 (SIMPLE_EDGE)
Reducer 19 <- Reducer 2 (CUSTOM_SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE)
Reducer 20 <- Reducer 2 (SIMPLE_EDGE), Reducer 41 (ONE_TO_ONE_EDGE)
Reducer 21 <- Reducer 20 (SIMPLE_EDGE)
Reducer 22 <- Reducer 2 (CUSTOM_SIMPLE_EDGE)
Reducer 24 <- Map 23 (SIMPLE_EDGE), Map 26 (SIMPLE_EDGE)
Reducer 25 <- Reducer 24 (SIMPLE_EDGE)
Reducer 27 <- Map 26 (CUSTOM_SIMPLE_EDGE)
Reducer 28 <- Map 26 (SIMPLE_EDGE), Map 43 (SIMPLE_EDGE)
Reducer 29 <- Reducer 28 (SIMPLE_EDGE)
Reducer 3 <- Reducer 2 (SIMPLE_EDGE), Reducer 25 (ONE_TO_ONE_EDGE)
Reducer 30 <- Map 26 (CUSTOM_SIMPLE_EDGE)
Reducer 31 <- Map 26 (SIMPLE_EDGE), Map 44 (SIMPLE_EDGE)
Reducer 32 <- Reducer 31 (SIMPLE_EDGE)
Reducer 33 <- Map 26 (CUSTOM_SIMPLE_EDGE)
Reducer 34 <- Map 26 (SIMPLE_EDGE), Map 45 (SIMPLE_EDGE)
Reducer 35 <- Reducer 34 (SIMPLE_EDGE)
Reducer 36 <- Map 26 (CUSTOM_SIMPLE_EDGE)
Reducer 37 <- Map 26 (SIMPLE_EDGE), Map 46 (SIMPLE_EDGE)
Reducer 38 <- Reducer 37 (SIMPLE_EDGE)
Reducer 39 <- Map 26 (CUSTOM_SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
Reducer 40 <- Map 26 (SIMPLE_EDGE), Map 47 (SIMPLE_EDGE)
Reducer 41 <- Reducer 40 (SIMPLE_EDGE)
Reducer 42 <- Map 26 (CUSTOM_SIMPLE_EDGE)
Reducer 5 <- Reducer 11 (ONE_TO_ONE_EDGE), Reducer 15 (ONE_TO_ONE_EDGE), Reducer 4 (ONE_TO_ONE_EDGE), Reducer 8 (ONE_TO_ONE_EDGE)
Reducer 6 <- Reducer 2 (CUSTOM_SIMPLE_EDGE)
Reducer 7 <- Reducer 2 (SIMPLE_EDGE), Reducer 29 (ONE_TO_ONE_EDGE)
Reducer 8 <- Reducer 7 (SIMPLE_EDGE)
Reducer 9 <- Reducer 2 (CUSTOM_SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 5
      File Output Operator [FS_199]
        Select Operator [SEL_198] (rows=143746919 width=88)
          Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
          Filter Operator [FIL_196] (rows=143746919 width=88)
            predicate:(CASE WHEN ((_col1 > 0)) THEN (CASE WHEN ((_col9 > 0)) THEN (((_col11 / _col9) > (_col5 / _col1))) ELSE ((null > (_col5 / _col1))) END) ELSE (CASE WHEN ((_col9 > 0)) THEN (((_col11 / _col9) > null)) ELSE (null) END) END and CASE WHEN ((_col3 > 0)) THEN (CASE WHEN ((_col7 > 0)) THEN (((_col9 / _col7) > (_col1 / _col3))) ELSE ((null > (_col1 / _col3))) END) ELSE (CASE WHEN ((_col7 > 0)) THEN (((_col9 / _col7) > null)) ELSE (null) END) END)
            Merge Join Operator [MERGEJOIN_514] (rows=574987679 width=88)
              Conds:RS_590._col0=RS_601._col0(Inner),RS_590._col0=RS_612._col0(Inner),RS_590._col0=RS_194._col0(Inner),Output:["_col0","_col1","_col3","_col5","_col7","_col9","_col11"]
            <-Reducer 11 [ONE_TO_ONE_EDGE] vectorized
              FORWARD [RS_612]
                PartitionCols:_col0
                Group By Operator [GBY_611] (rows=174238687 width=88)
                  Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                <-Reducer 10 [SIMPLE_EDGE]
                  SHUFFLE [RS_90]
                    PartitionCols:_col0
                    Group By Operator [GBY_89] (rows=348477374 width=88)
                      Output:["_col0","_col1"],aggregations:["sum(_col5)"],keys:_col1
                      Select Operator [SEL_87] (rows=348477374 width=88)
                        Output:["_col1","_col5"]
                        Merge Join Operator [MERGEJOIN_509] (rows=348477374 width=88)
                          Conds:RS_524._col0=RS_610._col0(Inner),Output:["_col1","_col2","_col4"]
                        <-Reducer 2 [SIMPLE_EDGE] vectorized
                          PARTITION_ONLY_SHUFFLE [RS_524]
                            PartitionCols:_col0
                            Group By Operator [GBY_519] (rows=20000000 width=1014)
                              Output:["_col0","_col1","_col2"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1
                            <-Map 1 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_518]
                                PartitionCols:_col0, _col1
                                Group By Operator [GBY_517] (rows=40000000 width=1014)
                                  Output:["_col0","_col1","_col2"],aggregations:["count()"],keys:_col0, _col1
                                  Select Operator [SEL_516] (rows=40000000 width=1014)
                                    Output:["_col0","_col1"]
                                    Filter Operator [FIL_515] (rows=40000000 width=1014)
                                      predicate:(ca_address_sk is not null and ca_county is not null)
                                      TableScan [TS_0] (rows=40000000 width=1014)
                                        default@customer_address,customer_address,Tbl:COMPLETE,Col:NONE,Output:["ca_address_sk","ca_county"]
                        <-Reducer 32 [ONE_TO_ONE_EDGE] vectorized
                          FORWARD [RS_610]
                            PartitionCols:_col0
                            Group By Operator [GBY_609] (rows=316797606 width=88)
                              Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                            <-Reducer 31 [SIMPLE_EDGE]
                              SHUFFLE [RS_81]
                                PartitionCols:_col0
                                Group By Operator [GBY_80] (rows=633595212 width=88)
                                  Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col1
                                  Merge Join Operator [MERGEJOIN_503] (rows=633595212 width=88)
                                    Conds:RS_608._col0=RS_560._col0(Inner),Output:["_col1","_col2"]
                                  <-Map 26 [SIMPLE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_560]
                                      PartitionCols:_col0
                                      Select Operator [SEL_552] (rows=18262 width=1119)
                                        Output:["_col0"]
                                        Filter Operator [FIL_546] (rows=18262 width=1119)
                                          predicate:((d_qoy = 3) and (d_year = 2000) and d_date_sk is not null)
                                          TableScan [TS_11] (rows=73049 width=1119)
                                            default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_year","d_qoy"]
                                  <-Map 44 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_608]
                                      PartitionCols:_col0
                                      Select Operator [SEL_607] (rows=575995635 width=88)
                                        Output:["_col0","_col1","_col2"]
                                        Filter Operator [FIL_606] (rows=575995635 width=88)
                                          predicate:((ss_addr_sk BETWEEN DynamicValue(RS_84_customer_address_ca_address_sk_min) AND DynamicValue(RS_84_customer_address_ca_address_sk_max) and in_bloom_filter(ss_addr_sk, DynamicValue(RS_84_customer_address_ca_address_sk_bloom_filter))) and (ss_sold_date_sk BETWEEN DynamicValue(RS_77_date_dim_d_date_sk_min) AND DynamicValue(RS_77_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_77_date_dim_d_date_sk_bloom_filter))) and ss_addr_sk is not null and ss_sold_date_sk is not null)
                                          TableScan [TS_70] (rows=575995635 width=88)
                                            default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_date_sk","ss_addr_sk","ss_ext_sales_price"]
                                          <-Reducer 12 [BROADCAST_EDGE] vectorized
                                            BROADCAST [RS_605]
                                              Group By Operator [GBY_604] (rows=1 width=16)
                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=20000000)"]
                                              <-Reducer 2 [CUSTOM_SIMPLE_EDGE] vectorized
                                                PARTITION_ONLY_SHUFFLE [RS_540]
                                                  Group By Operator [GBY_534] (rows=1 width=16)
                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=20000000)"]
                                                    Select Operator [SEL_525] (rows=20000000 width=1014)
                                                      Output:["_col0"]
                                                       Please refer to the previous Group By Operator [GBY_519]
                                          <-Reducer 33 [BROADCAST_EDGE] vectorized
                                            BROADCAST [RS_603]
                                              Group By Operator [GBY_602] (rows=1 width=12)
                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                              <-Map 26 [CUSTOM_SIMPLE_EDGE] vectorized
                                                PARTITION_ONLY_SHUFFLE [RS_576]
                                                  Group By Operator [GBY_570] (rows=1 width=12)
                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                    Select Operator [SEL_561] (rows=18262 width=1119)
                                                      Output:["_col0"]
                                                       Please refer to the previous Select Operator [SEL_552]
            <-Reducer 15 [ONE_TO_ONE_EDGE]
              FORWARD [RS_194]
                PartitionCols:_col0
                Merge Join Operator [MERGEJOIN_513] (rows=95833779 width=135)
                  Conds:RS_623._col0=RS_634._col0(Inner),RS_623._col0=RS_645._col0(Inner),Output:["_col0","_col1","_col3","_col5"]
                <-Reducer 14 [ONE_TO_ONE_EDGE] vectorized
                  FORWARD [RS_623]
                    PartitionCols:_col0
                    Group By Operator [GBY_622] (rows=43560808 width=135)
                      Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                    <-Reducer 13 [SIMPLE_EDGE]
                      SHUFFLE [RS_121]
                        PartitionCols:_col0
                        Group By Operator [GBY_120] (rows=87121617 width=135)
                          Output:["_col0","_col1"],aggregations:["sum(_col5)"],keys:_col1
                          Select Operator [SEL_118] (rows=87121617 width=135)
                            Output:["_col1","_col5"]
                            Merge Join Operator [MERGEJOIN_510] (rows=87121617 width=135)
                              Conds:RS_526._col0=RS_621._col0(Inner),Output:["_col1","_col2","_col4"]
                            <-Reducer 2 [SIMPLE_EDGE] vectorized
                              PARTITION_ONLY_SHUFFLE [RS_526]
                                PartitionCols:_col0
                                 Please refer to the previous Group By Operator [GBY_519]
                            <-Reducer 35 [ONE_TO_ONE_EDGE] vectorized
                              FORWARD [RS_621]
                                PartitionCols:_col0
                                Group By Operator [GBY_620] (rows=79201469 width=135)
                                  Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                                <-Reducer 34 [SIMPLE_EDGE]
                                  SHUFFLE [RS_112]
                                    PartitionCols:_col0
                                    Group By Operator [GBY_111] (rows=158402938 width=135)
                                      Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col1
                                      Merge Join Operator [MERGEJOIN_504] (rows=158402938 width=135)
                                        Conds:RS_619._col0=RS_562._col0(Inner),Output:["_col1","_col2"]
                                      <-Map 26 [SIMPLE_EDGE] vectorized
                                        PARTITION_ONLY_SHUFFLE [RS_562]
                                          PartitionCols:_col0
                                          Select Operator [SEL_553] (rows=18262 width=1119)
                                            Output:["_col0"]
                                            Filter Operator [FIL_547] (rows=18262 width=1119)
                                              predicate:((d_qoy = 1) and (d_year = 2000) and d_date_sk is not null)
                                               Please refer to the previous TableScan [TS_11]
                                      <-Map 45 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_619]
                                          PartitionCols:_col0
                                          Select Operator [SEL_618] (rows=144002668 width=135)
                                            Output:["_col0","_col1","_col2"]
                                            Filter Operator [FIL_617] (rows=144002668 width=135)
                                              predicate:((ws_bill_addr_sk BETWEEN DynamicValue(RS_115_customer_address_ca_address_sk_min) AND DynamicValue(RS_115_customer_address_ca_address_sk_max) and in_bloom_filter(ws_bill_addr_sk, DynamicValue(RS_115_customer_address_ca_address_sk_bloom_filter))) and (ws_sold_date_sk BETWEEN DynamicValue(RS_108_date_dim_d_date_sk_min) AND DynamicValue(RS_108_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_108_date_dim_d_date_sk_bloom_filter))) and ws_bill_addr_sk is not null and ws_sold_date_sk is not null)
                                              TableScan [TS_101] (rows=144002668 width=135)
                                                default@web_sales,web_sales,Tbl:COMPLETE,Col:NONE,Output:["ws_sold_date_sk","ws_bill_addr_sk","ws_ext_sales_price"]
                                              <-Reducer 16 [BROADCAST_EDGE] vectorized
                                                BROADCAST [RS_616]
                                                  Group By Operator [GBY_615] (rows=1 width=16)
                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=20000000)"]
                                                  <-Reducer 2 [CUSTOM_SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_541]
                                                      Group By Operator [GBY_535] (rows=1 width=16)
                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=20000000)"]
                                                        Select Operator [SEL_527] (rows=20000000 width=1014)
                                                          Output:["_col0"]
                                                           Please refer to the previous Group By Operator [GBY_519]
                                              <-Reducer 36 [BROADCAST_EDGE] vectorized
                                                BROADCAST [RS_614]
                                                  Group By Operator [GBY_613] (rows=1 width=12)
                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                  <-Map 26 [CUSTOM_SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_577]
                                                      Group By Operator [GBY_571] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                        Select Operator [SEL_563] (rows=18262 width=1119)
                                                          Output:["_col0"]
                                                           Please refer to the previous Select Operator [SEL_553]
                <-Reducer 18 [ONE_TO_ONE_EDGE] vectorized
                  FORWARD [RS_634]
                    PartitionCols:_col0
                    Group By Operator [GBY_633] (rows=43560808 width=135)
                      Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                    <-Reducer 17 [SIMPLE_EDGE]
                      SHUFFLE [RS_152]
                        PartitionCols:_col0
                        Group By Operator [GBY_151] (rows=87121617 width=135)
                          Output:["_col0","_col1"],aggregations:["sum(_col5)"],keys:_col1
                          Select Operator [SEL_149] (rows=87121617 width=135)
                            Output:["_col1","_col5"]
                            Merge Join Operator [MERGEJOIN_511] (rows=87121617 width=135)
                              Conds:RS_528._col0=RS_632._col0(Inner),Output:["_col1","_col2","_col4"]
                            <-Reducer 2 [SIMPLE_EDGE] vectorized
                              PARTITION_ONLY_SHUFFLE [RS_528]
                                PartitionCols:_col0
                                 Please refer to the previous Group By Operator [GBY_519]
                            <-Reducer 38 [ONE_TO_ONE_EDGE] vectorized
                              FORWARD [RS_632]
                                PartitionCols:_col0
                                Group By Operator [GBY_631] (rows=79201469 width=135)
                                  Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                                <-Reducer 37 [SIMPLE_EDGE]
                                  SHUFFLE [RS_143]
                                    PartitionCols:_col0
                                    Group By Operator [GBY_142] (rows=158402938 width=135)
                                      Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col1
                                      Merge Join Operator [MERGEJOIN_505] (rows=158402938 width=135)
                                        Conds:RS_630._col0=RS_564._col0(Inner),Output:["_col1","_col2"]
                                      <-Map 26 [SIMPLE_EDGE] vectorized
                                        PARTITION_ONLY_SHUFFLE [RS_564]
                                          PartitionCols:_col0
                                          Select Operator [SEL_554] (rows=18262 width=1119)
                                            Output:["_col0"]
                                            Filter Operator [FIL_548] (rows=18262 width=1119)
                                              predicate:((d_qoy = 2) and (d_year = 2000) and d_date_sk is not null)
                                               Please refer to the previous TableScan [TS_11]
                                      <-Map 46 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_630]
                                          PartitionCols:_col0
                                          Select Operator [SEL_629] (rows=144002668 width=135)
                                            Output:["_col0","_col1","_col2"]
                                            Filter Operator [FIL_628] (rows=144002668 width=135)
                                              predicate:((ws_bill_addr_sk BETWEEN DynamicValue(RS_146_customer_address_ca_address_sk_min) AND DynamicValue(RS_146_customer_address_ca_address_sk_max) and in_bloom_filter(ws_bill_addr_sk, DynamicValue(RS_146_customer_address_ca_address_sk_bloom_filter))) and (ws_sold_date_sk BETWEEN DynamicValue(RS_139_date_dim_d_date_sk_min) AND DynamicValue(RS_139_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_139_date_dim_d_date_sk_bloom_filter))) and ws_bill_addr_sk is not null and ws_sold_date_sk is not null)
                                              TableScan [TS_132] (rows=144002668 width=135)
                                                default@web_sales,web_sales,Tbl:COMPLETE,Col:NONE,Output:["ws_sold_date_sk","ws_bill_addr_sk","ws_ext_sales_price"]
                                              <-Reducer 19 [BROADCAST_EDGE] vectorized
                                                BROADCAST [RS_627]
                                                  Group By Operator [GBY_626] (rows=1 width=16)
                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=20000000)"]
                                                  <-Reducer 2 [CUSTOM_SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_542]
                                                      Group By Operator [GBY_536] (rows=1 width=16)
                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=20000000)"]
                                                        Select Operator [SEL_529] (rows=20000000 width=1014)
                                                          Output:["_col0"]
                                                           Please refer to the previous Group By Operator [GBY_519]
                                              <-Reducer 39 [BROADCAST_EDGE] vectorized
                                                BROADCAST [RS_625]
                                                  Group By Operator [GBY_624] (rows=1 width=12)
                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                  <-Map 26 [CUSTOM_SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_578]
                                                      Group By Operator [GBY_572] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                        Select Operator [SEL_565] (rows=18262 width=1119)
                                                          Output:["_col0"]
                                                           Please refer to the previous Select Operator [SEL_554]
                <-Reducer 21 [ONE_TO_ONE_EDGE] vectorized
                  FORWARD [RS_645]
                    PartitionCols:_col0
                    Group By Operator [GBY_644] (rows=43560808 width=135)
                      Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                    <-Reducer 20 [SIMPLE_EDGE]
                      SHUFFLE [RS_183]
                        PartitionCols:_col0
                        Group By Operator [GBY_182] (rows=87121617 width=135)
                          Output:["_col0","_col1"],aggregations:["sum(_col5)"],keys:_col1
                          Select Operator [SEL_180] (rows=87121617 width=135)
                            Output:["_col1","_col5"]
                            Merge Join Operator [MERGEJOIN_512] (rows=87121617 width=135)
                              Conds:RS_530._col0=RS_643._col0(Inner),Output:["_col1","_col2","_col4"]
                            <-Reducer 2 [SIMPLE_EDGE] vectorized
                              PARTITION_ONLY_SHUFFLE [RS_530]
                                PartitionCols:_col0
                                 Please refer to the previous Group By Operator [GBY_519]
                            <-Reducer 41 [ONE_TO_ONE_EDGE] vectorized
                              FORWARD [RS_643]
                                PartitionCols:_col0
                                Group By Operator [GBY_642] (rows=79201469 width=135)
                                  Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                                <-Reducer 40 [SIMPLE_EDGE]
                                  SHUFFLE [RS_174]
                                    PartitionCols:_col0
                                    Group By Operator [GBY_173] (rows=158402938 width=135)
                                      Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col1
                                      Merge Join Operator [MERGEJOIN_506] (rows=158402938 width=135)
                                        Conds:RS_641._col0=RS_566._col0(Inner),Output:["_col1","_col2"]
                                      <-Map 26 [SIMPLE_EDGE] vectorized
                                        PARTITION_ONLY_SHUFFLE [RS_566]
                                          PartitionCols:_col0
                                          Select Operator [SEL_555] (rows=18262 width=1119)
                                            Output:["_col0"]
                                            Filter Operator [FIL_549] (rows=18262 width=1119)
                                              predicate:((d_qoy = 3) and (d_year = 2000) and d_date_sk is not null)
                                               Please refer to the previous TableScan [TS_11]
                                      <-Map 47 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_641]
                                          PartitionCols:_col0
                                          Select Operator [SEL_640] (rows=144002668 width=135)
                                            Output:["_col0","_col1","_col2"]
                                            Filter Operator [FIL_639] (rows=144002668 width=135)
                                              predicate:((ws_bill_addr_sk BETWEEN DynamicValue(RS_177_customer_address_ca_address_sk_min) AND DynamicValue(RS_177_customer_address_ca_address_sk_max) and in_bloom_filter(ws_bill_addr_sk, DynamicValue(RS_177_customer_address_ca_address_sk_bloom_filter))) and (ws_sold_date_sk BETWEEN DynamicValue(RS_170_date_dim_d_date_sk_min) AND DynamicValue(RS_170_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_170_date_dim_d_date_sk_bloom_filter))) and ws_bill_addr_sk is not null and ws_sold_date_sk is not null)
                                              TableScan [TS_163] (rows=144002668 width=135)
                                                default@web_sales,web_sales,Tbl:COMPLETE,Col:NONE,Output:["ws_sold_date_sk","ws_bill_addr_sk","ws_ext_sales_price"]
                                              <-Reducer 22 [BROADCAST_EDGE] vectorized
                                                BROADCAST [RS_638]
                                                  Group By Operator [GBY_637] (rows=1 width=16)
                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=20000000)"]
                                                  <-Reducer 2 [CUSTOM_SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_543]
                                                      Group By Operator [GBY_537] (rows=1 width=16)
                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=20000000)"]
                                                        Select Operator [SEL_531] (rows=20000000 width=1014)
                                                          Output:["_col0"]
                                                           Please refer to the previous Group By Operator [GBY_519]
                                              <-Reducer 42 [BROADCAST_EDGE] vectorized
                                                BROADCAST [RS_636]
                                                  Group By Operator [GBY_635] (rows=1 width=12)
                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                  <-Map 26 [CUSTOM_SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_579]
                                                      Group By Operator [GBY_573] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                        Select Operator [SEL_567] (rows=18262 width=1119)
                                                          Output:["_col0"]
                                                           Please refer to the previous Select Operator [SEL_555]
            <-Reducer 4 [ONE_TO_ONE_EDGE] vectorized
              FORWARD [RS_590]
                PartitionCols:_col0
                Group By Operator [GBY_589] (rows=174238687 width=88)
                  Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                <-Reducer 3 [SIMPLE_EDGE]
                  SHUFFLE [RS_28]
                    PartitionCols:_col0
                    Group By Operator [GBY_27] (rows=348477374 width=88)
                      Output:["_col0","_col1"],aggregations:["sum(_col5)"],keys:_col1
                      Select Operator [SEL_25] (rows=348477374 width=88)
                        Output:["_col1","_col5"]
                        Merge Join Operator [MERGEJOIN_507] (rows=348477374 width=88)
                          Conds:RS_520._col0=RS_588._col0(Inner),Output:["_col1","_col2","_col4"]
                        <-Reducer 2 [SIMPLE_EDGE] vectorized
                          PARTITION_ONLY_SHUFFLE [RS_520]
                            PartitionCols:_col0
                             Please refer to the previous Group By Operator [GBY_519]
                        <-Reducer 25 [ONE_TO_ONE_EDGE] vectorized
                          FORWARD [RS_588]
                            PartitionCols:_col0
                            Group By Operator [GBY_587] (rows=316797606 width=88)
                              Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                            <-Reducer 24 [SIMPLE_EDGE]
                              SHUFFLE [RS_19]
                                PartitionCols:_col0
                                Group By Operator [GBY_18] (rows=633595212 width=88)
                                  Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col1
                                  Merge Join Operator [MERGEJOIN_501] (rows=633595212 width=88)
                                    Conds:RS_586._col0=RS_556._col0(Inner),Output:["_col1","_col2"]
                                  <-Map 26 [SIMPLE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_556]
                                      PartitionCols:_col0
                                      Select Operator [SEL_550] (rows=18262 width=1119)
                                        Output:["_col0"]
                                        Filter Operator [FIL_544] (rows=18262 width=1119)
                                          predicate:((d_qoy = 2) and (d_year = 2000) and d_date_sk is not null)
                                           Please refer to the previous TableScan [TS_11]
                                  <-Map 23 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_586]
                                      PartitionCols:_col0
                                      Select Operator [SEL_585] (rows=575995635 width=88)
                                        Output:["_col0","_col1","_col2"]
                                        Filter Operator [FIL_584] (rows=575995635 width=88)
                                          predicate:((ss_addr_sk BETWEEN DynamicValue(RS_22_customer_address_ca_address_sk_min) AND DynamicValue(RS_22_customer_address_ca_address_sk_max) and in_bloom_filter(ss_addr_sk, DynamicValue(RS_22_customer_address_ca_address_sk_bloom_filter))) and (ss_sold_date_sk BETWEEN DynamicValue(RS_15_date_dim_d_date_sk_min) AND DynamicValue(RS_15_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_15_date_dim_d_date_sk_bloom_filter))) and ss_addr_sk is not null and ss_sold_date_sk is not null)
                                          TableScan [TS_8] (rows=575995635 width=88)
                                            default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_date_sk","ss_addr_sk","ss_ext_sales_price"]
                                          <-Reducer 27 [BROADCAST_EDGE] vectorized
                                            BROADCAST [RS_581]
                                              Group By Operator [GBY_580] (rows=1 width=12)
                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                              <-Map 26 [CUSTOM_SIMPLE_EDGE] vectorized
                                                PARTITION_ONLY_SHUFFLE [RS_574]
                                                  Group By Operator [GBY_568] (rows=1 width=12)
                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                    Select Operator [SEL_557] (rows=18262 width=1119)
                                                      Output:["_col0"]
                                                       Please refer to the previous Select Operator [SEL_550]
                                          <-Reducer 6 [BROADCAST_EDGE] vectorized
                                            BROADCAST [RS_583]
                                              Group By Operator [GBY_582] (rows=1 width=16)
                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=20000000)"]
                                              <-Reducer 2 [CUSTOM_SIMPLE_EDGE] vectorized
                                                PARTITION_ONLY_SHUFFLE [RS_538]
                                                  Group By Operator [GBY_532] (rows=1 width=16)
                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=20000000)"]
                                                    Select Operator [SEL_521] (rows=20000000 width=1014)
                                                      Output:["_col0"]
                                                       Please refer to the previous Group By Operator [GBY_519]
            <-Reducer 8 [ONE_TO_ONE_EDGE] vectorized
              FORWARD [RS_601]
                PartitionCols:_col0
                Group By Operator [GBY_600] (rows=174238687 width=88)
                  Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                <-Reducer 7 [SIMPLE_EDGE]
                  SHUFFLE [RS_59]
                    PartitionCols:_col0
                    Group By Operator [GBY_58] (rows=348477374 width=88)
                      Output:["_col0","_col1"],aggregations:["sum(_col5)"],keys:_col1
                      Select Operator [SEL_56] (rows=348477374 width=88)
                        Output:["_col1","_col5"]
                        Merge Join Operator [MERGEJOIN_508] (rows=348477374 width=88)
                          Conds:RS_522._col0=RS_599._col0(Inner),Output:["_col1","_col2","_col4"]
                        <-Reducer 2 [SIMPLE_EDGE] vectorized
                          PARTITION_ONLY_SHUFFLE [RS_522]
                            PartitionCols:_col0
                             Please refer to the previous Group By Operator [GBY_519]
                        <-Reducer 29 [ONE_TO_ONE_EDGE] vectorized
                          FORWARD [RS_599]
                            PartitionCols:_col0
                            Group By Operator [GBY_598] (rows=316797606 width=88)
                              Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                            <-Reducer 28 [SIMPLE_EDGE]
                              SHUFFLE [RS_50]
                                PartitionCols:_col0
                                Group By Operator [GBY_49] (rows=633595212 width=88)
                                  Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col1
                                  Merge Join Operator [MERGEJOIN_502] (rows=633595212 width=88)
                                    Conds:RS_597._col0=RS_558._col0(Inner),Output:["_col1","_col2"]
                                  <-Map 26 [SIMPLE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_558]
                                      PartitionCols:_col0
                                      Select Operator [SEL_551] (rows=18262 width=1119)
                                        Output:["_col0"]
                                        Filter Operator [FIL_545] (rows=18262 width=1119)
                                          predicate:((d_qoy = 1) and (d_year = 2000) and d_date_sk is not null)
                                           Please refer to the previous TableScan [TS_11]
                                  <-Map 43 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_597]
                                      PartitionCols:_col0
                                      Select Operator [SEL_596] (rows=575995635 width=88)
                                        Output:["_col0","_col1","_col2"]
                                        Filter Operator [FIL_595] (rows=575995635 width=88)
                                          predicate:((ss_addr_sk BETWEEN DynamicValue(RS_53_customer_address_ca_address_sk_min) AND DynamicValue(RS_53_customer_address_ca_address_sk_max) and in_bloom_filter(ss_addr_sk, DynamicValue(RS_53_customer_address_ca_address_sk_bloom_filter))) and (ss_sold_date_sk BETWEEN DynamicValue(RS_46_date_dim_d_date_sk_min) AND DynamicValue(RS_46_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_46_date_dim_d_date_sk_bloom_filter))) and ss_addr_sk is not null and ss_sold_date_sk is not null)
                                          TableScan [TS_39] (rows=575995635 width=88)
                                            default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_date_sk","ss_addr_sk","ss_ext_sales_price"]
                                          <-Reducer 30 [BROADCAST_EDGE] vectorized
                                            BROADCAST [RS_592]
                                              Group By Operator [GBY_591] (rows=1 width=12)
                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                              <-Map 26 [CUSTOM_SIMPLE_EDGE] vectorized
                                                PARTITION_ONLY_SHUFFLE [RS_575]
                                                  Group By Operator [GBY_569] (rows=1 width=12)
                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                    Select Operator [SEL_559] (rows=18262 width=1119)
                                                      Output:["_col0"]
                                                       Please refer to the previous Select Operator [SEL_551]
                                          <-Reducer 9 [BROADCAST_EDGE] vectorized
                                            BROADCAST [RS_594]
                                              Group By Operator [GBY_593] (rows=1 width=16)
                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=20000000)"]
                                              <-Reducer 2 [CUSTOM_SIMPLE_EDGE] vectorized
                                                PARTITION_ONLY_SHUFFLE [RS_539]
                                                  Group By Operator [GBY_533] (rows=1 width=16)
                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=20000000)"]
                                                    Select Operator [SEL_523] (rows=20000000 width=1014)
                                                      Output:["_col0"]
                                                       Please refer to the previous Group By Operator [GBY_519]

