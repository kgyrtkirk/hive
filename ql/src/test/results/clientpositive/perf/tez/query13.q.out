PREHOOK: query: explain
select avg(ss_quantity)
       ,avg(ss_ext_sales_price)
       ,avg(ss_ext_wholesale_cost)
       ,sum(ss_ext_wholesale_cost)
 from store_sales
     ,store
     ,customer_demographics
     ,household_demographics
     ,customer_address
     ,date_dim
 where s_store_sk = ss_store_sk
 and  ss_sold_date_sk = d_date_sk and d_year = 2001
 and((ss_hdemo_sk=hd_demo_sk
  and cd_demo_sk = ss_cdemo_sk
  and cd_marital_status = 'M'
  and cd_education_status = '4 yr Degree'
  and ss_sales_price between 100.00 and 150.00
  and hd_dep_count = 3   
     )or
     (ss_hdemo_sk=hd_demo_sk
  and cd_demo_sk = ss_cdemo_sk
  and cd_marital_status = 'D'
  and cd_education_status = 'Primary'
  and ss_sales_price between 50.00 and 100.00   
  and hd_dep_count = 1
     ) or 
     (ss_hdemo_sk=hd_demo_sk
  and cd_demo_sk = ss_cdemo_sk
  and cd_marital_status = 'U'
  and cd_education_status = 'Advanced Degree'
  and ss_sales_price between 150.00 and 200.00 
  and hd_dep_count = 1  
     ))
 and((ss_addr_sk = ca_address_sk
  and ca_country = 'United States'
  and ca_state in ('KY', 'GA', 'NM')
  and ss_net_profit between 100 and 200  
     ) or
     (ss_addr_sk = ca_address_sk
  and ca_country = 'United States'
  and ca_state in ('MT', 'OR', 'IN')
  and ss_net_profit between 150 and 300  
     ) or
     (ss_addr_sk = ca_address_sk
  and ca_country = 'United States'
  and ca_state in ('WI', 'MO', 'WV')
  and ss_net_profit between 50 and 250  
     ))
PREHOOK: type: QUERY
POSTHOOK: query: explain
select avg(ss_quantity)
       ,avg(ss_ext_sales_price)
       ,avg(ss_ext_wholesale_cost)
       ,sum(ss_ext_wholesale_cost)
 from store_sales
     ,store
     ,customer_demographics
     ,household_demographics
     ,customer_address
     ,date_dim
 where s_store_sk = ss_store_sk
 and  ss_sold_date_sk = d_date_sk and d_year = 2001
 and((ss_hdemo_sk=hd_demo_sk
  and cd_demo_sk = ss_cdemo_sk
  and cd_marital_status = 'M'
  and cd_education_status = '4 yr Degree'
  and ss_sales_price between 100.00 and 150.00
  and hd_dep_count = 3   
     )or
     (ss_hdemo_sk=hd_demo_sk
  and cd_demo_sk = ss_cdemo_sk
  and cd_marital_status = 'D'
  and cd_education_status = 'Primary'
  and ss_sales_price between 50.00 and 100.00   
  and hd_dep_count = 1
     ) or 
     (ss_hdemo_sk=hd_demo_sk
  and cd_demo_sk = ss_cdemo_sk
  and cd_marital_status = 'U'
  and cd_education_status = 'Advanced Degree'
  and ss_sales_price between 150.00 and 200.00 
  and hd_dep_count = 1  
     ))
 and((ss_addr_sk = ca_address_sk
  and ca_country = 'United States'
  and ca_state in ('KY', 'GA', 'NM')
  and ss_net_profit between 100 and 200  
     ) or
     (ss_addr_sk = ca_address_sk
  and ca_country = 'United States'
  and ca_state in ('MT', 'OR', 'IN')
  and ss_net_profit between 150 and 300  
     ) or
     (ss_addr_sk = ca_address_sk
  and ca_country = 'United States'
  and ca_state in ('WI', 'MO', 'WV')
  and ss_net_profit between 50 and 250  
     ))
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Map 6 <- Reducer 13 (BROADCAST_EDGE), Reducer 15 (BROADCAST_EDGE), Reducer 17 (BROADCAST_EDGE), Reducer 19 (BROADCAST_EDGE), Reducer 5 (BROADCAST_EDGE)
Reducer 10 <- Map 18 (SIMPLE_EDGE), Reducer 9 (SIMPLE_EDGE)
Reducer 11 <- Reducer 10 (SIMPLE_EDGE)
Reducer 13 <- Map 12 (CUSTOM_SIMPLE_EDGE)
Reducer 15 <- Map 14 (CUSTOM_SIMPLE_EDGE)
Reducer 17 <- Map 16 (CUSTOM_SIMPLE_EDGE)
Reducer 19 <- Map 18 (CUSTOM_SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE)
Reducer 3 <- Reducer 11 (ONE_TO_ONE_EDGE), Reducer 2 (ONE_TO_ONE_EDGE)
Reducer 4 <- Reducer 3 (CUSTOM_SIMPLE_EDGE)
Reducer 5 <- Reducer 2 (CUSTOM_SIMPLE_EDGE)
Reducer 7 <- Map 12 (SIMPLE_EDGE), Map 6 (SIMPLE_EDGE)
Reducer 8 <- Map 14 (SIMPLE_EDGE), Reducer 7 (SIMPLE_EDGE)
Reducer 9 <- Map 16 (SIMPLE_EDGE), Reducer 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 4
      File Output Operator [FS_51]
        Select Operator [SEL_50] (rows=1 width=256)
          Output:["_col0","_col1","_col2","_col3"]
          Group By Operator [GBY_49] (rows=1 width=256)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(VALUE._col0)","$sum0(VALUE._col1)","sum(VALUE._col2)","$sum0(VALUE._col3)","sum(VALUE._col4)","$sum0(VALUE._col5)"]
          <-Reducer 3 [CUSTOM_SIMPLE_EDGE]
            PARTITION_ONLY_SHUFFLE [RS_48]
              Group By Operator [GBY_47] (rows=1 width=256)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(_col9)","$sum0(_col10)","sum(_col11)","$sum0(_col12)","sum(_col13)","$sum0(_col14)"]
                Select Operator [SEL_45] (rows=4033332 width=1014)
                  Output:["_col9","_col10","_col11","_col12","_col13","_col14"]
                  Merge Join Operator [MERGEJOIN_132] (rows=4033332 width=1014)
                    Conds:RS_138._col0=RS_180._col0(Inner),Output:["_col1","_col3","_col4","_col5","_col6","_col7","_col8"]
                  <-Reducer 2 [ONE_TO_ONE_EDGE] vectorized
                    PARTITION_ONLY_SHUFFLE [RS_138]
                      PartitionCols:_col0
                      Group By Operator [GBY_137] (rows=852 width=1910)
                        Output:["_col0","_col1"],aggregations:["count(VALUE._col0)"],keys:KEY._col0
                      <-Map 1 [SIMPLE_EDGE] vectorized
                        SHUFFLE [RS_136]
                          PartitionCols:_col0
                          Group By Operator [GBY_135] (rows=1704 width=1910)
                            Output:["_col0","_col1"],aggregations:["count()"],keys:_col0
                            Select Operator [SEL_134] (rows=1704 width=1910)
                              Output:["_col0"]
                              Filter Operator [FIL_133] (rows=1704 width=1910)
                                predicate:s_store_sk is not null
                                TableScan [TS_0] (rows=1704 width=1910)
                                  default@store,store,Tbl:COMPLETE,Col:NONE,Output:["s_store_sk"]
                  <-Reducer 11 [ONE_TO_ONE_EDGE] vectorized
                    FORWARD [RS_180]
                      PartitionCols:_col0
                      Group By Operator [GBY_179] (rows=3666666 width=1014)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)","sum(VALUE._col2)","count(VALUE._col3)","sum(VALUE._col4)","count(VALUE._col5)"],keys:KEY._col0
                      <-Reducer 10 [SIMPLE_EDGE]
                        SHUFFLE [RS_39]
                          PartitionCols:_col0
                          Group By Operator [GBY_38] (rows=7333332 width=1014)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col5)","count(_col5)","sum(_col7)","count(_col7)","sum(_col8)","count(_col8)"],keys:_col4
                            Select Operator [SEL_37] (rows=7333332 width=1014)
                              Output:["_col4","_col5","_col7","_col8"]
                              Filter Operator [FIL_36] (rows=7333332 width=1014)
                                predicate:((((_col18 = 'KY') or (_col18 = 'GA') or (_col18 = 'NM')) and _col9 BETWEEN 100 AND 200) or (((_col18 = 'MT') or (_col18 = 'OR') or (_col18 = 'IN')) and _col9 BETWEEN 150 AND 300) or (((_col18 = 'WI') or (_col18 = 'MO') or (_col18 = 'WV')) and _col9 BETWEEN 50 AND 250))
                                Merge Join Operator [MERGEJOIN_131] (rows=22000000 width=1014)
                                  Conds:RS_33._col3=RS_168._col0(Inner),Output:["_col4","_col5","_col7","_col8","_col9","_col18"]
                                <-Map 18 [SIMPLE_EDGE] vectorized
                                  PARTITION_ONLY_SHUFFLE [RS_168]
                                    PartitionCols:_col0
                                    Select Operator [SEL_167] (rows=20000000 width=1014)
                                      Output:["_col0","_col1"]
                                      Filter Operator [FIL_166] (rows=20000000 width=1014)
                                        predicate:((ca_country = 'United States') and ca_address_sk is not null)
                                        TableScan [TS_20] (rows=40000000 width=1014)
                                          default@customer_address,customer_address,Tbl:COMPLETE,Col:NONE,Output:["ca_address_sk","ca_state","ca_country"]
                                <-Reducer 9 [SIMPLE_EDGE]
                                  SHUFFLE [RS_33]
                                    PartitionCols:_col3
                                    Filter Operator [FIL_32] (rows=10647918 width=88)
                                      predicate:(((_col13 = 'D') and (_col14 = 'Primary') and _col6 BETWEEN 50 AND 100 and (_col16 = 1)) or ((_col13 = 'M') and (_col14 = '4 yr Degree') and _col6 BETWEEN 100 AND 150 and (_col16 = 3)) or ((_col13 = 'U') and (_col14 = 'Advanced Degree') and _col6 BETWEEN 150 AND 200 and (_col16 = 1)))
                                      Merge Join Operator [MERGEJOIN_130] (rows=255550079 width=88)
                                        Conds:RS_29._col2=RS_160._col0(Inner),Output:["_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col13","_col14","_col16"]
                                      <-Map 16 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_160]
                                          PartitionCols:_col0
                                          Select Operator [SEL_159] (rows=7200 width=107)
                                            Output:["_col0","_col1"]
                                            Filter Operator [FIL_158] (rows=7200 width=107)
                                              predicate:((hd_dep_count) IN (3, 1) and hd_demo_sk is not null)
                                              TableScan [TS_17] (rows=7200 width=107)
                                                default@household_demographics,household_demographics,Tbl:COMPLETE,Col:NONE,Output:["hd_demo_sk","hd_dep_count"]
                                      <-Reducer 8 [SIMPLE_EDGE]
                                        SHUFFLE [RS_29]
                                          PartitionCols:_col2
                                          Merge Join Operator [MERGEJOIN_129] (rows=232318249 width=88)
                                            Conds:RS_26._col1=RS_152._col0(Inner),Output:["_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col13","_col14"]
                                          <-Map 14 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_152]
                                              PartitionCols:_col0
                                              Select Operator [SEL_151] (rows=1861800 width=385)
                                                Output:["_col0","_col1","_col2"]
                                                Filter Operator [FIL_150] (rows=1861800 width=385)
                                                  predicate:((cd_education_status) IN ('4 yr Degree', 'Primary', 'Advanced Degree') and (cd_marital_status) IN ('M', 'D', 'U') and cd_demo_sk is not null)
                                                  TableScan [TS_14] (rows=1861800 width=385)
                                                    default@customer_demographics,customer_demographics,Tbl:COMPLETE,Col:NONE,Output:["cd_demo_sk","cd_marital_status","cd_education_status"]
                                          <-Reducer 7 [SIMPLE_EDGE]
                                            SHUFFLE [RS_26]
                                              PartitionCols:_col1
                                              Merge Join Operator [MERGEJOIN_128] (rows=211198404 width=88)
                                                Conds:RS_178._col0=RS_144._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9"]
                                              <-Map 12 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_144]
                                                  PartitionCols:_col0
                                                  Select Operator [SEL_143] (rows=36524 width=1119)
                                                    Output:["_col0"]
                                                    Filter Operator [FIL_142] (rows=36524 width=1119)
                                                      predicate:((d_year = 2001) and d_date_sk is not null)
                                                      TableScan [TS_11] (rows=73049 width=1119)
                                                        default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_year"]
                                              <-Map 6 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_178]
                                                  PartitionCols:_col0
                                                  Select Operator [SEL_177] (rows=191998545 width=88)
                                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9"]
                                                    Filter Operator [FIL_176] (rows=191998545 width=88)
                                                      predicate:((ss_addr_sk BETWEEN DynamicValue(RS_34_customer_address_ca_address_sk_min) AND DynamicValue(RS_34_customer_address_ca_address_sk_max) and in_bloom_filter(ss_addr_sk, DynamicValue(RS_34_customer_address_ca_address_sk_bloom_filter))) and (ss_cdemo_sk BETWEEN DynamicValue(RS_27_customer_demographics_cd_demo_sk_min) AND DynamicValue(RS_27_customer_demographics_cd_demo_sk_max) and in_bloom_filter(ss_cdemo_sk, DynamicValue(RS_27_customer_demographics_cd_demo_sk_bloom_filter))) and (ss_hdemo_sk BETWEEN DynamicValue(RS_30_household_demographics_hd_demo_sk_min) AND DynamicValue(RS_30_household_demographics_hd_demo_sk_max) and in_bloom_filter(ss_hdemo_sk, DynamicValue(RS_30_household_demographics_hd_demo_sk_bloom_filter))) and (ss_sales_price BETWEEN 100 AND 150 or ss_sales_price BETWEEN 50 AND 100 or ss_sales_price BETWEEN 150 AND 200) and (ss_sold_date_sk BETWEEN DynamicValue(RS_24_date_dim_d_date_sk_min) AND DynamicValue(RS_24_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_24_date_dim_d_date_sk_bloom_filter))) and (ss_store_sk BETWEEN DynamicValue(RS_42_store_s_store_sk_min) AND DynamicValue(RS_42_store_s_store_sk_max) and in_bloom_filter(ss_store_sk, DynamicValue(RS_42_store_s_store_sk_bloom_filter))) and ss_addr_sk is not null and ss_cdemo_sk is not null and ss_hdemo_sk is not null and ss_sold_date_sk is not null and ss_store_sk is not null)
                                                      TableScan [TS_8] (rows=575995635 width=88)
                                                        default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_date_sk","ss_cdemo_sk","ss_hdemo_sk","ss_addr_sk","ss_store_sk","ss_quantity","ss_sales_price","ss_ext_sales_price","ss_ext_wholesale_cost","ss_net_profit"]
                                                      <-Reducer 13 [BROADCAST_EDGE] vectorized
                                                        BROADCAST [RS_149]
                                                          Group By Operator [GBY_148] (rows=1 width=12)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                          <-Map 12 [CUSTOM_SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_147]
                                                              Group By Operator [GBY_146] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                Select Operator [SEL_145] (rows=36524 width=1119)
                                                                  Output:["_col0"]
                                                                   Please refer to the previous Select Operator [SEL_143]
                                                      <-Reducer 15 [BROADCAST_EDGE] vectorized
                                                        BROADCAST [RS_157]
                                                          Group By Operator [GBY_156] (rows=1 width=12)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1861800)"]
                                                          <-Map 14 [CUSTOM_SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_155]
                                                              Group By Operator [GBY_154] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1861800)"]
                                                                Select Operator [SEL_153] (rows=1861800 width=385)
                                                                  Output:["_col0"]
                                                                   Please refer to the previous Select Operator [SEL_151]
                                                      <-Reducer 17 [BROADCAST_EDGE] vectorized
                                                        BROADCAST [RS_165]
                                                          Group By Operator [GBY_164] (rows=1 width=12)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                          <-Map 16 [CUSTOM_SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_163]
                                                              Group By Operator [GBY_162] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                Select Operator [SEL_161] (rows=7200 width=107)
                                                                  Output:["_col0"]
                                                                   Please refer to the previous Select Operator [SEL_159]
                                                      <-Reducer 19 [BROADCAST_EDGE] vectorized
                                                        BROADCAST [RS_173]
                                                          Group By Operator [GBY_172] (rows=1 width=12)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=20000000)"]
                                                          <-Map 18 [CUSTOM_SIMPLE_EDGE] vectorized
                                                            PARTITION_ONLY_SHUFFLE [RS_171]
                                                              Group By Operator [GBY_170] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=20000000)"]
                                                                Select Operator [SEL_169] (rows=20000000 width=1014)
                                                                  Output:["_col0"]
                                                                   Please refer to the previous Select Operator [SEL_167]
                                                      <-Reducer 5 [BROADCAST_EDGE] vectorized
                                                        BROADCAST [RS_175]
                                                          Group By Operator [GBY_174] (rows=1 width=16)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                          <-Reducer 2 [CUSTOM_SIMPLE_EDGE] vectorized
                                                            PARTITION_ONLY_SHUFFLE [RS_141]
                                                              Group By Operator [GBY_140] (rows=1 width=16)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                Select Operator [SEL_139] (rows=852 width=1910)
                                                                  Output:["_col0"]
                                                                   Please refer to the previous Group By Operator [GBY_137]

