PREHOOK: query: explain
WITH web_v1 as (
select
  ws_item_sk item_sk, d_date,
  sum(sum(ws_sales_price))
      over (partition by ws_item_sk order by d_date rows between unbounded preceding and current row) cume_sales
from web_sales
    ,date_dim
where ws_sold_date_sk=d_date_sk
  and d_month_seq between 1212 and 1212+11
  and ws_item_sk is not NULL
group by ws_item_sk, d_date),
store_v1 as (
select
  ss_item_sk item_sk, d_date,
  sum(sum(ss_sales_price))
      over (partition by ss_item_sk order by d_date rows between unbounded preceding and current row) cume_sales
from store_sales
    ,date_dim
where ss_sold_date_sk=d_date_sk
  and d_month_seq between 1212 and 1212+11
  and ss_item_sk is not NULL
group by ss_item_sk, d_date)
 select  *
from (select item_sk
     ,d_date
     ,web_sales
     ,store_sales
     ,max(web_sales)
         over (partition by item_sk order by d_date rows between unbounded preceding and current row) web_cumulative
     ,max(store_sales)
         over (partition by item_sk order by d_date rows between unbounded preceding and current row) store_cumulative
     from (select case when web.item_sk is not null then web.item_sk else store.item_sk end item_sk
                 ,case when web.d_date is not null then web.d_date else store.d_date end d_date
                 ,web.cume_sales web_sales
                 ,store.cume_sales store_sales
           from web_v1 web full outer join store_v1 store on (web.item_sk = store.item_sk
                                                          and web.d_date = store.d_date)
          )x )y
where web_cumulative > store_cumulative
order by item_sk
        ,d_date
limit 100
PREHOOK: type: QUERY
POSTHOOK: query: explain
WITH web_v1 as (
select
  ws_item_sk item_sk, d_date,
  sum(sum(ws_sales_price))
      over (partition by ws_item_sk order by d_date rows between unbounded preceding and current row) cume_sales
from web_sales
    ,date_dim
where ws_sold_date_sk=d_date_sk
  and d_month_seq between 1212 and 1212+11
  and ws_item_sk is not NULL
group by ws_item_sk, d_date),
store_v1 as (
select
  ss_item_sk item_sk, d_date,
  sum(sum(ss_sales_price))
      over (partition by ss_item_sk order by d_date rows between unbounded preceding and current row) cume_sales
from store_sales
    ,date_dim
where ss_sold_date_sk=d_date_sk
  and d_month_seq between 1212 and 1212+11
  and ss_item_sk is not NULL
group by ss_item_sk, d_date)
 select  *
from (select item_sk
     ,d_date
     ,web_sales
     ,store_sales
     ,max(web_sales)
         over (partition by item_sk order by d_date rows between unbounded preceding and current row) web_cumulative
     ,max(store_sales)
         over (partition by item_sk order by d_date rows between unbounded preceding and current row) store_cumulative
     from (select case when web.item_sk is not null then web.item_sk else store.item_sk end item_sk
                 ,case when web.d_date is not null then web.d_date else store.d_date end d_date
                 ,web.cume_sales web_sales
                 ,store.cume_sales store_sales
           from web_v1 web full outer join store_v1 store on (web.item_sk = store.item_sk
                                                          and web.d_date = store.d_date)
          )x )y
where web_cumulative > store_cumulative
order by item_sk
        ,d_date
limit 100
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 10 (BROADCAST_EDGE)
Map 14 <- Reducer 13 (BROADCAST_EDGE)
Reducer 10 <- Reducer 9 (CUSTOM_SIMPLE_EDGE)
Reducer 11 <- Reducer 15 (SIMPLE_EDGE), Reducer 9 (SIMPLE_EDGE)
Reducer 12 <- Reducer 11 (SIMPLE_EDGE)
Reducer 13 <- Reducer 9 (CUSTOM_SIMPLE_EDGE)
Reducer 15 <- Map 14 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE)
Reducer 3 <- Reducer 2 (SIMPLE_EDGE), Reducer 9 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 12 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 6 (SIMPLE_EDGE)
Reducer 9 <- Map 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 7 vectorized
      File Output Operator [FS_148]
        Limit [LIM_147] (rows=100 width=88)
          Number of rows:100
          Select Operator [SEL_146] (rows=58079561 width=88)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
          <-Reducer 6 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_145]
              Select Operator [SEL_144] (rows=58079561 width=88)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                Filter Operator [FIL_143] (rows=58079561 width=88)
                  predicate:(max_window_0 > max_window_1)
                  PTF Operator [PTF_142] (rows=174238685 width=88)
                    Function definitions:[{},{"name:":"windowingtablefunction","order by:":"CASE WHEN (_col4 is not null) THEN (_col4) ELSE (_col1) END ASC NULLS LAST","partition by:":"CASE WHEN (_col3 is not null) THEN (_col3) ELSE (_col0) END"}]
                    Select Operator [SEL_141] (rows=174238685 width=88)
                      Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                    <-Reducer 5 [SIMPLE_EDGE]
                      SHUFFLE [RS_65]
                        PartitionCols:CASE WHEN (_col3 is not null) THEN (_col3) ELSE (_col0) END
                        Merge Join Operator [MERGEJOIN_109] (rows=174238685 width=88)
                          Conds:RS_62._col0, _col1=RS_63._col0, _col1(Outer),Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                        <-Reducer 12 [SIMPLE_EDGE]
                          SHUFFLE [RS_63]
                            PartitionCols:_col0, _col1
                            Select Operator [SEL_59] (rows=39600734 width=135)
                              Output:["_col0","_col1","_col2"]
                              PTF Operator [PTF_58] (rows=39600734 width=135)
                                Function definitions:[{},{"name:":"windowingtablefunction","order by:":"_col1 ASC NULLS LAST","partition by:":"_col0"}]
                                Group By Operator [GBY_54] (rows=39600734 width=135)
                                  Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1
                                <-Reducer 11 [SIMPLE_EDGE]
                                  SHUFFLE [RS_53]
                                    PartitionCols:_col0
                                    Group By Operator [GBY_52] (rows=79201469 width=135)
                                      Output:["_col0","_col1","_col2"],aggregations:["sum(_col6)"],keys:_col1, _col4
                                      Select Operator [SEL_50] (rows=79201469 width=135)
                                        Output:["_col1","_col4","_col6"]
                                        Merge Join Operator [MERGEJOIN_108] (rows=79201469 width=135)
                                          Conds:RS_139._col0=RS_117._col0(Inner),Output:["_col1","_col2","_col4","_col5"]
                                        <-Reducer 9 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_117]
                                            PartitionCols:_col0
                                            Group By Operator [GBY_114] (rows=36524 width=1119)
                                              Output:["_col0","_col1","_col2"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1
                                            <-Map 8 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_113]
                                                PartitionCols:_col0, _col1
                                                Group By Operator [GBY_112] (rows=73049 width=1119)
                                                  Output:["_col0","_col1","_col2"],aggregations:["count()"],keys:_col0, _col1
                                                  Select Operator [SEL_111] (rows=73049 width=1119)
                                                    Output:["_col0","_col1"]
                                                    Filter Operator [FIL_110] (rows=73049 width=1119)
                                                      predicate:(d_date_sk is not null and d_month_seq BETWEEN 1212 AND 1223)
                                                      TableScan [TS_8] (rows=73049 width=1119)
                                                        default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_date","d_month_seq"]
                                        <-Reducer 15 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_139]
                                            PartitionCols:_col0
                                            Group By Operator [GBY_138] (rows=72001334 width=135)
                                              Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1
                                            <-Map 14 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_137]
                                                PartitionCols:_col0, _col1
                                                Group By Operator [GBY_136] (rows=144002668 width=135)
                                                  Output:["_col0","_col1","_col2"],aggregations:["sum(_col2)"],keys:_col0, _col1
                                                  Select Operator [SEL_135] (rows=144002668 width=135)
                                                    Output:["_col0","_col1","_col2"]
                                                    Filter Operator [FIL_134] (rows=144002668 width=135)
                                                      predicate:((ws_sold_date_sk BETWEEN DynamicValue(RS_48_date_dim_d_date_sk_min) AND DynamicValue(RS_48_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_48_date_dim_d_date_sk_bloom_filter))) and ws_item_sk is not null and ws_sold_date_sk is not null)
                                                      TableScan [TS_31] (rows=144002668 width=135)
                                                        default@web_sales,web_sales,Tbl:COMPLETE,Col:NONE,Output:["ws_sold_date_sk","ws_item_sk","ws_sales_price"]
                                                      <-Reducer 13 [BROADCAST_EDGE] vectorized
                                                        BROADCAST [RS_133]
                                                          Group By Operator [GBY_132] (rows=1 width=16)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                          <-Reducer 9 [CUSTOM_SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_122]
                                                              Group By Operator [GBY_120] (rows=1 width=16)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                Select Operator [SEL_118] (rows=36524 width=1119)
                                                                  Output:["_col0"]
                                                                   Please refer to the previous Group By Operator [GBY_114]
                        <-Reducer 4 [SIMPLE_EDGE]
                          SHUFFLE [RS_62]
                            PartitionCols:_col0, _col1
                            Select Operator [SEL_28] (rows=158398802 width=88)
                              Output:["_col0","_col1","_col2"]
                              PTF Operator [PTF_27] (rows=158398802 width=88)
                                Function definitions:[{},{"name:":"windowingtablefunction","order by:":"_col1 ASC NULLS LAST","partition by:":"_col0"}]
                                Group By Operator [GBY_23] (rows=158398802 width=88)
                                  Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1
                                <-Reducer 3 [SIMPLE_EDGE]
                                  SHUFFLE [RS_22]
                                    PartitionCols:_col0
                                    Group By Operator [GBY_21] (rows=316797605 width=88)
                                      Output:["_col0","_col1","_col2"],aggregations:["sum(_col6)"],keys:_col1, _col4
                                      Select Operator [SEL_19] (rows=316797605 width=88)
                                        Output:["_col1","_col4","_col6"]
                                        Merge Join Operator [MERGEJOIN_107] (rows=316797605 width=88)
                                          Conds:RS_130._col0=RS_115._col0(Inner),Output:["_col1","_col2","_col4","_col5"]
                                        <-Reducer 9 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_115]
                                            PartitionCols:_col0
                                             Please refer to the previous Group By Operator [GBY_114]
                                        <-Reducer 2 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_130]
                                            PartitionCols:_col0
                                            Group By Operator [GBY_129] (rows=287997817 width=88)
                                              Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1
                                            <-Map 1 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_128]
                                                PartitionCols:_col0, _col1
                                                Group By Operator [GBY_127] (rows=575995635 width=88)
                                                  Output:["_col0","_col1","_col2"],aggregations:["sum(_col2)"],keys:_col0, _col1
                                                  Select Operator [SEL_126] (rows=575995635 width=88)
                                                    Output:["_col0","_col1","_col2"]
                                                    Filter Operator [FIL_125] (rows=575995635 width=88)
                                                      predicate:((ss_sold_date_sk BETWEEN DynamicValue(RS_17_date_dim_d_date_sk_min) AND DynamicValue(RS_17_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_17_date_dim_d_date_sk_bloom_filter))) and ss_item_sk is not null and ss_sold_date_sk is not null)
                                                      TableScan [TS_0] (rows=575995635 width=88)
                                                        default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_date_sk","ss_item_sk","ss_sales_price"]
                                                      <-Reducer 10 [BROADCAST_EDGE] vectorized
                                                        BROADCAST [RS_124]
                                                          Group By Operator [GBY_123] (rows=1 width=16)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                          <-Reducer 9 [CUSTOM_SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_121]
                                                              Group By Operator [GBY_119] (rows=1 width=16)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                Select Operator [SEL_116] (rows=36524 width=1119)
                                                                  Output:["_col0"]
                                                                   Please refer to the previous Group By Operator [GBY_114]

