Warning: Map Join MAPJOIN[191][bigTable=?] in task 'Reducer 22' is a cross product
PREHOOK: query: explain
select  a.ca_state state, count(*) cnt
 from customer_address a
     ,customer c
     ,store_sales s
     ,date_dim d
     ,item i
 where       a.ca_address_sk = c.c_current_addr_sk
 	and c.c_customer_sk = s.ss_customer_sk
 	and s.ss_sold_date_sk = d.d_date_sk
 	and s.ss_item_sk = i.i_item_sk
 	and d.d_month_seq = 
 	     (select distinct (d_month_seq)
 	      from date_dim
               where d_year = 2000
 	        and d_moy = 2 )
 	and i.i_current_price > 1.2 * 
             (select avg(j.i_current_price) 
 	     from item j 
 	     where j.i_category = i.i_category)
 group by a.ca_state
 having count(*) >= 10
 order by cnt 
 limit 100
PREHOOK: type: QUERY
POSTHOOK: query: explain
select  a.ca_state state, count(*) cnt
 from customer_address a
     ,customer c
     ,store_sales s
     ,date_dim d
     ,item i
 where       a.ca_address_sk = c.c_current_addr_sk
 	and c.c_customer_sk = s.ss_customer_sk
 	and s.ss_sold_date_sk = d.d_date_sk
 	and s.ss_item_sk = i.i_item_sk
 	and d.d_month_seq = 
 	     (select distinct (d_month_seq)
 	      from date_dim
               where d_year = 2000
 	        and d_moy = 2 )
 	and i.i_current_price > 1.2 * 
             (select avg(j.i_current_price) 
 	     from item j 
 	     where j.i_category = i.i_category)
 group by a.ca_state
 having count(*) >= 10
 order by cnt 
 limit 100
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Map 15 <- Reducer 10 (BROADCAST_EDGE), Reducer 19 (BROADCAST_EDGE), Reducer 25 (BROADCAST_EDGE)
Reducer 10 <- Reducer 2 (CUSTOM_SIMPLE_EDGE)
Reducer 12 <- Map 11 (SIMPLE_EDGE)
Reducer 13 <- Map 11 (SIMPLE_EDGE)
Reducer 14 <- Reducer 13 (CUSTOM_SIMPLE_EDGE)
Reducer 17 <- Map 16 (SIMPLE_EDGE), Map 20 (SIMPLE_EDGE)
Reducer 18 <- Reducer 17 (SIMPLE_EDGE)
Reducer 19 <- Reducer 18 (CUSTOM_SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Reducer 12 (ONE_TO_ONE_EDGE)
Reducer 22 <- Map 21 (SIMPLE_EDGE), Reducer 14 (BROADCAST_EDGE)
Reducer 23 <- Map 26 (SIMPLE_EDGE), Reducer 22 (SIMPLE_EDGE)
Reducer 24 <- Reducer 23 (SIMPLE_EDGE)
Reducer 25 <- Reducer 24 (CUSTOM_SIMPLE_EDGE)
Reducer 3 <- Map 15 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 18 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 24 (ONE_TO_ONE_EDGE), Reducer 6 (SIMPLE_EDGE)
Reducer 8 <- Reducer 7 (SIMPLE_EDGE)
Reducer 9 <- Reducer 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 9 vectorized
      File Output Operator [FS_257]
        Limit [LIM_256] (rows=100 width=88)
          Number of rows:100
          Select Operator [SEL_255] (rows=31943759 width=88)
            Output:["_col0","_col1"]
          <-Reducer 8 [SIMPLE_EDGE]
            SHUFFLE [RS_93]
              Filter Operator [FIL_91] (rows=31943759 width=88)
                predicate:(_col1 >= 10L)
                Group By Operator [GBY_90] (rows=95831279 width=88)
                  Output:["_col0","_col1"],aggregations:["$sum0(VALUE._col0)"],keys:KEY._col0
                <-Reducer 7 [SIMPLE_EDGE]
                  SHUFFLE [RS_89]
                    PartitionCols:_col0
                    Group By Operator [GBY_88] (rows=191662559 width=88)
                      Output:["_col0","_col1"],aggregations:["$sum0(_col5)"],keys:_col1
                      Select Operator [SEL_86] (rows=191662559 width=88)
                        Output:["_col1","_col5"]
                        Merge Join Operator [MERGEJOIN_194] (rows=191662559 width=88)
                          Conds:RS_83._col0=RS_243._col0(Inner),Output:["_col1","_col2","_col4"]
                        <-Reducer 24 [ONE_TO_ONE_EDGE] vectorized
                          FORWARD [RS_243]
                            PartitionCols:_col0
                            Group By Operator [GBY_242] (rows=84700 width=1436)
                              Output:["_col0","_col1"],aggregations:["count(VALUE._col0)"],keys:KEY._col0
                            <-Reducer 23 [SIMPLE_EDGE]
                              SHUFFLE [RS_80]
                                PartitionCols:_col0
                                Group By Operator [GBY_79] (rows=169400 width=1436)
                                  Output:["_col0","_col1"],aggregations:["count()"],keys:_col3
                                  Select Operator [SEL_78] (rows=169400 width=1436)
                                    Output:["_col3"]
                                    Filter Operator [FIL_77] (rows=169400 width=1436)
                                      predicate:(_col4 > (1.2 * CAST( _col0 AS decimal(16,6))))
                                      Merge Join Operator [MERGEJOIN_192] (rows=508200 width=1436)
                                        Conds:RS_238._col1=RS_241._col2(Inner),Output:["_col0","_col3","_col4"]
                                      <-Map 26 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_241]
                                          PartitionCols:_col2
                                          Select Operator [SEL_240] (rows=462000 width=1436)
                                            Output:["_col0","_col1","_col2"]
                                            Filter Operator [FIL_239] (rows=462000 width=1436)
                                              predicate:(i_category is not null and i_item_sk is not null)
                                              TableScan [TS_68] (rows=462000 width=1436)
                                                default@item,i,Tbl:COMPLETE,Col:NONE,Output:["i_item_sk","i_current_price","i_category"]
                                      <-Reducer 22 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_238]
                                          PartitionCols:_col1
                                          Map Join Operator [MAPJOIN_237] (rows=231000 width=1445)
                                            Conds:(Inner),Output:["_col0","_col1"]
                                          <-Reducer 14 [BROADCAST_EDGE] vectorized
                                            BROADCAST [RS_234]
                                              Select Operator [SEL_233] (rows=1 width=8)
                                                Filter Operator [FIL_232] (rows=1 width=8)
                                                  predicate:(sq_count_check(_col0) <= 1)
                                                  Group By Operator [GBY_231] (rows=1 width=8)
                                                    Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                                  <-Reducer 13 [CUSTOM_SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_230]
                                                      Group By Operator [GBY_229] (rows=1 width=8)
                                                        Output:["_col0"],aggregations:["count()"]
                                                        Select Operator [SEL_228] (rows=9131 width=1119)
                                                          Group By Operator [GBY_227] (rows=9131 width=1119)
                                                            Output:["_col0"],keys:KEY._col0
                                                          <-Map 11 [SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_206]
                                                              PartitionCols:_col0
                                                              Group By Operator [GBY_204] (rows=18262 width=1119)
                                                                Output:["_col0"],keys:d_month_seq
                                                                Select Operator [SEL_202] (rows=18262 width=1119)
                                                                  Output:["d_month_seq"]
                                                                  Filter Operator [FIL_200] (rows=18262 width=1119)
                                                                    predicate:((d_moy = 2) and (d_year = 2000))
                                                                    TableScan [TS_3] (rows=73049 width=1119)
                                                                      default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_month_seq","d_year","d_moy"]
                                          <-Select Operator [SEL_236] (rows=231000 width=1436)
                                              Output:["_col0","_col1"]
                                              Group By Operator [GBY_235] (rows=231000 width=1436)
                                                Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0
                                              <-Map 21 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_226]
                                                  PartitionCols:_col0
                                                  Group By Operator [GBY_225] (rows=462000 width=1436)
                                                    Output:["_col0","_col1","_col2"],aggregations:["sum(i_current_price)","count(i_current_price)"],keys:i_category
                                                    Filter Operator [FIL_224] (rows=462000 width=1436)
                                                      predicate:i_category is not null
                                                      TableScan [TS_47] (rows=462000 width=1436)
                                                        default@item,j,Tbl:COMPLETE,Col:NONE,Output:["i_current_price","i_category"]
                        <-Reducer 6 [SIMPLE_EDGE]
                          SHUFFLE [RS_83]
                            PartitionCols:_col0
                            Group By Operator [GBY_45] (rows=174238687 width=88)
                              Output:["_col0","_col1","_col2"],aggregations:["$sum0(VALUE._col0)"],keys:KEY._col0, KEY._col1
                            <-Reducer 5 [SIMPLE_EDGE]
                              SHUFFLE [RS_44]
                                PartitionCols:_col0, _col1
                                Group By Operator [GBY_43] (rows=348477374 width=88)
                                  Output:["_col0","_col1","_col2"],aggregations:["$sum0(_col6)"],keys:_col0, _col4
                                  Select Operator [SEL_41] (rows=348477374 width=88)
                                    Output:["_col0","_col4","_col6"]
                                    Merge Join Operator [MERGEJOIN_193] (rows=348477374 width=88)
                                      Conds:RS_254._col1=RS_218._col0(Inner),Output:["_col0","_col2","_col4","_col5"]
                                    <-Reducer 18 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_218]
                                        PartitionCols:_col0
                                        Group By Operator [GBY_217] (rows=44000000 width=860)
                                          Output:["_col0","_col1","_col2"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1
                                        <-Reducer 17 [SIMPLE_EDGE]
                                          SHUFFLE [RS_35]
                                            PartitionCols:_col0, _col1
                                            Group By Operator [GBY_34] (rows=88000001 width=860)
                                              Output:["_col0","_col1","_col2"],aggregations:["count()"],keys:_col0, _col3
                                              Merge Join Operator [MERGEJOIN_190] (rows=88000001 width=860)
                                                Conds:RS_213._col1=RS_216._col0(Inner),Output:["_col0","_col3"]
                                              <-Map 16 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_213]
                                                  PartitionCols:_col1
                                                  Select Operator [SEL_212] (rows=80000000 width=860)
                                                    Output:["_col0","_col1"]
                                                    Filter Operator [FIL_211] (rows=80000000 width=860)
                                                      predicate:(c_current_addr_sk is not null and c_customer_sk is not null)
                                                      TableScan [TS_24] (rows=80000000 width=860)
                                                        default@customer,c,Tbl:COMPLETE,Col:NONE,Output:["c_customer_sk","c_current_addr_sk"]
                                              <-Map 20 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_216]
                                                  PartitionCols:_col0
                                                  Select Operator [SEL_215] (rows=40000000 width=1014)
                                                    Output:["_col0","_col1"]
                                                    Filter Operator [FIL_214] (rows=40000000 width=1014)
                                                      predicate:ca_address_sk is not null
                                                      TableScan [TS_27] (rows=40000000 width=1014)
                                                        default@customer_address,a,Tbl:COMPLETE,Col:NONE,Output:["ca_address_sk","ca_state"]
                                    <-Reducer 4 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_254]
                                        PartitionCols:_col1
                                        Select Operator [SEL_253] (rows=316797606 width=88)
                                          Output:["_col0","_col1","_col2"]
                                          Group By Operator [GBY_252] (rows=316797606 width=88)
                                            Output:["_col0","_col1","_col2"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1
                                          <-Reducer 3 [SIMPLE_EDGE]
                                            SHUFFLE [RS_21]
                                              PartitionCols:_col0, _col1
                                              Group By Operator [GBY_20] (rows=633595212 width=88)
                                                Output:["_col0","_col1","_col2"],aggregations:["count()"],keys:_col5, _col4
                                                Merge Join Operator [MERGEJOIN_189] (rows=633595212 width=88)
                                                  Conds:RS_16._col0=RS_251._col0(Inner),Output:["_col4","_col5"]
                                                <-Reducer 2 [SIMPLE_EDGE]
                                                  SHUFFLE [RS_16]
                                                    PartitionCols:_col0
                                                    Merge Join Operator [MERGEJOIN_188] (rows=80353 width=1119)
                                                      Conds:RS_198._col1=RS_208._col0(Inner),Output:["_col0"]
                                                    <-Map 1 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_198]
                                                        PartitionCols:_col1
                                                        Select Operator [SEL_197] (rows=73049 width=1119)
                                                          Output:["_col0","_col1"]
                                                          Filter Operator [FIL_196] (rows=73049 width=1119)
                                                            predicate:(d_date_sk is not null and d_month_seq is not null)
                                                            TableScan [TS_0] (rows=73049 width=1119)
                                                              default@date_dim,d,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_month_seq"]
                                                    <-Reducer 12 [ONE_TO_ONE_EDGE] vectorized
                                                      FORWARD [RS_208]
                                                        PartitionCols:_col0
                                                        Group By Operator [GBY_207] (rows=9131 width=1119)
                                                          Output:["_col0"],keys:KEY._col0
                                                        <-Map 11 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_205]
                                                            PartitionCols:_col0
                                                            Group By Operator [GBY_203] (rows=18262 width=1119)
                                                              Output:["_col0"],keys:d_month_seq
                                                              Select Operator [SEL_201] (rows=18262 width=1119)
                                                                Output:["d_month_seq"]
                                                                Filter Operator [FIL_199] (rows=18262 width=1119)
                                                                  predicate:((d_moy = 2) and (d_year = 2000) and d_month_seq is not null)
                                                                   Please refer to the previous TableScan [TS_3]
                                                <-Map 15 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_251]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_250] (rows=575995635 width=88)
                                                      Output:["_col0","_col1","_col2"]
                                                      Filter Operator [FIL_249] (rows=575995635 width=88)
                                                        predicate:((ss_customer_sk BETWEEN DynamicValue(RS_39_c_c_customer_sk_min) AND DynamicValue(RS_39_c_c_customer_sk_max) and in_bloom_filter(ss_customer_sk, DynamicValue(RS_39_c_c_customer_sk_bloom_filter))) and (ss_item_sk BETWEEN DynamicValue(RS_84_i_i_item_sk_min) AND DynamicValue(RS_84_i_i_item_sk_max) and in_bloom_filter(ss_item_sk, DynamicValue(RS_84_i_i_item_sk_bloom_filter))) and (ss_sold_date_sk BETWEEN DynamicValue(RS_16_d_d_date_sk_min) AND DynamicValue(RS_16_d_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_16_d_d_date_sk_bloom_filter))) and ss_customer_sk is not null and ss_item_sk is not null and ss_sold_date_sk is not null)
                                                        TableScan [TS_10] (rows=575995635 width=88)
                                                          default@store_sales,s,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_date_sk","ss_item_sk","ss_customer_sk"]
                                                        <-Reducer 10 [BROADCAST_EDGE] vectorized
                                                          BROADCAST [RS_210]
                                                            Group By Operator [GBY_209] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                            <-Reducer 2 [CUSTOM_SIMPLE_EDGE]
                                                              SHUFFLE [RS_145]
                                                                Group By Operator [GBY_144] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                  Select Operator [SEL_143] (rows=80353 width=1119)
                                                                    Output:["_col0"]
                                                                     Please refer to the previous Merge Join Operator [MERGEJOIN_188]
                                                        <-Reducer 19 [BROADCAST_EDGE] vectorized
                                                          BROADCAST [RS_223]
                                                            Group By Operator [GBY_222] (rows=1 width=16)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=44000000)"]
                                                            <-Reducer 18 [CUSTOM_SIMPLE_EDGE] vectorized
                                                              SHUFFLE [RS_221]
                                                                Group By Operator [GBY_220] (rows=1 width=16)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=44000000)"]
                                                                  Select Operator [SEL_219] (rows=44000000 width=860)
                                                                    Output:["_col0"]
                                                                     Please refer to the previous Group By Operator [GBY_217]
                                                        <-Reducer 25 [BROADCAST_EDGE] vectorized
                                                          BROADCAST [RS_248]
                                                            Group By Operator [GBY_247] (rows=1 width=16)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                            <-Reducer 24 [CUSTOM_SIMPLE_EDGE] vectorized
                                                              FORWARD [RS_246]
                                                                Group By Operator [GBY_245] (rows=1 width=16)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                  Select Operator [SEL_244] (rows=84700 width=1436)
                                                                    Output:["_col0"]
                                                                     Please refer to the previous Group By Operator [GBY_242]

