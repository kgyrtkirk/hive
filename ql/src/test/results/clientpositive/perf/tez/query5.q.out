PREHOOK: query: explain
with ssr as
 (select s_store_id,
        sum(sales_price) as sales,
        sum(profit) as profit,
        sum(return_amt) as returns,
        sum(net_loss) as profit_loss
 from
  ( select  ss_store_sk as store_sk,
            ss_sold_date_sk  as date_sk,
            ss_ext_sales_price as sales_price,
            ss_net_profit as profit,
            cast(0 as decimal(7,2)) as return_amt,
            cast(0 as decimal(7,2)) as net_loss
    from store_sales
    union all
    select sr_store_sk as store_sk,
           sr_returned_date_sk as date_sk,
           cast(0 as decimal(7,2)) as sales_price,
           cast(0 as decimal(7,2)) as profit,
           sr_return_amt as return_amt,
           sr_net_loss as net_loss
    from store_returns
   ) salesreturns,
     date_dim,
     store
 where date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date) 
                  and (cast('1998-08-04' as date) +  14 days)
       and store_sk = s_store_sk
 group by s_store_id)
 ,
 csr as
 (select cp_catalog_page_id,
        sum(sales_price) as sales,
        sum(profit) as profit,
        sum(return_amt) as returns,
        sum(net_loss) as profit_loss
 from
  ( select  cs_catalog_page_sk as page_sk,
            cs_sold_date_sk  as date_sk,
            cs_ext_sales_price as sales_price,
            cs_net_profit as profit,
            cast(0 as decimal(7,2)) as return_amt,
            cast(0 as decimal(7,2)) as net_loss
    from catalog_sales
    union all
    select cr_catalog_page_sk as page_sk,
           cr_returned_date_sk as date_sk,
           cast(0 as decimal(7,2)) as sales_price,
           cast(0 as decimal(7,2)) as profit,
           cr_return_amount as return_amt,
           cr_net_loss as net_loss
    from catalog_returns
   ) salesreturns,
     date_dim,
     catalog_page
 where date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date)
                  and (cast('1998-08-04' as date) +  14 days)
       and page_sk = cp_catalog_page_sk
 group by cp_catalog_page_id)
 ,
 wsr as
 (select web_site_id,
        sum(sales_price) as sales,
        sum(profit) as profit,
        sum(return_amt) as returns,
        sum(net_loss) as profit_loss
 from
  ( select  ws_web_site_sk as wsr_web_site_sk,
            ws_sold_date_sk  as date_sk,
            ws_ext_sales_price as sales_price,
            ws_net_profit as profit,
            cast(0 as decimal(7,2)) as return_amt,
            cast(0 as decimal(7,2)) as net_loss
    from web_sales
    union all
    select ws_web_site_sk as wsr_web_site_sk,
           wr_returned_date_sk as date_sk,
           cast(0 as decimal(7,2)) as sales_price,
           cast(0 as decimal(7,2)) as profit,
           wr_return_amt as return_amt,
           wr_net_loss as net_loss
    from web_returns left outer join web_sales on
         ( wr_item_sk = ws_item_sk
           and wr_order_number = ws_order_number)
   ) salesreturns,
     date_dim,
     web_site
 where date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date)
                  and (cast('1998-08-04' as date) +  14 days)
       and wsr_web_site_sk = web_site_sk
 group by web_site_id)
  select  channel
        , id
        , sum(sales) as sales
        , sum(returns) as returns
        , sum(profit) as profit
 from 
 (select 'store channel' as channel
        , 'store' || s_store_id as id
        , sales
        , returns
        , (profit - profit_loss) as profit
 from   ssr
 union all
 select 'catalog channel' as channel
        , 'catalog_page' || cp_catalog_page_id as id
        , sales
        , returns
        , (profit - profit_loss) as profit
 from  csr
 union all
 select 'web channel' as channel
        , 'web_site' || web_site_id as id
        , sales
        , returns
        , (profit - profit_loss) as profit
 from   wsr
 ) x
 group by rollup (channel, id)
 order by channel
         ,id
 limit 100
PREHOOK: type: QUERY
POSTHOOK: query: explain
with ssr as
 (select s_store_id,
        sum(sales_price) as sales,
        sum(profit) as profit,
        sum(return_amt) as returns,
        sum(net_loss) as profit_loss
 from
  ( select  ss_store_sk as store_sk,
            ss_sold_date_sk  as date_sk,
            ss_ext_sales_price as sales_price,
            ss_net_profit as profit,
            cast(0 as decimal(7,2)) as return_amt,
            cast(0 as decimal(7,2)) as net_loss
    from store_sales
    union all
    select sr_store_sk as store_sk,
           sr_returned_date_sk as date_sk,
           cast(0 as decimal(7,2)) as sales_price,
           cast(0 as decimal(7,2)) as profit,
           sr_return_amt as return_amt,
           sr_net_loss as net_loss
    from store_returns
   ) salesreturns,
     date_dim,
     store
 where date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date) 
                  and (cast('1998-08-04' as date) +  14 days)
       and store_sk = s_store_sk
 group by s_store_id)
 ,
 csr as
 (select cp_catalog_page_id,
        sum(sales_price) as sales,
        sum(profit) as profit,
        sum(return_amt) as returns,
        sum(net_loss) as profit_loss
 from
  ( select  cs_catalog_page_sk as page_sk,
            cs_sold_date_sk  as date_sk,
            cs_ext_sales_price as sales_price,
            cs_net_profit as profit,
            cast(0 as decimal(7,2)) as return_amt,
            cast(0 as decimal(7,2)) as net_loss
    from catalog_sales
    union all
    select cr_catalog_page_sk as page_sk,
           cr_returned_date_sk as date_sk,
           cast(0 as decimal(7,2)) as sales_price,
           cast(0 as decimal(7,2)) as profit,
           cr_return_amount as return_amt,
           cr_net_loss as net_loss
    from catalog_returns
   ) salesreturns,
     date_dim,
     catalog_page
 where date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date)
                  and (cast('1998-08-04' as date) +  14 days)
       and page_sk = cp_catalog_page_sk
 group by cp_catalog_page_id)
 ,
 wsr as
 (select web_site_id,
        sum(sales_price) as sales,
        sum(profit) as profit,
        sum(return_amt) as returns,
        sum(net_loss) as profit_loss
 from
  ( select  ws_web_site_sk as wsr_web_site_sk,
            ws_sold_date_sk  as date_sk,
            ws_ext_sales_price as sales_price,
            ws_net_profit as profit,
            cast(0 as decimal(7,2)) as return_amt,
            cast(0 as decimal(7,2)) as net_loss
    from web_sales
    union all
    select ws_web_site_sk as wsr_web_site_sk,
           wr_returned_date_sk as date_sk,
           cast(0 as decimal(7,2)) as sales_price,
           cast(0 as decimal(7,2)) as profit,
           wr_return_amt as return_amt,
           wr_net_loss as net_loss
    from web_returns left outer join web_sales on
         ( wr_item_sk = ws_item_sk
           and wr_order_number = ws_order_number)
   ) salesreturns,
     date_dim,
     web_site
 where date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date)
                  and (cast('1998-08-04' as date) +  14 days)
       and wsr_web_site_sk = web_site_sk
 group by web_site_id)
  select  channel
        , id
        , sum(sales) as sales
        , sum(returns) as returns
        , sum(profit) as profit
 from 
 (select 'store channel' as channel
        , 'store' || s_store_id as id
        , sales
        , returns
        , (profit - profit_loss) as profit
 from   ssr
 union all
 select 'catalog channel' as channel
        , 'catalog_page' || cp_catalog_page_id as id
        , sales
        , returns
        , (profit - profit_loss) as profit
 from  csr
 union all
 select 'web channel' as channel
        , 'web_site' || web_site_id as id
        , sales
        , returns
        , (profit - profit_loss) as profit
 from   wsr
 ) x
 group by rollup (channel, id)
 order by channel
         ,id
 limit 100
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 14 (BROADCAST_EDGE), Reducer 27 (BROADCAST_EDGE), Union 2 (CONTAINS)
Map 11 <- Union 2 (CONTAINS)
Map 31 <- Reducer 19 (BROADCAST_EDGE), Reducer 30 (BROADCAST_EDGE), Union 32 (CONTAINS)
Map 34 <- Union 32 (CONTAINS)
Map 35 <- Reducer 24 (BROADCAST_EDGE), Reducer 45 (BROADCAST_EDGE), Union 36 (CONTAINS)
Map 38 <- Reducer 41 (BROADCAST_EDGE), Reducer 42 (BROADCAST_EDGE), Reducer 45 (BROADCAST_EDGE)
Reducer 10 <- Reducer 9 (SIMPLE_EDGE)
Reducer 13 <- Map 12 (SIMPLE_EDGE)
Reducer 14 <- Reducer 13 (CUSTOM_SIMPLE_EDGE)
Reducer 15 <- Reducer 13 (ONE_TO_ONE_EDGE), Reducer 33 (SIMPLE_EDGE)
Reducer 16 <- Reducer 15 (SIMPLE_EDGE)
Reducer 17 <- Reducer 16 (ONE_TO_ONE_EDGE), Reducer 29 (SIMPLE_EDGE)
Reducer 18 <- Reducer 17 (SIMPLE_EDGE), Union 8 (CONTAINS)
Reducer 19 <- Reducer 13 (CUSTOM_SIMPLE_EDGE)
Reducer 20 <- Reducer 13 (ONE_TO_ONE_EDGE), Reducer 37 (SIMPLE_EDGE)
Reducer 21 <- Reducer 20 (SIMPLE_EDGE)
Reducer 22 <- Reducer 21 (ONE_TO_ONE_EDGE), Reducer 44 (SIMPLE_EDGE)
Reducer 23 <- Reducer 22 (SIMPLE_EDGE), Union 8 (CONTAINS)
Reducer 24 <- Reducer 13 (CUSTOM_SIMPLE_EDGE)
Reducer 26 <- Map 25 (SIMPLE_EDGE)
Reducer 27 <- Reducer 26 (CUSTOM_SIMPLE_EDGE)
Reducer 29 <- Map 28 (SIMPLE_EDGE)
Reducer 3 <- Union 2 (SIMPLE_EDGE)
Reducer 30 <- Reducer 29 (CUSTOM_SIMPLE_EDGE)
Reducer 33 <- Union 32 (SIMPLE_EDGE)
Reducer 37 <- Union 36 (SIMPLE_EDGE)
Reducer 39 <- Map 38 (SIMPLE_EDGE), Map 40 (SIMPLE_EDGE), Union 36 (CONTAINS)
Reducer 4 <- Reducer 13 (ONE_TO_ONE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 41 <- Map 40 (CUSTOM_SIMPLE_EDGE)
Reducer 42 <- Map 40 (CUSTOM_SIMPLE_EDGE)
Reducer 44 <- Map 43 (SIMPLE_EDGE)
Reducer 45 <- Reducer 44 (CUSTOM_SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 26 (SIMPLE_EDGE), Reducer 5 (ONE_TO_ONE_EDGE)
Reducer 7 <- Reducer 6 (SIMPLE_EDGE), Union 8 (CONTAINS)
Reducer 9 <- Union 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 10 vectorized
      File Output Operator [FS_393]
        Limit [LIM_392] (rows=100 width=110)
          Number of rows:100
          Select Operator [SEL_391] (rows=284224722 width=110)
            Output:["_col0","_col1","_col2","_col3","_col4"]
          <-Reducer 9 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_390]
              Select Operator [SEL_389] (rows=284224722 width=110)
                Output:["_col0","_col1","_col2","_col3","_col4"]
                Group By Operator [GBY_388] (rows=284224722 width=110)
                  Output:["_col0","_col1","_col3","_col4","_col5"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)"],keys:KEY._col0, KEY._col1, KEY._col2
                <-Union 8 [SIMPLE_EDGE]
                  <-Reducer 18 [CONTAINS] vectorized
                    Reduce Output Operator [RS_416]
                      PartitionCols:_col0, _col1, _col2
                      Group By Operator [GBY_415] (rows=568449444 width=110)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(_col2)","sum(_col3)","sum(_col4)"],keys:_col0, _col1, 0L
                        Top N Key Operator [TNK_414] (rows=189483148 width=110)
                          keys:_col0, _col1, 0L,sort order:+++,top n:100
                          Select Operator [SEL_413] (rows=47914294 width=132)
                            Output:["_col0","_col1","_col2","_col3","_col4"]
                            Group By Operator [GBY_412] (rows=47914294 width=132)
                              Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)","sum(VALUE._col3)"],keys:KEY._col0
                            <-Reducer 17 [SIMPLE_EDGE]
                              SHUFFLE [RS_91]
                                PartitionCols:_col0
                                Group By Operator [GBY_90] (rows=95828589 width=132)
                                  Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col8)","sum(_col10)","sum(_col9)","sum(_col11)"],keys:_col1
                                  Select Operator [SEL_88] (rows=95828589 width=132)
                                    Output:["_col1","_col8","_col9","_col10","_col11"]
                                    Merge Join Operator [MERGEJOIN_288] (rows=95828589 width=132)
                                      Conds:RS_408._col0=RS_402._col0(Inner),Output:["_col1","_col2","_col4","_col5","_col6","_col7"]
                                    <-Reducer 29 [SIMPLE_EDGE] vectorized
                                      PARTITION_ONLY_SHUFFLE [RS_408]
                                        PartitionCols:_col0
                                        Group By Operator [GBY_407] (rows=23000 width=460)
                                          Output:["_col0","_col1","_col2"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1
                                        <-Map 28 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_406]
                                            PartitionCols:_col0, _col1
                                            Group By Operator [GBY_405] (rows=46000 width=460)
                                              Output:["_col0","_col1","_col2"],aggregations:["count()"],keys:_col0, _col1
                                              Select Operator [SEL_404] (rows=46000 width=460)
                                                Output:["_col0","_col1"]
                                                Filter Operator [FIL_403] (rows=46000 width=460)
                                                  predicate:cp_catalog_page_sk is not null
                                                  TableScan [TS_47] (rows=46000 width=460)
                                                    default@catalog_page,catalog_page,Tbl:COMPLETE,Col:NONE,Output:["cp_catalog_page_sk","cp_catalog_page_id"]
                                    <-Reducer 16 [ONE_TO_ONE_EDGE] vectorized
                                      FORWARD [RS_402]
                                        PartitionCols:_col0
                                        Group By Operator [GBY_401] (rows=87116898 width=132)
                                          Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)","sum(VALUE._col3)"],keys:KEY._col0
                                        <-Reducer 15 [SIMPLE_EDGE]
                                          SHUFFLE [RS_82]
                                            PartitionCols:_col0
                                            Group By Operator [GBY_81] (rows=174233797 width=132)
                                              Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col8)","sum(_col9)","sum(_col10)","sum(_col11)"],keys:_col0
                                              Select Operator [SEL_79] (rows=174233797 width=132)
                                                Output:["_col0","_col8","_col9","_col10","_col11"]
                                                Merge Join Operator [MERGEJOIN_287] (rows=174233797 width=132)
                                                  Conds:RS_400._col1=RS_351._col0(Inner),Output:["_col0","_col2","_col3","_col4","_col5","_col7"]
                                                <-Reducer 13 [ONE_TO_ONE_EDGE] vectorized
                                                  FORWARD [RS_351]
                                                    PartitionCols:_col0
                                                    Group By Operator [GBY_348] (rows=4058 width=1119)
                                                      Output:["_col0","_col1"],aggregations:["count(VALUE._col0)"],keys:KEY._col0
                                                    <-Map 12 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_347]
                                                        PartitionCols:_col0
                                                        Group By Operator [GBY_346] (rows=8116 width=1119)
                                                          Output:["_col0","_col1"],aggregations:["count()"],keys:_col0
                                                          Select Operator [SEL_345] (rows=8116 width=1119)
                                                            Output:["_col0"]
                                                            Filter Operator [FIL_344] (rows=8116 width=1119)
                                                              predicate:(CAST( d_date AS TIMESTAMP) BETWEEN TIMESTAMP'1998-08-04 00:00:00' AND TIMESTAMP'1998-08-18 00:00:00' and d_date_sk is not null)
                                                              TableScan [TS_13] (rows=73049 width=1119)
                                                                default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_date"]
                                                <-Reducer 33 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_400]
                                                    PartitionCols:_col1
                                                    Select Operator [SEL_399] (rows=158394358 width=132)
                                                      Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                                      Group By Operator [GBY_398] (rows=158394358 width=132)
                                                        Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)","sum(VALUE._col3)"],keys:KEY._col0, KEY._col1
                                                      <-Union 32 [SIMPLE_EDGE]
                                                        <-Map 31 [CONTAINS] vectorized
                                                          Reduce Output Operator [RS_443]
                                                            PartitionCols:_col0, _col1
                                                            Group By Operator [GBY_442] (rows=316788717 width=132)
                                                              Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(_col2)","sum(_col3)","sum(_col4)","sum(_col5)"],keys:_col1, _col0
                                                              Select Operator [SEL_441] (rows=287989836 width=135)
                                                                Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                                                Filter Operator [FIL_440] (rows=287989836 width=135)
                                                                  predicate:((cs_catalog_page_sk BETWEEN DynamicValue(RS_85_catalog_page_cp_catalog_page_sk_min) AND DynamicValue(RS_85_catalog_page_cp_catalog_page_sk_max) and in_bloom_filter(cs_catalog_page_sk, DynamicValue(RS_85_catalog_page_cp_catalog_page_sk_bloom_filter))) and (cs_sold_date_sk BETWEEN DynamicValue(RS_77_date_dim_d_date_sk_min) AND DynamicValue(RS_77_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_77_date_dim_d_date_sk_bloom_filter))) and cs_catalog_page_sk is not null and cs_sold_date_sk is not null)
                                                                  TableScan [TS_321] (rows=287989836 width=135)
                                                                    Output:["cs_sold_date_sk","cs_catalog_page_sk","cs_ext_sales_price","cs_net_profit"]
                                                                  <-Reducer 19 [BROADCAST_EDGE] vectorized
                                                                    BROADCAST [RS_437]
                                                                      Group By Operator [GBY_436] (rows=1 width=16)
                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                      <-Reducer 13 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                        FORWARD [RS_359]
                                                                          Group By Operator [GBY_356] (rows=1 width=16)
                                                                            Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                            Select Operator [SEL_352] (rows=4058 width=1119)
                                                                              Output:["_col0"]
                                                                               Please refer to the previous Group By Operator [GBY_348]
                                                                  <-Reducer 30 [BROADCAST_EDGE] vectorized
                                                                    BROADCAST [RS_439]
                                                                      Group By Operator [GBY_438] (rows=1 width=16)
                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                      <-Reducer 29 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                        PARTITION_ONLY_SHUFFLE [RS_411]
                                                                          Group By Operator [GBY_410] (rows=1 width=16)
                                                                            Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                            Select Operator [SEL_409] (rows=23000 width=460)
                                                                              Output:["_col0"]
                                                                               Please refer to the previous Group By Operator [GBY_407]
                                                        <-Map 34 [CONTAINS] vectorized
                                                          Reduce Output Operator [RS_447]
                                                            PartitionCols:_col0, _col1
                                                            Group By Operator [GBY_446] (rows=316788717 width=132)
                                                              Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(_col2)","sum(_col3)","sum(_col4)","sum(_col5)"],keys:_col1, _col0
                                                              Select Operator [SEL_445] (rows=28798881 width=106)
                                                                Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                                                Filter Operator [FIL_444] (rows=28798881 width=106)
                                                                  predicate:(cr_catalog_page_sk is not null and cr_returned_date_sk is not null)
                                                                  TableScan [TS_327] (rows=28798881 width=106)
                                                                    Output:["cr_returned_date_sk","cr_catalog_page_sk","cr_return_amount","cr_net_loss"]
                  <-Reducer 23 [CONTAINS] vectorized
                    Reduce Output Operator [RS_435]
                      PartitionCols:_col0, _col1, _col2
                      Group By Operator [GBY_434] (rows=568449444 width=110)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(_col2)","sum(_col3)","sum(_col4)"],keys:_col0, _col1, 0L
                        Top N Key Operator [TNK_433] (rows=189483148 width=110)
                          keys:_col0, _col1, 0L,sort order:+++,top n:100
                          Select Operator [SEL_432] (rows=45738849 width=135)
                            Output:["_col0","_col1","_col2","_col3","_col4"]
                            Group By Operator [GBY_431] (rows=45738849 width=135)
                              Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)","sum(VALUE._col3)"],keys:KEY._col0
                            <-Reducer 22 [SIMPLE_EDGE]
                              SHUFFLE [RS_146]
                                PartitionCols:_col0
                                Group By Operator [GBY_145] (rows=91477699 width=135)
                                  Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col8)","sum(_col10)","sum(_col9)","sum(_col11)"],keys:_col6
                                  Select Operator [SEL_143] (rows=91477699 width=135)
                                    Output:["_col6","_col8","_col9","_col10","_col11"]
                                    Merge Join Operator [MERGEJOIN_290] (rows=91477699 width=135)
                                      Conds:RS_421._col0=RS_427._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col6","_col7"]
                                    <-Reducer 44 [SIMPLE_EDGE] vectorized
                                      PARTITION_ONLY_SHUFFLE [RS_427]
                                        PartitionCols:_col0
                                        Group By Operator [GBY_426] (rows=42 width=1850)
                                          Output:["_col0","_col1","_col2"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1
                                        <-Map 43 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_425]
                                            PartitionCols:_col0, _col1
                                            Group By Operator [GBY_424] (rows=84 width=1850)
                                              Output:["_col0","_col1","_col2"],aggregations:["count()"],keys:_col0, _col1
                                              Select Operator [SEL_423] (rows=84 width=1850)
                                                Output:["_col0","_col1"]
                                                Filter Operator [FIL_422] (rows=84 width=1850)
                                                  predicate:web_site_sk is not null
                                                  TableScan [TS_132] (rows=84 width=1850)
                                                    default@web_site,web_site,Tbl:COMPLETE,Col:NONE,Output:["web_site_sk","web_site_id"]
                                    <-Reducer 21 [ONE_TO_ONE_EDGE] vectorized
                                      FORWARD [RS_421]
                                        PartitionCols:_col0
                                        Group By Operator [GBY_420] (rows=83161543 width=135)
                                          Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)","sum(VALUE._col3)"],keys:KEY._col0
                                        <-Reducer 20 [SIMPLE_EDGE]
                                          SHUFFLE [RS_129]
                                            PartitionCols:_col0
                                            Group By Operator [GBY_128] (rows=166323086 width=135)
                                              Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col8)","sum(_col9)","sum(_col10)","sum(_col11)"],keys:_col0
                                              Select Operator [SEL_126] (rows=166323086 width=135)
                                                Output:["_col0","_col8","_col9","_col10","_col11"]
                                                Merge Join Operator [MERGEJOIN_289] (rows=166323086 width=135)
                                                  Conds:RS_419._col1=RS_353._col0(Inner),Output:["_col0","_col2","_col3","_col4","_col5","_col7"]
                                                <-Reducer 13 [ONE_TO_ONE_EDGE] vectorized
                                                  FORWARD [RS_353]
                                                    PartitionCols:_col0
                                                     Please refer to the previous Group By Operator [GBY_348]
                                                <-Reducer 37 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_419]
                                                    PartitionCols:_col1
                                                    Select Operator [SEL_418] (rows=151202803 width=135)
                                                      Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                                      Group By Operator [GBY_417] (rows=151202803 width=135)
                                                        Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)","sum(VALUE._col3)"],keys:KEY._col0, KEY._col1
                                                      <-Union 36 [SIMPLE_EDGE]
                                                        <-Map 35 [CONTAINS] vectorized
                                                          Reduce Output Operator [RS_456]
                                                            PartitionCols:_col0, _col1
                                                            Group By Operator [GBY_455] (rows=302405606 width=135)
                                                              Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(_col2)","sum(_col3)","sum(_col4)","sum(_col5)"],keys:_col1, _col0
                                                              Select Operator [SEL_454] (rows=144002668 width=135)
                                                                Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                                                Filter Operator [FIL_453] (rows=144002668 width=135)
                                                                  predicate:((ws_sold_date_sk BETWEEN DynamicValue(RS_124_date_dim_d_date_sk_min) AND DynamicValue(RS_124_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_124_date_dim_d_date_sk_bloom_filter))) and (ws_web_site_sk BETWEEN DynamicValue(RS_141_web_site_web_site_sk_min) AND DynamicValue(RS_141_web_site_web_site_sk_max) and in_bloom_filter(ws_web_site_sk, DynamicValue(RS_141_web_site_web_site_sk_bloom_filter))) and ws_sold_date_sk is not null and ws_web_site_sk is not null)
                                                                  TableScan [TS_333] (rows=144002668 width=135)
                                                                    Output:["ws_sold_date_sk","ws_web_site_sk","ws_ext_sales_price","ws_net_profit"]
                                                                  <-Reducer 45 [BROADCAST_EDGE] vectorized
                                                                    BROADCAST [RS_451]
                                                                      Group By Operator [GBY_450] (rows=1 width=16)
                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                      <-Reducer 44 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                        PARTITION_ONLY_SHUFFLE [RS_430]
                                                                          Group By Operator [GBY_429] (rows=1 width=16)
                                                                            Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                            Select Operator [SEL_428] (rows=42 width=1850)
                                                                              Output:["_col0"]
                                                                               Please refer to the previous Group By Operator [GBY_426]
                                                                  <-Reducer 24 [BROADCAST_EDGE] vectorized
                                                                    BROADCAST [RS_449]
                                                                      Group By Operator [GBY_448] (rows=1 width=16)
                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                      <-Reducer 13 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                        FORWARD [RS_360]
                                                                          Group By Operator [GBY_357] (rows=1 width=16)
                                                                            Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                            Select Operator [SEL_354] (rows=4058 width=1119)
                                                                              Output:["_col0"]
                                                                               Please refer to the previous Group By Operator [GBY_348]
                                                        <-Reducer 39 [CONTAINS]
                                                          Reduce Output Operator [RS_343]
                                                            PartitionCols:_col0, _col1
                                                            Group By Operator [GBY_342] (rows=302405606 width=135)
                                                              Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(_col2)","sum(_col3)","sum(_col4)","sum(_col5)"],keys:_col1, _col0
                                                              Select Operator [SEL_340] (rows=158402938 width=135)
                                                                Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                                                Merge Join Operator [MERGEJOIN_339] (rows=158402938 width=135)
                                                                  Conds:RS_472._col0, _col2=RS_459._col1, _col2(Inner),Output:["_col1","_col3","_col6","_col7"]
                                                                <-Map 40 [SIMPLE_EDGE] vectorized
                                                                  PARTITION_ONLY_SHUFFLE [RS_459]
                                                                    PartitionCols:_col1, _col2
                                                                    Select Operator [SEL_458] (rows=14398467 width=92)
                                                                      Output:["_col0","_col1","_col2","_col3","_col4"]
                                                                      Filter Operator [FIL_457] (rows=14398467 width=92)
                                                                        predicate:(wr_item_sk is not null and wr_order_number is not null and wr_returned_date_sk is not null)
                                                                        TableScan [TS_101] (rows=14398467 width=92)
                                                                          default@web_returns,web_returns,Tbl:COMPLETE,Col:NONE,Output:["wr_returned_date_sk","wr_item_sk","wr_order_number","wr_return_amt","wr_net_loss"]
                                                                <-Map 38 [SIMPLE_EDGE] vectorized
                                                                  SHUFFLE [RS_472]
                                                                    PartitionCols:_col0, _col2
                                                                    Select Operator [SEL_471] (rows=144002668 width=135)
                                                                      Output:["_col0","_col1","_col2"]
                                                                      Filter Operator [FIL_470] (rows=144002668 width=135)
                                                                        predicate:((ws_item_sk BETWEEN DynamicValue(RS_105_web_returns_wr_item_sk_min) AND DynamicValue(RS_105_web_returns_wr_item_sk_max) and in_bloom_filter(ws_item_sk, DynamicValue(RS_105_web_returns_wr_item_sk_bloom_filter))) and (ws_order_number BETWEEN DynamicValue(RS_105_web_returns_wr_order_number_min) AND DynamicValue(RS_105_web_returns_wr_order_number_max) and in_bloom_filter(ws_order_number, DynamicValue(RS_105_web_returns_wr_order_number_bloom_filter))) and (ws_web_site_sk BETWEEN DynamicValue(RS_141_web_site_web_site_sk_min) AND DynamicValue(RS_141_web_site_web_site_sk_max) and in_bloom_filter(ws_web_site_sk, DynamicValue(RS_141_web_site_web_site_sk_bloom_filter))) and ws_item_sk is not null and ws_order_number is not null and ws_web_site_sk is not null)
                                                                        TableScan [TS_98] (rows=144002668 width=135)
                                                                          default@web_sales,web_sales,Tbl:COMPLETE,Col:NONE,Output:["ws_item_sk","ws_web_site_sk","ws_order_number"]
                                                                        <-Reducer 45 [BROADCAST_EDGE] vectorized
                                                                          BROADCAST [RS_452]
                                                                             Please refer to the previous Group By Operator [GBY_450]
                                                                        <-Reducer 41 [BROADCAST_EDGE] vectorized
                                                                          BROADCAST [RS_467]
                                                                            Group By Operator [GBY_466] (rows=1 width=12)
                                                                              Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=14398467)"]
                                                                            <-Map 40 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                              PARTITION_ONLY_SHUFFLE [RS_464]
                                                                                Group By Operator [GBY_462] (rows=1 width=12)
                                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=14398467)"]
                                                                                  Select Operator [SEL_460] (rows=14398467 width=92)
                                                                                    Output:["_col0"]
                                                                                     Please refer to the previous Select Operator [SEL_458]
                                                                        <-Reducer 42 [BROADCAST_EDGE] vectorized
                                                                          BROADCAST [RS_469]
                                                                            Group By Operator [GBY_468] (rows=1 width=12)
                                                                              Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=14398467)"]
                                                                            <-Map 40 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                              PARTITION_ONLY_SHUFFLE [RS_465]
                                                                                Group By Operator [GBY_463] (rows=1 width=12)
                                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=14398467)"]
                                                                                  Select Operator [SEL_461] (rows=14398467 width=92)
                                                                                    Output:["_col0"]
                                                                                     Please refer to the previous Select Operator [SEL_458]
                  <-Reducer 7 [CONTAINS] vectorized
                    Reduce Output Operator [RS_387]
                      PartitionCols:_col0, _col1, _col2
                      Group By Operator [GBY_386] (rows=568449444 width=110)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(_col2)","sum(_col3)","sum(_col4)"],keys:_col0, _col1, 0L
                        Top N Key Operator [TNK_385] (rows=189483148 width=110)
                          keys:_col0, _col1, 0L,sort order:+++,top n:100
                          Select Operator [SEL_384] (rows=95830005 width=87)
                            Output:["_col0","_col1","_col2","_col3","_col4"]
                            Group By Operator [GBY_383] (rows=95830005 width=87)
                              Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)","sum(VALUE._col3)"],keys:KEY._col0
                            <-Reducer 6 [SIMPLE_EDGE]
                              SHUFFLE [RS_44]
                                PartitionCols:_col0
                                Group By Operator [GBY_43] (rows=191660010 width=87)
                                  Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col8)","sum(_col10)","sum(_col9)","sum(_col11)"],keys:_col6
                                  Select Operator [SEL_41] (rows=191660010 width=87)
                                    Output:["_col6","_col8","_col9","_col10","_col11"]
                                    Merge Join Operator [MERGEJOIN_286] (rows=191660010 width=87)
                                      Conds:RS_382._col0=RS_368._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col6","_col7"]
                                    <-Reducer 26 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_368]
                                        PartitionCols:_col0
                                        Group By Operator [GBY_367] (rows=852 width=1910)
                                          Output:["_col0","_col1","_col2"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1
                                        <-Map 25 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_366]
                                            PartitionCols:_col0, _col1
                                            Group By Operator [GBY_365] (rows=1704 width=1910)
                                              Output:["_col0","_col1","_col2"],aggregations:["count()"],keys:_col0, _col1
                                              Select Operator [SEL_364] (rows=1704 width=1910)
                                                Output:["_col0","_col1"]
                                                Filter Operator [FIL_363] (rows=1704 width=1910)
                                                  predicate:s_store_sk is not null
                                                  TableScan [TS_30] (rows=1704 width=1910)
                                                    default@store,store,Tbl:COMPLETE,Col:NONE,Output:["s_store_sk","s_store_id"]
                                    <-Reducer 5 [ONE_TO_ONE_EDGE] vectorized
                                      FORWARD [RS_382]
                                        PartitionCols:_col0
                                        Group By Operator [GBY_381] (rows=174236369 width=87)
                                          Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)","sum(VALUE._col3)"],keys:KEY._col0
                                        <-Reducer 4 [SIMPLE_EDGE]
                                          SHUFFLE [RS_27]
                                            PartitionCols:_col0
                                            Group By Operator [GBY_26] (rows=348472738 width=87)
                                              Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col8)","sum(_col9)","sum(_col10)","sum(_col11)"],keys:_col0
                                              Select Operator [SEL_24] (rows=348472738 width=87)
                                                Output:["_col0","_col8","_col9","_col10","_col11"]
                                                Merge Join Operator [MERGEJOIN_285] (rows=348472738 width=87)
                                                  Conds:RS_380._col1=RS_349._col0(Inner),Output:["_col0","_col2","_col3","_col4","_col5","_col7"]
                                                <-Reducer 13 [ONE_TO_ONE_EDGE] vectorized
                                                  FORWARD [RS_349]
                                                    PartitionCols:_col0
                                                     Please refer to the previous Group By Operator [GBY_348]
                                                <-Reducer 3 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_380]
                                                    PartitionCols:_col1
                                                    Select Operator [SEL_379] (rows=316793392 width=87)
                                                      Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                                      Group By Operator [GBY_378] (rows=316793392 width=87)
                                                        Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)","sum(VALUE._col3)"],keys:KEY._col0, KEY._col1
                                                      <-Union 2 [SIMPLE_EDGE]
                                                        <-Map 1 [CONTAINS] vectorized
                                                          Reduce Output Operator [RS_377]
                                                            PartitionCols:_col0, _col1
                                                            Group By Operator [GBY_376] (rows=633586785 width=87)
                                                              Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(_col2)","sum(_col3)","sum(_col4)","sum(_col5)"],keys:_col1, _col0
                                                              Select Operator [SEL_375] (rows=575995635 width=88)
                                                                Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                                                Filter Operator [FIL_374] (rows=575995635 width=88)
                                                                  predicate:((ss_sold_date_sk BETWEEN DynamicValue(RS_22_date_dim_d_date_sk_min) AND DynamicValue(RS_22_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_22_date_dim_d_date_sk_bloom_filter))) and (ss_store_sk BETWEEN DynamicValue(RS_39_store_s_store_sk_min) AND DynamicValue(RS_39_store_s_store_sk_max) and in_bloom_filter(ss_store_sk, DynamicValue(RS_39_store_s_store_sk_bloom_filter))) and ss_sold_date_sk is not null and ss_store_sk is not null)
                                                                  TableScan [TS_291] (rows=575995635 width=88)
                                                                    Output:["ss_sold_date_sk","ss_store_sk","ss_ext_sales_price","ss_net_profit"]
                                                                  <-Reducer 14 [BROADCAST_EDGE] vectorized
                                                                    BROADCAST [RS_362]
                                                                      Group By Operator [GBY_361] (rows=1 width=16)
                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                      <-Reducer 13 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                        FORWARD [RS_358]
                                                                          Group By Operator [GBY_355] (rows=1 width=16)
                                                                            Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                            Select Operator [SEL_350] (rows=4058 width=1119)
                                                                              Output:["_col0"]
                                                                               Please refer to the previous Group By Operator [GBY_348]
                                                                  <-Reducer 27 [BROADCAST_EDGE] vectorized
                                                                    BROADCAST [RS_373]
                                                                      Group By Operator [GBY_372] (rows=1 width=16)
                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                      <-Reducer 26 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                        SHUFFLE [RS_371]
                                                                          Group By Operator [GBY_370] (rows=1 width=16)
                                                                            Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                            Select Operator [SEL_369] (rows=852 width=1910)
                                                                              Output:["_col0"]
                                                                               Please refer to the previous Group By Operator [GBY_367]
                                                        <-Map 11 [CONTAINS] vectorized
                                                          Reduce Output Operator [RS_397]
                                                            PartitionCols:_col0, _col1
                                                            Group By Operator [GBY_396] (rows=633586785 width=87)
                                                              Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(_col2)","sum(_col3)","sum(_col4)","sum(_col5)"],keys:_col1, _col0
                                                              Select Operator [SEL_395] (rows=57591150 width=77)
                                                                Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                                                Filter Operator [FIL_394] (rows=57591150 width=77)
                                                                  predicate:(sr_returned_date_sk is not null and sr_store_sk is not null)
                                                                  TableScan [TS_303] (rows=57591150 width=77)
                                                                    Output:["sr_returned_date_sk","sr_store_sk","sr_return_amt","sr_net_loss"]

