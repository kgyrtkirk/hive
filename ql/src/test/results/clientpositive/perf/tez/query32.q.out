PREHOOK: query: explain
select  sum(cs_ext_discount_amt)  as `excess discount amount` 
from 
   catalog_sales 
   ,item 
   ,date_dim
where
i_manufact_id = 269
and i_item_sk = cs_item_sk 
and d_date between '1998-03-18' and 
        (cast('1998-03-18' as date) + 90 days)
and d_date_sk = cs_sold_date_sk 
and cs_ext_discount_amt  
     > ( 
         select 
            1.3 * avg(cs_ext_discount_amt) 
         from 
            catalog_sales 
           ,date_dim
         where 
              cs_item_sk = i_item_sk 
          and d_date between '1998-03-18' and
                             (cast('1998-03-18' as date) + 90 days)
          and d_date_sk = cs_sold_date_sk 
      ) 
limit 100
PREHOOK: type: QUERY
POSTHOOK: query: explain
select  sum(cs_ext_discount_amt)  as `excess discount amount` 
from 
   catalog_sales 
   ,item 
   ,date_dim
where
i_manufact_id = 269
and i_item_sk = cs_item_sk 
and d_date between '1998-03-18' and 
        (cast('1998-03-18' as date) + 90 days)
and d_date_sk = cs_sold_date_sk 
and cs_ext_discount_amt  
     > ( 
         select 
            1.3 * avg(cs_ext_discount_amt) 
         from 
            catalog_sales 
           ,date_dim
         where 
              cs_item_sk = i_item_sk 
          and d_date between '1998-03-18' and
                             (cast('1998-03-18' as date) + 90 days)
          and d_date_sk = cs_sold_date_sk 
      ) 
limit 100
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 11 (BROADCAST_EDGE), Reducer 16 (BROADCAST_EDGE), Reducer 6 (BROADCAST_EDGE)
Map 13 <- Reducer 12 (BROADCAST_EDGE), Reducer 16 (BROADCAST_EDGE)
Reducer 10 <- Map 15 (SIMPLE_EDGE), Reducer 9 (ONE_TO_ONE_EDGE)
Reducer 11 <- Reducer 9 (CUSTOM_SIMPLE_EDGE)
Reducer 12 <- Reducer 7 (CUSTOM_SIMPLE_EDGE)
Reducer 14 <- Map 13 (SIMPLE_EDGE)
Reducer 16 <- Map 15 (CUSTOM_SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 5 (SIMPLE_EDGE)
Reducer 3 <- Reducer 10 (ONE_TO_ONE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (CUSTOM_SIMPLE_EDGE)
Reducer 6 <- Map 5 (CUSTOM_SIMPLE_EDGE)
Reducer 7 <- Map 5 (SIMPLE_EDGE)
Reducer 8 <- Reducer 14 (SIMPLE_EDGE), Reducer 7 (ONE_TO_ONE_EDGE)
Reducer 9 <- Reducer 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 4 vectorized
      File Output Operator [FS_155]
        Limit [LIM_154] (rows=1 width=112)
          Number of rows:100
          Group By Operator [GBY_153] (rows=1 width=112)
            Output:["_col0"],aggregations:["sum(VALUE._col0)"]
          <-Reducer 3 [CUSTOM_SIMPLE_EDGE]
            PARTITION_ONLY_SHUFFLE [RS_47]
              Group By Operator [GBY_46] (rows=1 width=112)
                Output:["_col0"],aggregations:["sum(_col2)"]
                Select Operator [SEL_45] (rows=116155905 width=135)
                  Output:["_col2"]
                  Filter Operator [FIL_44] (rows=116155905 width=135)
                    predicate:(_col2 > CAST( (1.3 * _col6) AS decimal(14,7)))
                    Merge Join Operator [MERGEJOIN_115] (rows=348467716 width=135)
                      Conds:RS_41._col1=RS_42._col2(Inner),Output:["_col2","_col6"]
                    <-Reducer 10 [ONE_TO_ONE_EDGE]
                      FORWARD [RS_42]
                        PartitionCols:_col2
                        Merge Join Operator [MERGEJOIN_114] (rows=87116928 width=135)
                          Conds:RS_34._col0=RS_128._col0(Inner),Output:["_col1","_col2"]
                        <-Map 15 [SIMPLE_EDGE] vectorized
                          PARTITION_ONLY_SHUFFLE [RS_128]
                            PartitionCols:_col0
                            Select Operator [SEL_127] (rows=231000 width=1436)
                              Output:["_col0"]
                              Filter Operator [FIL_126] (rows=231000 width=1436)
                                predicate:((i_manufact_id = 269) and i_item_sk is not null)
                                TableScan [TS_31] (rows=462000 width=1436)
                                  default@item,item,Tbl:COMPLETE,Col:NONE,Output:["i_item_sk","i_manufact_id"]
                        <-Reducer 9 [ONE_TO_ONE_EDGE]
                          PARTITION_ONLY_SHUFFLE [RS_34]
                            PartitionCols:_col0
                            Select Operator [SEL_30] (rows=79197206 width=135)
                              Output:["_col0","_col1"]
                              Group By Operator [GBY_29] (rows=79197206 width=135)
                                Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)","$sum0(VALUE._col1)"],keys:KEY._col0
                              <-Reducer 8 [SIMPLE_EDGE]
                                SHUFFLE [RS_28]
                                  PartitionCols:_col0
                                  Group By Operator [GBY_27] (rows=158394413 width=135)
                                    Output:["_col0","_col1","_col2"],aggregations:["sum(_col6)","$sum0(_col7)"],keys:_col1
                                    Select Operator [SEL_25] (rows=158394413 width=135)
                                      Output:["_col1","_col6","_col7"]
                                      Merge Join Operator [MERGEJOIN_113] (rows=158394413 width=135)
                                        Conds:RS_147._col0=RS_136._col0(Inner),Output:["_col1","_col2","_col3","_col5"]
                                      <-Reducer 7 [ONE_TO_ONE_EDGE] vectorized
                                        FORWARD [RS_136]
                                          PartitionCols:_col0
                                          Group By Operator [GBY_135] (rows=4058 width=1119)
                                            Output:["_col0","_col1"],aggregations:["count(VALUE._col0)"],keys:KEY._col0
                                          <-Map 5 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_122]
                                              PartitionCols:_col0
                                              Group By Operator [GBY_120] (rows=8116 width=1119)
                                                Output:["_col0","_col1"],aggregations:["count()"],keys:_col0
                                                Select Operator [SEL_117] (rows=8116 width=1119)
                                                  Output:["_col0"]
                                                  Filter Operator [FIL_116] (rows=8116 width=1119)
                                                    predicate:(CAST( d_date AS TIMESTAMP) BETWEEN TIMESTAMP'1998-03-18 00:00:00' AND TIMESTAMP'1998-06-16 00:00:00' and d_date_sk is not null)
                                                    TableScan [TS_3] (rows=73049 width=1119)
                                                      default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_date"]
                                      <-Reducer 14 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_147]
                                          PartitionCols:_col0
                                          Group By Operator [GBY_146] (rows=143994918 width=135)
                                            Output:["_col0","_col1","_col2","_col3"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0, KEY._col1
                                          <-Map 13 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_145]
                                              PartitionCols:_col0, _col1
                                              Group By Operator [GBY_144] (rows=287989836 width=135)
                                                Output:["_col0","_col1","_col2","_col3"],aggregations:["sum(_col2)","count(_col2)"],keys:_col0, _col1
                                                Select Operator [SEL_143] (rows=287989836 width=135)
                                                  Output:["_col0","_col1","_col2"]
                                                  Filter Operator [FIL_142] (rows=287989836 width=135)
                                                    predicate:((cs_item_sk BETWEEN DynamicValue(RS_35_item_i_item_sk_min) AND DynamicValue(RS_35_item_i_item_sk_max) and in_bloom_filter(cs_item_sk, DynamicValue(RS_35_item_i_item_sk_bloom_filter))) and (cs_sold_date_sk BETWEEN DynamicValue(RS_23_date_dim_d_date_sk_min) AND DynamicValue(RS_23_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_23_date_dim_d_date_sk_bloom_filter))) and cs_item_sk is not null and cs_sold_date_sk is not null)
                                                    TableScan [TS_6] (rows=287989836 width=135)
                                                      default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:NONE,Output:["cs_sold_date_sk","cs_item_sk","cs_ext_discount_amt"]
                                                    <-Reducer 16 [BROADCAST_EDGE] vectorized
                                                      BROADCAST [RS_134]
                                                        Group By Operator [GBY_132] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                        <-Map 15 [CUSTOM_SIMPLE_EDGE] vectorized
                                                          PARTITION_ONLY_SHUFFLE [RS_131]
                                                            Group By Operator [GBY_130] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                              Select Operator [SEL_129] (rows=231000 width=1436)
                                                                Output:["_col0"]
                                                                 Please refer to the previous Select Operator [SEL_127]
                                                    <-Reducer 12 [BROADCAST_EDGE] vectorized
                                                      BROADCAST [RS_141]
                                                        Group By Operator [GBY_140] (rows=1 width=16)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                        <-Reducer 7 [CUSTOM_SIMPLE_EDGE] vectorized
                                                          FORWARD [RS_139]
                                                            Group By Operator [GBY_138] (rows=1 width=16)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                              Select Operator [SEL_137] (rows=4058 width=1119)
                                                                Output:["_col0"]
                                                                 Please refer to the previous Group By Operator [GBY_135]
                    <-Reducer 2 [SIMPLE_EDGE]
                      SHUFFLE [RS_41]
                        PartitionCols:_col1
                        Merge Join Operator [MERGEJOIN_112] (rows=316788826 width=135)
                          Conds:RS_152._col0=RS_118._col0(Inner),Output:["_col1","_col2"]
                        <-Map 5 [SIMPLE_EDGE] vectorized
                          SHUFFLE [RS_118]
                            PartitionCols:_col0
                             Please refer to the previous Select Operator [SEL_117]
                        <-Map 1 [SIMPLE_EDGE] vectorized
                          SHUFFLE [RS_152]
                            PartitionCols:_col0
                            Select Operator [SEL_151] (rows=287989836 width=135)
                              Output:["_col0","_col1","_col2"]
                              Filter Operator [FIL_150] (rows=287989836 width=135)
                                predicate:((cs_item_sk BETWEEN DynamicValue(RS_34_catalog_sales_cs_item_sk_min) AND DynamicValue(RS_34_catalog_sales_cs_item_sk_max) and in_bloom_filter(cs_item_sk, DynamicValue(RS_34_catalog_sales_cs_item_sk_bloom_filter))) and (cs_item_sk BETWEEN DynamicValue(RS_35_item_i_item_sk_min) AND DynamicValue(RS_35_item_i_item_sk_max) and in_bloom_filter(cs_item_sk, DynamicValue(RS_35_item_i_item_sk_bloom_filter))) and (cs_sold_date_sk BETWEEN DynamicValue(RS_39_date_dim_d_date_sk_min) AND DynamicValue(RS_39_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_39_date_dim_d_date_sk_bloom_filter))) and cs_item_sk is not null and cs_sold_date_sk is not null)
                                TableScan [TS_0] (rows=287989836 width=135)
                                  default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:NONE,Output:["cs_sold_date_sk","cs_item_sk","cs_ext_discount_amt"]
                                <-Reducer 16 [BROADCAST_EDGE] vectorized
                                  BROADCAST [RS_133]
                                     Please refer to the previous Group By Operator [GBY_132]
                                <-Reducer 11 [BROADCAST_EDGE] vectorized
                                  BROADCAST [RS_149]
                                    Group By Operator [GBY_148] (rows=1 width=124)
                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=79197208)"]
                                    <-Reducer 9 [CUSTOM_SIMPLE_EDGE]
                                      PARTITION_ONLY_SHUFFLE [RS_86]
                                        Group By Operator [GBY_85] (rows=1 width=124)
                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=79197208)"]
                                          Select Operator [SEL_84] (rows=79197206 width=135)
                                            Output:["_col0"]
                                             Please refer to the previous Select Operator [SEL_30]
                                <-Reducer 6 [BROADCAST_EDGE] vectorized
                                  BROADCAST [RS_125]
                                    Group By Operator [GBY_124] (rows=1 width=12)
                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                    <-Map 5 [CUSTOM_SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_123]
                                        Group By Operator [GBY_121] (rows=1 width=12)
                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                          Select Operator [SEL_119] (rows=8116 width=1119)
                                            Output:["_col0"]
                                             Please refer to the previous Select Operator [SEL_117]

