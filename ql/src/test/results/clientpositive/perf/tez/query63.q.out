PREHOOK: query: explain
select  * 
from (select i_manager_id
             ,sum(ss_sales_price) sum_sales
             ,avg(sum(ss_sales_price)) over (partition by i_manager_id) avg_monthly_sales
      from item
          ,store_sales
          ,date_dim
          ,store
      where ss_item_sk = i_item_sk
        and ss_sold_date_sk = d_date_sk
        and ss_store_sk = s_store_sk
        and d_month_seq in (1212,1212+1,1212+2,1212+3,1212+4,1212+5,1212+6,1212+7,1212+8,1212+9,1212+10,1212+11)
        and ((    i_category in ('Books','Children','Electronics')
              and i_class in ('personal','portable','refernece','self-help')
              and i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		                  'exportiunivamalg #9','scholaramalgamalg #9'))
           or(    i_category in ('Women','Music','Men')
              and i_class in ('accessories','classical','fragrances','pants')
              and i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		                 'importoamalg #1')))
group by i_manager_id, d_moy) tmp1
where case when avg_monthly_sales > 0 then abs (sum_sales - avg_monthly_sales) / avg_monthly_sales else null end > 0.1
order by i_manager_id
        ,avg_monthly_sales
        ,sum_sales
limit 100
PREHOOK: type: QUERY
POSTHOOK: query: explain
select  * 
from (select i_manager_id
             ,sum(ss_sales_price) sum_sales
             ,avg(sum(ss_sales_price)) over (partition by i_manager_id) avg_monthly_sales
      from item
          ,store_sales
          ,date_dim
          ,store
      where ss_item_sk = i_item_sk
        and ss_sold_date_sk = d_date_sk
        and ss_store_sk = s_store_sk
        and d_month_seq in (1212,1212+1,1212+2,1212+3,1212+4,1212+5,1212+6,1212+7,1212+8,1212+9,1212+10,1212+11)
        and ((    i_category in ('Books','Children','Electronics')
              and i_class in ('personal','portable','refernece','self-help')
              and i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		                  'exportiunivamalg #9','scholaramalgamalg #9'))
           or(    i_category in ('Women','Music','Men')
              and i_class in ('accessories','classical','fragrances','pants')
              and i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		                 'importoamalg #1')))
group by i_manager_id, d_moy) tmp1
where case when avg_monthly_sales > 0 then abs (sum_sales - avg_monthly_sales) / avg_monthly_sales else null end > 0.1
order by i_manager_id
        ,avg_monthly_sales
        ,sum_sales
limit 100
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 7 (SIMPLE_EDGE)
Reducer 3 <- Map 8 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Map 9 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 6 vectorized
      File Output Operator [FS_71]
        Limit [LIM_70] (rows=100 width=88)
          Number of rows:100
          Select Operator [SEL_69] (rows=191662559 width=88)
            Output:["_col0","_col1","_col2"]
          <-Reducer 5 [SIMPLE_EDGE]
            SHUFFLE [RS_33]
              Select Operator [SEL_30] (rows=191662559 width=88)
                Output:["_col0","_col1","_col2"]
                Filter Operator [FIL_46] (rows=191662559 width=88)
                  predicate:CASE WHEN ((avg_window_0 > 0)) THEN (((abs((_col2 - avg_window_0)) / avg_window_0) > 0.1)) ELSE (null) END
                  Select Operator [SEL_29] (rows=383325119 width=88)
                    Output:["avg_window_0","_col0","_col2"]
                    PTF Operator [PTF_28] (rows=383325119 width=88)
                      Function definitions:[{},{"name:":"windowingtablefunction","order by:":"_col0 ASC NULLS FIRST","partition by:":"_col0"}]
                      Select Operator [SEL_25] (rows=383325119 width=88)
                        Output:["_col0","_col2"]
                        Group By Operator [GBY_24] (rows=383325119 width=88)
                          Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1
                        <-Reducer 4 [SIMPLE_EDGE]
                          SHUFFLE [RS_23]
                            PartitionCols:_col0
                            Group By Operator [GBY_22] (rows=766650239 width=88)
                              Output:["_col0","_col1","_col2"],aggregations:["sum(_col3)"],keys:_col8, _col11
                              Merge Join Operator [MERGEJOIN_54] (rows=766650239 width=88)
                                Conds:RS_18._col2=RS_66._col0(Inner),Output:["_col3","_col8","_col11"]
                              <-Map 9 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_66]
                                  PartitionCols:_col0
                                  Select Operator [SEL_65] (rows=1704 width=1910)
                                    Output:["_col0"]
                                    Filter Operator [FIL_64] (rows=1704 width=1910)
                                      predicate:s_store_sk is not null
                                      TableScan [TS_9] (rows=1704 width=1910)
                                        default@store,store,Tbl:COMPLETE,Col:NONE,Output:["s_store_sk"]
                              <-Reducer 3 [SIMPLE_EDGE]
                                SHUFFLE [RS_18]
                                  PartitionCols:_col2
                                  Merge Join Operator [MERGEJOIN_53] (rows=696954748 width=88)
                                    Conds:RS_15._col0=RS_63._col0(Inner),Output:["_col2","_col3","_col8","_col11"]
                                  <-Map 8 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_63]
                                      PartitionCols:_col0
                                      Select Operator [SEL_62] (rows=73049 width=1119)
                                        Output:["_col0","_col2"]
                                        Filter Operator [FIL_61] (rows=73049 width=1119)
                                          predicate:(((d_month_seq = 1212) or (d_month_seq = 1213) or (d_month_seq = 1214) or (d_month_seq = 1215) or (d_month_seq = 1216) or (d_month_seq = 1217) or (d_month_seq = 1218) or (d_month_seq = 1219) or (d_month_seq = 1220) or (d_month_seq = 1221) or (d_month_seq = 1222) or (d_month_seq = 1223)) and d_date_sk is not null)
                                          TableScan [TS_6] (rows=73049 width=1119)
                                            default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_month_seq","d_moy"]
                                  <-Reducer 2 [SIMPLE_EDGE]
                                    SHUFFLE [RS_15]
                                      PartitionCols:_col0
                                      Merge Join Operator [MERGEJOIN_52] (rows=633595212 width=88)
                                        Conds:RS_57._col1=RS_60._col0(Inner),Output:["_col0","_col2","_col3","_col8"]
                                      <-Map 1 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_57]
                                          PartitionCols:_col1
                                          Select Operator [SEL_56] (rows=575995635 width=88)
                                            Output:["_col0","_col1","_col2","_col3"]
                                            Filter Operator [FIL_55] (rows=575995635 width=88)
                                              predicate:(ss_item_sk is not null and ss_sold_date_sk is not null and ss_store_sk is not null)
                                              TableScan [TS_0] (rows=575995635 width=88)
                                                default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_date_sk","ss_item_sk","ss_store_sk","ss_sales_price"]
                                      <-Map 7 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_60]
                                          PartitionCols:_col0
                                          Select Operator [SEL_59] (rows=462000 width=1436)
                                            Output:["_col0","_col4"]
                                            Filter Operator [FIL_58] (rows=462000 width=1436)
                                              predicate:(((((i_category = 'Books') or (i_category = 'Children') or (i_category = 'Electronics')) and ((i_class = 'personal') or (i_class = 'portable') or (i_class = 'refernece') or (i_class = 'self-help')) and ((i_brand = 'scholaramalgamalg #14') or (i_brand = 'scholaramalgamalg #7') or (i_brand = 'exportiunivamalg #9') or (i_brand = 'scholaramalgamalg #9'))) or (((i_category = 'Women') or (i_category = 'Music') or (i_category = 'Men')) and ((i_class = 'accessories') or (i_class = 'classical') or (i_class = 'fragrances') or (i_class = 'pants')) and ((i_brand = 'amalgimporto #1') or (i_brand = 'edu packscholar #1') or (i_brand = 'exportiimporto #1') or (i_brand = 'importoamalg #1')))) and ((i_brand = 'scholaramalgamalg #14') or (i_brand = 'scholaramalgamalg #7') or (i_brand = 'exportiunivamalg #9') or (i_brand = 'scholaramalgamalg #9') or (i_brand = 'amalgimporto #1') or (i_brand = 'edu packscholar #1') or (i_brand = 'exportiimporto #1') or (i_brand = 'importoamalg #1')) and ((i_category = 'Books') or (i_category = 'Children') or (i_category = 'Electronics') or (i_category = 'Women') or (i_category = 'Music') or (i_category = 'Men')) and ((i_class = 'personal') or (i_class = 'portable') or (i_class = 'refernece') or (i_class = 'self-help') or (i_class = 'accessories') or (i_class = 'classical') or (i_class = 'fragrances') or (i_class = 'pants')) and i_item_sk is not null)
                                              TableScan [TS_3] (rows=462000 width=1436)
                                                default@item,item,Tbl:COMPLETE,Col:NONE,Output:["i_item_sk","i_brand","i_class","i_category","i_manager_id"]

