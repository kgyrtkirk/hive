PREHOOK: query: explain
select  
    sum(ss_net_profit) as total_sum
   ,s_state
   ,s_county
   ,grouping(s_state)+grouping(s_county) as lochierarchy
   ,rank() over (
 	partition by grouping(s_state)+grouping(s_county),
 	case when grouping(s_county) = 0 then s_state end 
 	order by sum(ss_net_profit) desc) as rank_within_parent
 from
    store_sales
   ,date_dim       d1
   ,store
 where
    d1.d_month_seq between 1212 and 1212+11
 and d1.d_date_sk = ss_sold_date_sk
 and s_store_sk  = ss_store_sk
 and s_state in
             ( select s_state
               from  (select s_state as s_state,
 			    rank() over ( partition by s_state order by sum(ss_net_profit) desc) as ranking
                      from   store_sales, store, date_dim
                      where  d_month_seq between 1212 and 1212+11
 			    and d_date_sk = ss_sold_date_sk
 			    and s_store_sk  = ss_store_sk
                      group by s_state
                     ) tmp1 
               where ranking <= 5
             )
 group by rollup(s_state,s_county)
 order by
   lochierarchy desc
  ,case when lochierarchy = 0 then s_state end
  ,rank_within_parent
 limit 100
PREHOOK: type: QUERY
POSTHOOK: query: explain
select  
    sum(ss_net_profit) as total_sum
   ,s_state
   ,s_county
   ,grouping(s_state)+grouping(s_county) as lochierarchy
   ,rank() over (
 	partition by grouping(s_state)+grouping(s_county),
 	case when grouping(s_county) = 0 then s_state end 
 	order by sum(ss_net_profit) desc) as rank_within_parent
 from
    store_sales
   ,date_dim       d1
   ,store
 where
    d1.d_month_seq between 1212 and 1212+11
 and d1.d_date_sk = ss_sold_date_sk
 and s_store_sk  = ss_store_sk
 and s_state in
             ( select s_state
               from  (select s_state as s_state,
 			    rank() over ( partition by s_state order by sum(ss_net_profit) desc) as ranking
                      from   store_sales, store, date_dim
                      where  d_month_seq between 1212 and 1212+11
 			    and d_date_sk = ss_sold_date_sk
 			    and s_store_sk  = ss_store_sk
                      group by s_state
                     ) tmp1 
               where ranking <= 5
             )
 group by rollup(s_state,s_county)
 order by
   lochierarchy desc
  ,case when lochierarchy = 0 then s_state end
  ,rank_within_parent
 limit 100
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 18 (BROADCAST_EDGE), Reducer 9 (BROADCAST_EDGE)
Map 19 <- Reducer 16 (BROADCAST_EDGE), Reducer 23 (BROADCAST_EDGE)
Reducer 10 <- Map 8 (SIMPLE_EDGE)
Reducer 11 <- Reducer 10 (ONE_TO_ONE_EDGE), Reducer 20 (SIMPLE_EDGE)
Reducer 12 <- Reducer 11 (SIMPLE_EDGE)
Reducer 13 <- Reducer 12 (ONE_TO_ONE_EDGE), Reducer 22 (SIMPLE_EDGE)
Reducer 14 <- Reducer 13 (SIMPLE_EDGE)
Reducer 15 <- Reducer 14 (SIMPLE_EDGE)
Reducer 16 <- Reducer 10 (CUSTOM_SIMPLE_EDGE)
Reducer 18 <- Map 17 (CUSTOM_SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)
Reducer 20 <- Map 19 (SIMPLE_EDGE)
Reducer 22 <- Map 21 (SIMPLE_EDGE)
Reducer 23 <- Reducer 22 (CUSTOM_SIMPLE_EDGE)
Reducer 3 <- Map 17 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 15 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 6 (SIMPLE_EDGE)
Reducer 9 <- Map 8 (CUSTOM_SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 7 vectorized
      File Output Operator [FS_220]
        Limit [LIM_219] (rows=100 width=88)
          Number of rows:100
          Select Operator [SEL_218] (rows=1149975358 width=88)
            Output:["_col0","_col1","_col2","_col3","_col4"]
          <-Reducer 6 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_217]
              Select Operator [SEL_216] (rows=1149975358 width=88)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                PTF Operator [PTF_215] (rows=1149975358 width=88)
                  Function definitions:[{},{"name:":"windowingtablefunction","order by:":"_col2 DESC NULLS LAST","partition by:":"(grouping(_col3, 1) + grouping(_col3, 0)), CASE WHEN ((grouping(_col3, 0) = 0)) THEN (_col0) ELSE (CAST( null AS STRING)) END"}]
                  Select Operator [SEL_214] (rows=1149975358 width=88)
                    Output:["_col0","_col1","_col2","_col3"]
                  <-Reducer 5 [SIMPLE_EDGE] vectorized
                    SHUFFLE [RS_213]
                      PartitionCols:(grouping(_col3, 1) + grouping(_col3, 0)), CASE WHEN ((grouping(_col3, 0) = 0)) THEN (_col0) ELSE (CAST( null AS STRING)) END
                      Select Operator [SEL_212] (rows=1149975358 width=88)
                        Output:["_col0","_col1","_col2","_col3"]
                        Group By Operator [GBY_211] (rows=1149975358 width=88)
                          Output:["_col0","_col1","_col2","_col3"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                        <-Reducer 4 [SIMPLE_EDGE]
                          SHUFFLE [RS_71]
                            PartitionCols:_col0, _col1, _col2
                            Group By Operator [GBY_70] (rows=2299950717 width=88)
                              Output:["_col0","_col1","_col2","_col3"],aggregations:["sum(_col2)"],keys:_col0, _col1, 0L
                              Select Operator [SEL_68] (rows=766650239 width=88)
                                Output:["_col0","_col1","_col2"]
                                Merge Join Operator [MERGEJOIN_156] (rows=766650239 width=88)
                                  Conds:RS_65._col7=RS_210._col0(Inner),Output:["_col2","_col6","_col7"]
                                <-Reducer 15 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_210]
                                    PartitionCols:_col0
                                    Select Operator [SEL_209] (rows=29039780 width=88)
                                      Output:["_col0"]
                                      Filter Operator [FIL_208] (rows=29039780 width=88)
                                        predicate:(rank_window_0 <= 5)
                                        PTF Operator [PTF_207] (rows=87119342 width=88)
                                          Function definitions:[{},{"name:":"windowingtablefunction","order by:":"_col1 DESC NULLS LAST","partition by:":"_col0"}]
                                          Select Operator [SEL_206] (rows=87119342 width=88)
                                            Output:["_col0","_col1"]
                                          <-Reducer 14 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_205]
                                              PartitionCols:_col0
                                              Group By Operator [GBY_204] (rows=87119342 width=88)
                                                Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                                              <-Reducer 13 [SIMPLE_EDGE]
                                                SHUFFLE [RS_48]
                                                  PartitionCols:_col0
                                                  Group By Operator [GBY_47] (rows=174238685 width=88)
                                                    Output:["_col0","_col1"],aggregations:["sum(_col5)"],keys:_col3
                                                    Select Operator [SEL_45] (rows=174238685 width=88)
                                                      Output:["_col3","_col5"]
                                                      Merge Join Operator [MERGEJOIN_155] (rows=174238685 width=88)
                                                        Conds:RS_203._col0=RS_190._col0(Inner),Output:["_col1","_col3","_col4"]
                                                      <-Reducer 22 [SIMPLE_EDGE] vectorized
                                                        PARTITION_ONLY_SHUFFLE [RS_190]
                                                          PartitionCols:_col0
                                                          Group By Operator [GBY_189] (rows=852 width=1910)
                                                            Output:["_col0","_col1","_col2"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1
                                                          <-Map 21 [SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_188]
                                                              PartitionCols:_col0, _col1
                                                              Group By Operator [GBY_187] (rows=1704 width=1910)
                                                                Output:["_col0","_col1","_col2"],aggregations:["count()"],keys:_col0, _col1
                                                                Select Operator [SEL_186] (rows=1704 width=1910)
                                                                  Output:["_col0","_col1"]
                                                                  Filter Operator [FIL_185] (rows=1704 width=1910)
                                                                    predicate:(s_state is not null and s_store_sk is not null)
                                                                    TableScan [TS_34] (rows=1704 width=1910)
                                                                      default@store,store,Tbl:COMPLETE,Col:NONE,Output:["s_store_sk","s_state"]
                                                      <-Reducer 12 [ONE_TO_ONE_EDGE] vectorized
                                                        FORWARD [RS_203]
                                                          PartitionCols:_col0
                                                          Group By Operator [GBY_202] (rows=158398802 width=88)
                                                            Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                                                          <-Reducer 11 [SIMPLE_EDGE]
                                                            SHUFFLE [RS_31]
                                                              PartitionCols:_col0
                                                              Group By Operator [GBY_30] (rows=316797605 width=88)
                                                                Output:["_col0","_col1"],aggregations:["sum(_col5)"],keys:_col1
                                                                Select Operator [SEL_28] (rows=316797605 width=88)
                                                                  Output:["_col1","_col5"]
                                                                  Merge Join Operator [MERGEJOIN_154] (rows=316797605 width=88)
                                                                    Conds:RS_201._col0=RS_179._col0(Inner),Output:["_col1","_col2","_col4"]
                                                                  <-Reducer 10 [ONE_TO_ONE_EDGE] vectorized
                                                                    PARTITION_ONLY_SHUFFLE [RS_179]
                                                                      PartitionCols:_col0
                                                                      Group By Operator [GBY_178] (rows=36524 width=1119)
                                                                        Output:["_col0","_col1"],aggregations:["count(VALUE._col0)"],keys:KEY._col0
                                                                      <-Map 8 [SIMPLE_EDGE] vectorized
                                                                        PARTITION_ONLY_SHUFFLE [RS_163]
                                                                          PartitionCols:_col0
                                                                          Group By Operator [GBY_161] (rows=73049 width=1119)
                                                                            Output:["_col0","_col1"],aggregations:["count()"],keys:_col0
                                                                            Select Operator [SEL_158] (rows=73049 width=1119)
                                                                              Output:["_col0"]
                                                                              Filter Operator [FIL_157] (rows=73049 width=1119)
                                                                                predicate:(d_date_sk is not null and d_month_seq BETWEEN 1212 AND 1223)
                                                                                TableScan [TS_3] (rows=73049 width=1119)
                                                                                  default@date_dim,d1,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_month_seq"]
                                                                  <-Reducer 20 [SIMPLE_EDGE] vectorized
                                                                    SHUFFLE [RS_201]
                                                                      PartitionCols:_col0
                                                                      Group By Operator [GBY_200] (rows=287997817 width=88)
                                                                        Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1
                                                                      <-Map 19 [SIMPLE_EDGE] vectorized
                                                                        SHUFFLE [RS_199]
                                                                          PartitionCols:_col0, _col1
                                                                          Group By Operator [GBY_198] (rows=575995635 width=88)
                                                                            Output:["_col0","_col1","_col2"],aggregations:["sum(_col2)"],keys:_col0, _col1
                                                                            Select Operator [SEL_197] (rows=575995635 width=88)
                                                                              Output:["_col0","_col1","_col2"]
                                                                              Filter Operator [FIL_196] (rows=575995635 width=88)
                                                                                predicate:((ss_sold_date_sk BETWEEN DynamicValue(RS_26_date_dim_d_date_sk_min) AND DynamicValue(RS_26_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_26_date_dim_d_date_sk_bloom_filter))) and (ss_store_sk BETWEEN DynamicValue(RS_43_store_s_store_sk_min) AND DynamicValue(RS_43_store_s_store_sk_max) and in_bloom_filter(ss_store_sk, DynamicValue(RS_43_store_s_store_sk_bloom_filter))) and ss_sold_date_sk is not null and ss_store_sk is not null)
                                                                                TableScan [TS_9] (rows=575995635 width=88)
                                                                                  default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_date_sk","ss_store_sk","ss_net_profit"]
                                                                                <-Reducer 16 [BROADCAST_EDGE] vectorized
                                                                                  BROADCAST [RS_184]
                                                                                    Group By Operator [GBY_183] (rows=1 width=16)
                                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                    <-Reducer 10 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                      PARTITION_ONLY_SHUFFLE [RS_182]
                                                                                        Group By Operator [GBY_181] (rows=1 width=16)
                                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                          Select Operator [SEL_180] (rows=36524 width=1119)
                                                                                            Output:["_col0"]
                                                                                             Please refer to the previous Group By Operator [GBY_178]
                                                                                <-Reducer 23 [BROADCAST_EDGE] vectorized
                                                                                  BROADCAST [RS_195]
                                                                                    Group By Operator [GBY_194] (rows=1 width=16)
                                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                    <-Reducer 22 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                      PARTITION_ONLY_SHUFFLE [RS_193]
                                                                                        Group By Operator [GBY_192] (rows=1 width=16)
                                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                          Select Operator [SEL_191] (rows=852 width=1910)
                                                                                            Output:["_col0"]
                                                                                             Please refer to the previous Group By Operator [GBY_189]
                                <-Reducer 3 [SIMPLE_EDGE]
                                  SHUFFLE [RS_65]
                                    PartitionCols:_col7
                                    Merge Join Operator [MERGEJOIN_153] (rows=696954748 width=88)
                                      Conds:RS_62._col1=RS_169._col0(Inner),Output:["_col2","_col6","_col7"]
                                    <-Map 17 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_169]
                                        PartitionCols:_col0
                                        Select Operator [SEL_168] (rows=1704 width=1910)
                                          Output:["_col0","_col1","_col2"]
                                          Filter Operator [FIL_167] (rows=1704 width=1910)
                                            predicate:(s_state is not null and s_store_sk is not null)
                                            TableScan [TS_6] (rows=1704 width=1910)
                                              default@store,store,Tbl:COMPLETE,Col:NONE,Output:["s_store_sk","s_county","s_state"]
                                    <-Reducer 2 [SIMPLE_EDGE]
                                      SHUFFLE [RS_62]
                                        PartitionCols:_col1
                                        Merge Join Operator [MERGEJOIN_152] (rows=633595212 width=88)
                                          Conds:RS_177._col0=RS_159._col0(Inner),Output:["_col1","_col2"]
                                        <-Map 8 [SIMPLE_EDGE] vectorized
                                          PARTITION_ONLY_SHUFFLE [RS_159]
                                            PartitionCols:_col0
                                             Please refer to the previous Select Operator [SEL_158]
                                        <-Map 1 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_177]
                                            PartitionCols:_col0
                                            Select Operator [SEL_176] (rows=575995635 width=88)
                                              Output:["_col0","_col1","_col2"]
                                              Filter Operator [FIL_175] (rows=575995635 width=88)
                                                predicate:((ss_sold_date_sk BETWEEN DynamicValue(RS_60_d1_d_date_sk_min) AND DynamicValue(RS_60_d1_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_60_d1_d_date_sk_bloom_filter))) and (ss_store_sk BETWEEN DynamicValue(RS_63_store_s_store_sk_min) AND DynamicValue(RS_63_store_s_store_sk_max) and in_bloom_filter(ss_store_sk, DynamicValue(RS_63_store_s_store_sk_bloom_filter))) and ss_sold_date_sk is not null and ss_store_sk is not null)
                                                TableScan [TS_0] (rows=575995635 width=88)
                                                  default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_date_sk","ss_store_sk","ss_net_profit"]
                                                <-Reducer 18 [BROADCAST_EDGE] vectorized
                                                  BROADCAST [RS_174]
                                                    Group By Operator [GBY_173] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                    <-Map 17 [CUSTOM_SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_172]
                                                        Group By Operator [GBY_171] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                          Select Operator [SEL_170] (rows=1704 width=1910)
                                                            Output:["_col0"]
                                                             Please refer to the previous Select Operator [SEL_168]
                                                <-Reducer 9 [BROADCAST_EDGE] vectorized
                                                  BROADCAST [RS_166]
                                                    Group By Operator [GBY_165] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                    <-Map 8 [CUSTOM_SIMPLE_EDGE] vectorized
                                                      PARTITION_ONLY_SHUFFLE [RS_164]
                                                        Group By Operator [GBY_162] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                          Select Operator [SEL_160] (rows=73049 width=1119)
                                                            Output:["_col0"]
                                                             Please refer to the previous Select Operator [SEL_158]

