PREHOOK: query: explain
select count(*) 
from ((select distinct c_last_name, c_first_name, d_date
       from store_sales, date_dim, customer
       where store_sales.ss_sold_date_sk = date_dim.d_date_sk
         and store_sales.ss_customer_sk = customer.c_customer_sk
         and d_month_seq between 1212 and 1212+11)
       except
      (select distinct c_last_name, c_first_name, d_date
       from catalog_sales, date_dim, customer
       where catalog_sales.cs_sold_date_sk = date_dim.d_date_sk
         and catalog_sales.cs_bill_customer_sk = customer.c_customer_sk
         and d_month_seq between 1212 and 1212+11)
       except
      (select distinct c_last_name, c_first_name, d_date
       from web_sales, date_dim, customer
       where web_sales.ws_sold_date_sk = date_dim.d_date_sk
         and web_sales.ws_bill_customer_sk = customer.c_customer_sk
         and d_month_seq between 1212 and 1212+11)
) cool_cust
PREHOOK: type: QUERY
POSTHOOK: query: explain
select count(*) 
from ((select distinct c_last_name, c_first_name, d_date
       from store_sales, date_dim, customer
       where store_sales.ss_sold_date_sk = date_dim.d_date_sk
         and store_sales.ss_customer_sk = customer.c_customer_sk
         and d_month_seq between 1212 and 1212+11)
       except
      (select distinct c_last_name, c_first_name, d_date
       from catalog_sales, date_dim, customer
       where catalog_sales.cs_sold_date_sk = date_dim.d_date_sk
         and catalog_sales.cs_bill_customer_sk = customer.c_customer_sk
         and d_month_seq between 1212 and 1212+11)
       except
      (select distinct c_last_name, c_first_name, d_date
       from web_sales, date_dim, customer
       where web_sales.ws_sold_date_sk = date_dim.d_date_sk
         and web_sales.ws_bill_customer_sk = customer.c_customer_sk
         and d_month_seq between 1212 and 1212+11)
) cool_cust
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Map 17 <- Reducer 10 (BROADCAST_EDGE), Reducer 21 (BROADCAST_EDGE)
Map 28 <- Reducer 13 (BROADCAST_EDGE), Reducer 24 (BROADCAST_EDGE)
Map 29 <- Reducer 16 (BROADCAST_EDGE), Reducer 27 (BROADCAST_EDGE)
Reducer 10 <- Reducer 2 (CUSTOM_SIMPLE_EDGE)
Reducer 11 <- Reducer 2 (SIMPLE_EDGE), Reducer 23 (SIMPLE_EDGE)
Reducer 12 <- Reducer 11 (SIMPLE_EDGE), Union 5 (CONTAINS)
Reducer 13 <- Reducer 2 (CUSTOM_SIMPLE_EDGE)
Reducer 14 <- Reducer 2 (SIMPLE_EDGE), Reducer 26 (SIMPLE_EDGE)
Reducer 15 <- Reducer 14 (SIMPLE_EDGE), Union 7 (CONTAINS)
Reducer 16 <- Reducer 2 (CUSTOM_SIMPLE_EDGE)
Reducer 18 <- Map 17 (SIMPLE_EDGE), Map 20 (SIMPLE_EDGE)
Reducer 19 <- Reducer 18 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE)
Reducer 21 <- Map 20 (CUSTOM_SIMPLE_EDGE)
Reducer 22 <- Map 20 (SIMPLE_EDGE), Map 28 (SIMPLE_EDGE)
Reducer 23 <- Reducer 22 (SIMPLE_EDGE)
Reducer 24 <- Map 20 (CUSTOM_SIMPLE_EDGE)
Reducer 25 <- Map 20 (SIMPLE_EDGE), Map 29 (SIMPLE_EDGE)
Reducer 26 <- Reducer 25 (SIMPLE_EDGE)
Reducer 27 <- Map 20 (CUSTOM_SIMPLE_EDGE)
Reducer 3 <- Reducer 19 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE), Union 5 (CONTAINS)
Reducer 6 <- Union 5 (SIMPLE_EDGE), Union 7 (CONTAINS)
Reducer 8 <- Union 7 (SIMPLE_EDGE)
Reducer 9 <- Reducer 8 (CUSTOM_SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 9 vectorized
      File Output Operator [FS_318]
        Group By Operator [GBY_317] (rows=1 width=24)
          Output:["_col0"],aggregations:["count(VALUE._col0)"]
        <-Reducer 8 [CUSTOM_SIMPLE_EDGE] vectorized
          PARTITION_ONLY_SHUFFLE [RS_316]
            Group By Operator [GBY_315] (rows=1 width=24)
              Output:["_col0"],aggregations:["count()"]
              Select Operator [SEL_314] (rows=2268776 width=129)
                Filter Operator [FIL_313] (rows=2268776 width=129)
                  predicate:(((_col3 * 2) = _col4) and (_col3 > 0L))
                  Select Operator [SEL_312] (rows=13612656 width=129)
                    Output:["_col3","_col4"]
                    Group By Operator [GBY_311] (rows=13612656 width=129)
                      Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2
                    <-Union 7 [SIMPLE_EDGE]
                      <-Reducer 15 [CONTAINS] vectorized
                        Reduce Output Operator [RS_350]
                          PartitionCols:_col0, _col1, _col2
                          Group By Operator [GBY_349] (rows=27225312 width=129)
                            Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col3)","sum(_col4)"],keys:_col0, _col1, _col2
                            Select Operator [SEL_348] (rows=27225312 width=129)
                              Output:["_col0","_col1","_col2","_col3","_col4"]
                              Select Operator [SEL_347] (rows=21780404 width=135)
                                Output:["_col0","_col1","_col2","_col3","_col4"]
                                Group By Operator [GBY_346] (rows=21780404 width=135)
                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col1, _col0, _col2
                                  Select Operator [SEL_345] (rows=43560808 width=135)
                                    Output:["_col0","_col1","_col2"]
                                    Group By Operator [GBY_344] (rows=43560808 width=135)
                                      Output:["_col0","_col1","_col2"],keys:KEY._col0, KEY._col1, KEY._col2
                                    <-Reducer 14 [SIMPLE_EDGE]
                                      SHUFFLE [RS_110]
                                        PartitionCols:_col0, _col1, _col2
                                        Group By Operator [GBY_109] (rows=87121617 width=135)
                                          Output:["_col0","_col1","_col2"],keys:_col2, _col1, _col4
                                          Merge Join Operator [MERGEJOIN_222] (rows=87121617 width=135)
                                            Conds:RS_265._col0=RS_343._col0(Inner),Output:["_col1","_col2","_col4"]
                                          <-Reducer 2 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_265]
                                              PartitionCols:_col0
                                              Group By Operator [GBY_260] (rows=40000000 width=860)
                                                Output:["_col0","_col1","_col2"],keys:KEY._col0, KEY._col1, KEY._col2
                                              <-Map 1 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_259]
                                                  PartitionCols:_col0, _col1, _col2
                                                  Group By Operator [GBY_258] (rows=80000000 width=860)
                                                    Output:["_col0","_col1","_col2"],keys:_col0, _col1, _col2
                                                    Select Operator [SEL_257] (rows=80000000 width=860)
                                                      Output:["_col0","_col1","_col2"]
                                                      Filter Operator [FIL_256] (rows=80000000 width=860)
                                                        predicate:c_customer_sk is not null
                                                        TableScan [TS_0] (rows=80000000 width=860)
                                                          default@customer,customer,Tbl:COMPLETE,Col:NONE,Output:["c_customer_sk","c_first_name","c_last_name"]
                                          <-Reducer 26 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_343]
                                              PartitionCols:_col0
                                              Group By Operator [GBY_342] (rows=79201469 width=135)
                                                Output:["_col0","_col1"],keys:KEY._col0, KEY._col1
                                              <-Reducer 25 [SIMPLE_EDGE]
                                                SHUFFLE [RS_102]
                                                  PartitionCols:_col0, _col1
                                                  Group By Operator [GBY_101] (rows=158402938 width=135)
                                                    Output:["_col0","_col1"],keys:_col1, _col3
                                                    Merge Join Operator [MERGEJOIN_219] (rows=158402938 width=135)
                                                      Conds:RS_341._col0=RS_279._col0(Inner),Output:["_col1","_col3"]
                                                    <-Map 20 [SIMPLE_EDGE] vectorized
                                                      PARTITION_ONLY_SHUFFLE [RS_279]
                                                        PartitionCols:_col0
                                                        Select Operator [SEL_274] (rows=73049 width=1119)
                                                          Output:["_col0","_col1"]
                                                          Filter Operator [FIL_273] (rows=73049 width=1119)
                                                            predicate:(d_date_sk is not null and d_month_seq BETWEEN 1212 AND 1223)
                                                            TableScan [TS_11] (rows=73049 width=1119)
                                                              default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_date","d_month_seq"]
                                                    <-Map 29 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_341]
                                                        PartitionCols:_col0
                                                        Select Operator [SEL_340] (rows=144002668 width=135)
                                                          Output:["_col0","_col1"]
                                                          Filter Operator [FIL_339] (rows=144002668 width=135)
                                                            predicate:((ws_bill_customer_sk BETWEEN DynamicValue(RS_105_customer_c_customer_sk_min) AND DynamicValue(RS_105_customer_c_customer_sk_max) and in_bloom_filter(ws_bill_customer_sk, DynamicValue(RS_105_customer_c_customer_sk_bloom_filter))) and (ws_sold_date_sk BETWEEN DynamicValue(RS_98_date_dim_d_date_sk_min) AND DynamicValue(RS_98_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_98_date_dim_d_date_sk_bloom_filter))) and ws_bill_customer_sk is not null and ws_sold_date_sk is not null)
                                                            TableScan [TS_91] (rows=144002668 width=135)
                                                              default@web_sales,web_sales,Tbl:COMPLETE,Col:NONE,Output:["ws_sold_date_sk","ws_bill_customer_sk"]
                                                            <-Reducer 16 [BROADCAST_EDGE] vectorized
                                                              BROADCAST [RS_338]
                                                                Group By Operator [GBY_337] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=40000000)"]
                                                                <-Reducer 2 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                  SHUFFLE [RS_272]
                                                                    Group By Operator [GBY_269] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=40000000)"]
                                                                      Select Operator [SEL_266] (rows=40000000 width=860)
                                                                        Output:["_col0"]
                                                                         Please refer to the previous Group By Operator [GBY_260]
                                                            <-Reducer 27 [BROADCAST_EDGE] vectorized
                                                              BROADCAST [RS_336]
                                                                Group By Operator [GBY_335] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                <-Map 20 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                  PARTITION_ONLY_SHUFFLE [RS_286]
                                                                    Group By Operator [GBY_283] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                      Select Operator [SEL_280] (rows=73049 width=1119)
                                                                        Output:["_col0"]
                                                                         Please refer to the previous Select Operator [SEL_274]
                      <-Reducer 6 [CONTAINS] vectorized
                        Reduce Output Operator [RS_310]
                          PartitionCols:_col0, _col1, _col2
                          Group By Operator [GBY_309] (rows=27225312 width=129)
                            Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col3)","sum(_col4)"],keys:_col0, _col1, _col2
                            Select Operator [SEL_308] (rows=27225312 width=129)
                              Output:["_col0","_col1","_col2","_col3","_col4"]
                              Select Operator [SEL_307] (rows=5444908 width=103)
                                Output:["_col0","_col1","_col2","_col3","_col4"]
                                Group By Operator [GBY_306] (rows=5444908 width=103)
                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col0, _col1, _col2
                                  Select Operator [SEL_305] (rows=10889817 width=103)
                                    Output:["_col0","_col1","_col2"]
                                    Filter Operator [FIL_304] (rows=10889817 width=103)
                                      predicate:(((_col3 * 2) = _col4) and (_col3 > 0L))
                                      Group By Operator [GBY_303] (rows=65338903 width=103)
                                        Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2
                                      <-Union 5 [SIMPLE_EDGE]
                                        <-Reducer 12 [CONTAINS] vectorized
                                          Reduce Output Operator [RS_334]
                                            PartitionCols:_col0, _col1, _col2
                                            Group By Operator [GBY_333] (rows=130677807 width=103)
                                              Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col3)","sum(_col4)"],keys:_col0, _col1, _col2
                                              Select Operator [SEL_332] (rows=130677807 width=103)
                                                Output:["_col0","_col1","_col2","_col3","_col4"]
                                                Select Operator [SEL_331] (rows=43558464 width=135)
                                                  Output:["_col0","_col1","_col2","_col3","_col4"]
                                                  Group By Operator [GBY_330] (rows=43558464 width=135)
                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col1, _col0, _col2
                                                    Select Operator [SEL_329] (rows=87116929 width=135)
                                                      Output:["_col0","_col1","_col2"]
                                                      Group By Operator [GBY_328] (rows=87116929 width=135)
                                                        Output:["_col0","_col1","_col2"],keys:KEY._col0, KEY._col1, KEY._col2
                                                      <-Reducer 11 [SIMPLE_EDGE]
                                                        SHUFFLE [RS_62]
                                                          PartitionCols:_col0, _col1, _col2
                                                          Group By Operator [GBY_61] (rows=174233858 width=135)
                                                            Output:["_col0","_col1","_col2"],keys:_col2, _col1, _col4
                                                            Merge Join Operator [MERGEJOIN_221] (rows=174233858 width=135)
                                                              Conds:RS_263._col0=RS_327._col0(Inner),Output:["_col1","_col2","_col4"]
                                                            <-Reducer 2 [SIMPLE_EDGE] vectorized
                                                              SHUFFLE [RS_263]
                                                                PartitionCols:_col0
                                                                 Please refer to the previous Group By Operator [GBY_260]
                                                            <-Reducer 23 [SIMPLE_EDGE] vectorized
                                                              SHUFFLE [RS_327]
                                                                PartitionCols:_col0
                                                                Group By Operator [GBY_326] (rows=158394413 width=135)
                                                                  Output:["_col0","_col1"],keys:KEY._col0, KEY._col1
                                                                <-Reducer 22 [SIMPLE_EDGE]
                                                                  SHUFFLE [RS_54]
                                                                    PartitionCols:_col0, _col1
                                                                    Group By Operator [GBY_53] (rows=316788826 width=135)
                                                                      Output:["_col0","_col1"],keys:_col1, _col3
                                                                      Merge Join Operator [MERGEJOIN_218] (rows=316788826 width=135)
                                                                        Conds:RS_325._col0=RS_277._col0(Inner),Output:["_col1","_col3"]
                                                                      <-Map 20 [SIMPLE_EDGE] vectorized
                                                                        PARTITION_ONLY_SHUFFLE [RS_277]
                                                                          PartitionCols:_col0
                                                                           Please refer to the previous Select Operator [SEL_274]
                                                                      <-Map 28 [SIMPLE_EDGE] vectorized
                                                                        SHUFFLE [RS_325]
                                                                          PartitionCols:_col0
                                                                          Select Operator [SEL_324] (rows=287989836 width=135)
                                                                            Output:["_col0","_col1"]
                                                                            Filter Operator [FIL_323] (rows=287989836 width=135)
                                                                              predicate:((cs_bill_customer_sk BETWEEN DynamicValue(RS_57_customer_c_customer_sk_min) AND DynamicValue(RS_57_customer_c_customer_sk_max) and in_bloom_filter(cs_bill_customer_sk, DynamicValue(RS_57_customer_c_customer_sk_bloom_filter))) and (cs_sold_date_sk BETWEEN DynamicValue(RS_50_date_dim_d_date_sk_min) AND DynamicValue(RS_50_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_50_date_dim_d_date_sk_bloom_filter))) and cs_bill_customer_sk is not null and cs_sold_date_sk is not null)
                                                                              TableScan [TS_43] (rows=287989836 width=135)
                                                                                default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:NONE,Output:["cs_sold_date_sk","cs_bill_customer_sk"]
                                                                              <-Reducer 13 [BROADCAST_EDGE] vectorized
                                                                                BROADCAST [RS_322]
                                                                                  Group By Operator [GBY_321] (rows=1 width=12)
                                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=40000000)"]
                                                                                  <-Reducer 2 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                    SHUFFLE [RS_271]
                                                                                      Group By Operator [GBY_268] (rows=1 width=12)
                                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=40000000)"]
                                                                                        Select Operator [SEL_264] (rows=40000000 width=860)
                                                                                          Output:["_col0"]
                                                                                           Please refer to the previous Group By Operator [GBY_260]
                                                                              <-Reducer 24 [BROADCAST_EDGE] vectorized
                                                                                BROADCAST [RS_320]
                                                                                  Group By Operator [GBY_319] (rows=1 width=12)
                                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                  <-Map 20 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                    PARTITION_ONLY_SHUFFLE [RS_285]
                                                                                      Group By Operator [GBY_282] (rows=1 width=12)
                                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                        Select Operator [SEL_278] (rows=73049 width=1119)
                                                                                          Output:["_col0"]
                                                                                           Please refer to the previous Select Operator [SEL_274]
                                        <-Reducer 4 [CONTAINS] vectorized
                                          Reduce Output Operator [RS_302]
                                            PartitionCols:_col0, _col1, _col2
                                            Group By Operator [GBY_301] (rows=130677807 width=103)
                                              Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col3)","sum(_col4)"],keys:_col0, _col1, _col2
                                              Select Operator [SEL_300] (rows=130677807 width=103)
                                                Output:["_col0","_col1","_col2","_col3","_col4"]
                                                Select Operator [SEL_299] (rows=87119343 width=88)
                                                  Output:["_col0","_col1","_col2","_col3","_col4"]
                                                  Group By Operator [GBY_298] (rows=87119343 width=88)
                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col1, _col0, _col2
                                                    Select Operator [SEL_297] (rows=174238687 width=88)
                                                      Output:["_col0","_col1","_col2"]
                                                      Group By Operator [GBY_296] (rows=174238687 width=88)
                                                        Output:["_col0","_col1","_col2"],keys:KEY._col0, KEY._col1, KEY._col2
                                                      <-Reducer 3 [SIMPLE_EDGE]
                                                        SHUFFLE [RS_27]
                                                          PartitionCols:_col0, _col1, _col2
                                                          Group By Operator [GBY_26] (rows=348477374 width=88)
                                                            Output:["_col0","_col1","_col2"],keys:_col2, _col1, _col4
                                                            Merge Join Operator [MERGEJOIN_220] (rows=348477374 width=88)
                                                              Conds:RS_261._col0=RS_295._col0(Inner),Output:["_col1","_col2","_col4"]
                                                            <-Reducer 2 [SIMPLE_EDGE] vectorized
                                                              SHUFFLE [RS_261]
                                                                PartitionCols:_col0
                                                                 Please refer to the previous Group By Operator [GBY_260]
                                                            <-Reducer 19 [SIMPLE_EDGE] vectorized
                                                              SHUFFLE [RS_295]
                                                                PartitionCols:_col0
                                                                Group By Operator [GBY_294] (rows=316797606 width=88)
                                                                  Output:["_col0","_col1"],keys:KEY._col0, KEY._col1
                                                                <-Reducer 18 [SIMPLE_EDGE]
                                                                  SHUFFLE [RS_19]
                                                                    PartitionCols:_col0, _col1
                                                                    Group By Operator [GBY_18] (rows=633595212 width=88)
                                                                      Output:["_col0","_col1"],keys:_col1, _col3
                                                                      Merge Join Operator [MERGEJOIN_217] (rows=633595212 width=88)
                                                                        Conds:RS_293._col0=RS_275._col0(Inner),Output:["_col1","_col3"]
                                                                      <-Map 20 [SIMPLE_EDGE] vectorized
                                                                        PARTITION_ONLY_SHUFFLE [RS_275]
                                                                          PartitionCols:_col0
                                                                           Please refer to the previous Select Operator [SEL_274]
                                                                      <-Map 17 [SIMPLE_EDGE] vectorized
                                                                        SHUFFLE [RS_293]
                                                                          PartitionCols:_col0
                                                                          Select Operator [SEL_292] (rows=575995635 width=88)
                                                                            Output:["_col0","_col1"]
                                                                            Filter Operator [FIL_291] (rows=575995635 width=88)
                                                                              predicate:((ss_customer_sk BETWEEN DynamicValue(RS_22_customer_c_customer_sk_min) AND DynamicValue(RS_22_customer_c_customer_sk_max) and in_bloom_filter(ss_customer_sk, DynamicValue(RS_22_customer_c_customer_sk_bloom_filter))) and (ss_sold_date_sk BETWEEN DynamicValue(RS_15_date_dim_d_date_sk_min) AND DynamicValue(RS_15_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_15_date_dim_d_date_sk_bloom_filter))) and ss_customer_sk is not null and ss_sold_date_sk is not null)
                                                                              TableScan [TS_8] (rows=575995635 width=88)
                                                                                default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_date_sk","ss_customer_sk"]
                                                                              <-Reducer 10 [BROADCAST_EDGE] vectorized
                                                                                BROADCAST [RS_290]
                                                                                  Group By Operator [GBY_289] (rows=1 width=12)
                                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=40000000)"]
                                                                                  <-Reducer 2 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                    SHUFFLE [RS_270]
                                                                                      Group By Operator [GBY_267] (rows=1 width=12)
                                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=40000000)"]
                                                                                        Select Operator [SEL_262] (rows=40000000 width=860)
                                                                                          Output:["_col0"]
                                                                                           Please refer to the previous Group By Operator [GBY_260]
                                                                              <-Reducer 21 [BROADCAST_EDGE] vectorized
                                                                                BROADCAST [RS_288]
                                                                                  Group By Operator [GBY_287] (rows=1 width=12)
                                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                  <-Map 20 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                    PARTITION_ONLY_SHUFFLE [RS_284]
                                                                                      Group By Operator [GBY_281] (rows=1 width=12)
                                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                        Select Operator [SEL_276] (rows=73049 width=1119)
                                                                                          Output:["_col0"]
                                                                                           Please refer to the previous Select Operator [SEL_274]

