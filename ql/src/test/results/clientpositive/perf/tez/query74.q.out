PREHOOK: query: explain
with year_total as (
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,d_year as year
       ,max(ss_net_paid) year_total
       ,'s' sale_type
 from customer
     ,store_sales
     ,date_dim
 where c_customer_sk = ss_customer_sk
   and ss_sold_date_sk = d_date_sk
   and d_year in (2001,2001+1)
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,d_year
 union all
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,d_year as year
       ,max(ws_net_paid) year_total
       ,'w' sale_type
 from customer
     ,web_sales
     ,date_dim
 where c_customer_sk = ws_bill_customer_sk
   and ws_sold_date_sk = d_date_sk
   and d_year in (2001,2001+1)
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,d_year
         )
  select 
        t_s_secyear.customer_id, t_s_secyear.customer_first_name, t_s_secyear.customer_last_name
 from year_total t_s_firstyear
     ,year_total t_s_secyear
     ,year_total t_w_firstyear
     ,year_total t_w_secyear
 where t_s_secyear.customer_id = t_s_firstyear.customer_id
         and t_s_firstyear.customer_id = t_w_secyear.customer_id
         and t_s_firstyear.customer_id = t_w_firstyear.customer_id
         and t_s_firstyear.sale_type = 's'
         and t_w_firstyear.sale_type = 'w'
         and t_s_secyear.sale_type = 's'
         and t_w_secyear.sale_type = 'w'
         and t_s_firstyear.year = 2001
         and t_s_secyear.year = 2001+1
         and t_w_firstyear.year = 2001
         and t_w_secyear.year = 2001+1
         and t_s_firstyear.year_total > 0
         and t_w_firstyear.year_total > 0
         and case when t_w_firstyear.year_total > 0 then t_w_secyear.year_total / t_w_firstyear.year_total else null end
           > case when t_s_firstyear.year_total > 0 then t_s_secyear.year_total / t_s_firstyear.year_total else null end
 order by 2,1,3
limit 100
PREHOOK: type: QUERY
POSTHOOK: query: explain
with year_total as (
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,d_year as year
       ,max(ss_net_paid) year_total
       ,'s' sale_type
 from customer
     ,store_sales
     ,date_dim
 where c_customer_sk = ss_customer_sk
   and ss_sold_date_sk = d_date_sk
   and d_year in (2001,2001+1)
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,d_year
 union all
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,d_year as year
       ,max(ws_net_paid) year_total
       ,'w' sale_type
 from customer
     ,web_sales
     ,date_dim
 where c_customer_sk = ws_bill_customer_sk
   and ws_sold_date_sk = d_date_sk
   and d_year in (2001,2001+1)
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,d_year
         )
  select 
        t_s_secyear.customer_id, t_s_secyear.customer_first_name, t_s_secyear.customer_last_name
 from year_total t_s_firstyear
     ,year_total t_s_secyear
     ,year_total t_w_firstyear
     ,year_total t_w_secyear
 where t_s_secyear.customer_id = t_s_firstyear.customer_id
         and t_s_firstyear.customer_id = t_w_secyear.customer_id
         and t_s_firstyear.customer_id = t_w_firstyear.customer_id
         and t_s_firstyear.sale_type = 's'
         and t_w_firstyear.sale_type = 'w'
         and t_s_secyear.sale_type = 's'
         and t_w_secyear.sale_type = 'w'
         and t_s_firstyear.year = 2001
         and t_s_secyear.year = 2001+1
         and t_w_firstyear.year = 2001
         and t_w_secyear.year = 2001+1
         and t_s_firstyear.year_total > 0
         and t_w_firstyear.year_total > 0
         and case when t_w_firstyear.year_total > 0 then t_w_secyear.year_total / t_w_firstyear.year_total else null end
           > case when t_s_firstyear.year_total > 0 then t_s_secyear.year_total / t_s_firstyear.year_total else null end
 order by 2,1,3
limit 100
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 23 (BROADCAST_EDGE), Reducer 31 (BROADCAST_EDGE)
Map 13 <- Reducer 25 (BROADCAST_EDGE), Reducer 33 (BROADCAST_EDGE)
Map 26 <- Reducer 22 (BROADCAST_EDGE), Reducer 30 (BROADCAST_EDGE)
Map 8 <- Reducer 24 (BROADCAST_EDGE), Reducer 32 (BROADCAST_EDGE)
Reducer 10 <- Reducer 9 (SIMPLE_EDGE)
Reducer 11 <- Reducer 10 (SIMPLE_EDGE), Reducer 19 (SIMPLE_EDGE)
Reducer 12 <- Reducer 11 (SIMPLE_EDGE)
Reducer 14 <- Map 13 (SIMPLE_EDGE), Map 29 (SIMPLE_EDGE)
Reducer 15 <- Reducer 14 (SIMPLE_EDGE)
Reducer 16 <- Reducer 15 (SIMPLE_EDGE), Reducer 19 (SIMPLE_EDGE)
Reducer 17 <- Reducer 16 (SIMPLE_EDGE)
Reducer 19 <- Map 18 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 29 (SIMPLE_EDGE)
Reducer 20 <- Reducer 19 (SIMPLE_EDGE), Reducer 28 (SIMPLE_EDGE)
Reducer 21 <- Reducer 20 (SIMPLE_EDGE)
Reducer 22 <- Reducer 19 (CUSTOM_SIMPLE_EDGE)
Reducer 23 <- Reducer 19 (CUSTOM_SIMPLE_EDGE)
Reducer 24 <- Reducer 19 (CUSTOM_SIMPLE_EDGE)
Reducer 25 <- Reducer 19 (CUSTOM_SIMPLE_EDGE)
Reducer 27 <- Map 26 (SIMPLE_EDGE), Map 29 (SIMPLE_EDGE)
Reducer 28 <- Reducer 27 (SIMPLE_EDGE)
Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
Reducer 30 <- Map 29 (CUSTOM_SIMPLE_EDGE)
Reducer 31 <- Map 29 (CUSTOM_SIMPLE_EDGE)
Reducer 32 <- Map 29 (CUSTOM_SIMPLE_EDGE)
Reducer 33 <- Map 29 (CUSTOM_SIMPLE_EDGE)
Reducer 4 <- Reducer 19 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 12 (SIMPLE_EDGE), Reducer 17 (SIMPLE_EDGE), Reducer 21 (SIMPLE_EDGE), Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 6 (SIMPLE_EDGE)
Reducer 9 <- Map 29 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 7 vectorized
      File Output Operator [FS_417]
        Limit [LIM_416] (rows=100 width=88)
          Number of rows:100
          Select Operator [SEL_415] (rows=287493839 width=88)
            Output:["_col0","_col1","_col2"]
          <-Reducer 6 [SIMPLE_EDGE]
            SHUFFLE [RS_129]
              Select Operator [SEL_128] (rows=287493839 width=88)
                Output:["_col0","_col1","_col2"]
                Filter Operator [FIL_127] (rows=287493839 width=88)
                  predicate:CASE WHEN (_col3 is not null) THEN (CASE WHEN (_col5 is not null) THEN (((_col1 / _col5) > (_col9 / _col3))) ELSE ((null > (_col9 / _col3))) END) ELSE (CASE WHEN (_col5 is not null) THEN (((_col1 / _col5) > null)) ELSE (null) END) END
                  Merge Join Operator [MERGEJOIN_319] (rows=574987679 width=88)
                    Conds:RS_374._col0=RS_388._col0(Inner),RS_388._col0=RS_402._col0(Inner),RS_388._col0=RS_414._col0(Inner),Output:["_col1","_col3","_col5","_col6","_col7","_col8","_col9"]
                  <-Reducer 12 [SIMPLE_EDGE] vectorized
                    SHUFFLE [RS_388]
                      PartitionCols:_col0
                      Select Operator [SEL_387] (rows=58079562 width=88)
                        Output:["_col0","_col1"]
                        Filter Operator [FIL_386] (rows=58079562 width=88)
                          predicate:(_col4 > 0)
                          Select Operator [SEL_385] (rows=174238687 width=88)
                            Output:["_col0","_col4"]
                            Group By Operator [GBY_384] (rows=174238687 width=88)
                              Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["max(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3
                            <-Reducer 11 [SIMPLE_EDGE]
                              SHUFFLE [RS_57]
                                PartitionCols:_col0, _col1, _col2, _col3
                                Group By Operator [GBY_56] (rows=348477374 width=88)
                                  Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["max(_col6)"],keys:_col1, _col2, _col3, _col5
                                  Merge Join Operator [MERGEJOIN_316] (rows=348477374 width=88)
                                    Conds:RS_353._col0=RS_383._col0(Inner),Output:["_col1","_col2","_col3","_col5","_col6"]
                                  <-Reducer 19 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_353]
                                      PartitionCols:_col0
                                      Group By Operator [GBY_348] (rows=40000000 width=860)
                                        Output:["_col0","_col1","_col2","_col3"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3
                                      <-Map 18 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_347]
                                          PartitionCols:_col0, _col1, _col2, _col3
                                          Group By Operator [GBY_346] (rows=80000000 width=860)
                                            Output:["_col0","_col1","_col2","_col3"],keys:_col0, _col1, _col2, _col3
                                            Select Operator [SEL_345] (rows=80000000 width=860)
                                              Output:["_col0","_col1","_col2","_col3"]
                                              Filter Operator [FIL_344] (rows=80000000 width=860)
                                                predicate:(c_customer_id is not null and c_customer_sk is not null)
                                                TableScan [TS_92] (rows=80000000 width=860)
                                                  default@customer,customer,Tbl:COMPLETE,Col:NONE,Output:["c_customer_sk","c_customer_id","c_first_name","c_last_name"]
                                  <-Reducer 10 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_383]
                                      PartitionCols:_col0
                                      Group By Operator [GBY_382] (rows=316797606 width=88)
                                        Output:["_col0","_col1","_col2"],aggregations:["max(VALUE._col0)"],keys:KEY._col0, KEY._col1
                                      <-Reducer 9 [SIMPLE_EDGE]
                                        SHUFFLE [RS_49]
                                          PartitionCols:_col0, _col1
                                          Group By Operator [GBY_48] (rows=633595212 width=88)
                                            Output:["_col0","_col1","_col2"],aggregations:["max(_col2)"],keys:_col1, _col4
                                            Merge Join Operator [MERGEJOIN_312] (rows=633595212 width=88)
                                              Conds:RS_381._col0=RS_330._col0(Inner),Output:["_col1","_col2","_col4"]
                                            <-Map 29 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_330]
                                                PartitionCols:_col0
                                                Select Operator [SEL_324] (rows=36524 width=1119)
                                                  Output:["_col0","_col1"]
                                                  Filter Operator [FIL_321] (rows=36524 width=1119)
                                                    predicate:((d_year = 2001) and (d_year) IN (2001, 2002) and d_date_sk is not null)
                                                    TableScan [TS_103] (rows=73049 width=1119)
                                                      default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_year"]
                                            <-Map 8 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_381]
                                                PartitionCols:_col0
                                                Select Operator [SEL_380] (rows=575995635 width=88)
                                                  Output:["_col0","_col1","_col2"]
                                                  Filter Operator [FIL_379] (rows=575995635 width=88)
                                                    predicate:((ss_customer_sk BETWEEN DynamicValue(RS_52_customer_c_customer_sk_min) AND DynamicValue(RS_52_customer_c_customer_sk_max) and in_bloom_filter(ss_customer_sk, DynamicValue(RS_52_customer_c_customer_sk_bloom_filter))) and (ss_sold_date_sk BETWEEN DynamicValue(RS_45_date_dim_d_date_sk_min) AND DynamicValue(RS_45_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_45_date_dim_d_date_sk_bloom_filter))) and ss_customer_sk is not null and ss_sold_date_sk is not null)
                                                    TableScan [TS_38] (rows=575995635 width=88)
                                                      default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_date_sk","ss_customer_sk","ss_net_paid"]
                                                    <-Reducer 24 [BROADCAST_EDGE] vectorized
                                                      BROADCAST [RS_378]
                                                        Group By Operator [GBY_377] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=40000000)"]
                                                        <-Reducer 19 [CUSTOM_SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_363]
                                                            Group By Operator [GBY_359] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=40000000)"]
                                                              Select Operator [SEL_354] (rows=40000000 width=860)
                                                                Output:["_col0"]
                                                                 Please refer to the previous Group By Operator [GBY_348]
                                                    <-Reducer 32 [BROADCAST_EDGE] vectorized
                                                      BROADCAST [RS_376]
                                                        Group By Operator [GBY_375] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                        <-Map 29 [CUSTOM_SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_340]
                                                            Group By Operator [GBY_336] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                              Select Operator [SEL_331] (rows=36524 width=1119)
                                                                Output:["_col0"]
                                                                 Please refer to the previous Select Operator [SEL_324]
                  <-Reducer 17 [SIMPLE_EDGE] vectorized
                    SHUFFLE [RS_402]
                      PartitionCols:_col0
                      Select Operator [SEL_401] (rows=14520269 width=135)
                        Output:["_col0","_col1"]
                        Filter Operator [FIL_400] (rows=14520269 width=135)
                          predicate:(_col4 > 0)
                          Select Operator [SEL_399] (rows=43560808 width=135)
                            Output:["_col0","_col4"]
                            Group By Operator [GBY_398] (rows=43560808 width=135)
                              Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["max(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3
                            <-Reducer 16 [SIMPLE_EDGE]
                              SHUFFLE [RS_88]
                                PartitionCols:_col0, _col1, _col2, _col3
                                Group By Operator [GBY_87] (rows=87121617 width=135)
                                  Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["max(_col6)"],keys:_col1, _col2, _col3, _col5
                                  Merge Join Operator [MERGEJOIN_317] (rows=87121617 width=135)
                                    Conds:RS_355._col0=RS_397._col0(Inner),Output:["_col1","_col2","_col3","_col5","_col6"]
                                  <-Reducer 19 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_355]
                                      PartitionCols:_col0
                                       Please refer to the previous Group By Operator [GBY_348]
                                  <-Reducer 15 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_397]
                                      PartitionCols:_col0
                                      Group By Operator [GBY_396] (rows=79201469 width=135)
                                        Output:["_col0","_col1","_col2"],aggregations:["max(VALUE._col0)"],keys:KEY._col0, KEY._col1
                                      <-Reducer 14 [SIMPLE_EDGE]
                                        SHUFFLE [RS_80]
                                          PartitionCols:_col0, _col1
                                          Group By Operator [GBY_79] (rows=158402938 width=135)
                                            Output:["_col0","_col1","_col2"],aggregations:["max(_col2)"],keys:_col1, _col4
                                            Merge Join Operator [MERGEJOIN_313] (rows=158402938 width=135)
                                              Conds:RS_395._col0=RS_332._col0(Inner),Output:["_col1","_col2","_col4"]
                                            <-Map 29 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_332]
                                                PartitionCols:_col0
                                                Select Operator [SEL_325] (rows=36524 width=1119)
                                                  Output:["_col0","_col1"]
                                                  Filter Operator [FIL_322] (rows=36524 width=1119)
                                                    predicate:((d_year = 2001) and (d_year) IN (2001, 2002) and d_date_sk is not null)
                                                     Please refer to the previous TableScan [TS_103]
                                            <-Map 13 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_395]
                                                PartitionCols:_col0
                                                Select Operator [SEL_394] (rows=144002668 width=135)
                                                  Output:["_col0","_col1","_col2"]
                                                  Filter Operator [FIL_393] (rows=144002668 width=135)
                                                    predicate:((ws_bill_customer_sk BETWEEN DynamicValue(RS_83_customer_c_customer_sk_min) AND DynamicValue(RS_83_customer_c_customer_sk_max) and in_bloom_filter(ws_bill_customer_sk, DynamicValue(RS_83_customer_c_customer_sk_bloom_filter))) and (ws_sold_date_sk BETWEEN DynamicValue(RS_76_date_dim_d_date_sk_min) AND DynamicValue(RS_76_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_76_date_dim_d_date_sk_bloom_filter))) and ws_bill_customer_sk is not null and ws_sold_date_sk is not null)
                                                    TableScan [TS_69] (rows=144002668 width=135)
                                                      default@web_sales,web_sales,Tbl:COMPLETE,Col:NONE,Output:["ws_sold_date_sk","ws_bill_customer_sk","ws_net_paid"]
                                                    <-Reducer 25 [BROADCAST_EDGE] vectorized
                                                      BROADCAST [RS_392]
                                                        Group By Operator [GBY_391] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=40000000)"]
                                                        <-Reducer 19 [CUSTOM_SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_364]
                                                            Group By Operator [GBY_360] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=40000000)"]
                                                              Select Operator [SEL_356] (rows=40000000 width=860)
                                                                Output:["_col0"]
                                                                 Please refer to the previous Group By Operator [GBY_348]
                                                    <-Reducer 33 [BROADCAST_EDGE] vectorized
                                                      BROADCAST [RS_390]
                                                        Group By Operator [GBY_389] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                        <-Map 29 [CUSTOM_SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_341]
                                                            Group By Operator [GBY_337] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                              Select Operator [SEL_333] (rows=36524 width=1119)
                                                                Output:["_col0"]
                                                                 Please refer to the previous Select Operator [SEL_325]
                  <-Reducer 21 [SIMPLE_EDGE] vectorized
                    SHUFFLE [RS_414]
                      PartitionCols:_col0
                      Select Operator [SEL_413] (rows=174238687 width=88)
                        Output:["_col0","_col1","_col2","_col3"]
                        Group By Operator [GBY_412] (rows=174238687 width=88)
                          Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["max(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3
                        <-Reducer 20 [SIMPLE_EDGE]
                          SHUFFLE [RS_119]
                            PartitionCols:_col0, _col1, _col2, _col3
                            Group By Operator [GBY_118] (rows=348477374 width=88)
                              Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["max(_col6)"],keys:_col1, _col2, _col3, _col5
                              Merge Join Operator [MERGEJOIN_318] (rows=348477374 width=88)
                                Conds:RS_349._col0=RS_411._col0(Inner),Output:["_col1","_col2","_col3","_col5","_col6"]
                              <-Reducer 19 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_349]
                                  PartitionCols:_col0
                                   Please refer to the previous Group By Operator [GBY_348]
                              <-Reducer 28 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_411]
                                  PartitionCols:_col0
                                  Group By Operator [GBY_410] (rows=316797606 width=88)
                                    Output:["_col0","_col1","_col2"],aggregations:["max(VALUE._col0)"],keys:KEY._col0, KEY._col1
                                  <-Reducer 27 [SIMPLE_EDGE]
                                    SHUFFLE [RS_111]
                                      PartitionCols:_col0, _col1
                                      Group By Operator [GBY_110] (rows=633595212 width=88)
                                        Output:["_col0","_col1","_col2"],aggregations:["max(_col2)"],keys:_col1, _col4
                                        Merge Join Operator [MERGEJOIN_314] (rows=633595212 width=88)
                                          Conds:RS_409._col0=RS_326._col0(Inner),Output:["_col1","_col2","_col4"]
                                        <-Map 29 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_326]
                                            PartitionCols:_col0
                                            Select Operator [SEL_323] (rows=36524 width=1119)
                                              Output:["_col0","_col1"]
                                              Filter Operator [FIL_320] (rows=36524 width=1119)
                                                predicate:((d_year = 2002) and (d_year) IN (2001, 2002) and d_date_sk is not null)
                                                 Please refer to the previous TableScan [TS_103]
                                        <-Map 26 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_409]
                                            PartitionCols:_col0
                                            Select Operator [SEL_408] (rows=575995635 width=88)
                                              Output:["_col0","_col1","_col2"]
                                              Filter Operator [FIL_407] (rows=575995635 width=88)
                                                predicate:((ss_customer_sk BETWEEN DynamicValue(RS_114_customer_c_customer_sk_min) AND DynamicValue(RS_114_customer_c_customer_sk_max) and in_bloom_filter(ss_customer_sk, DynamicValue(RS_114_customer_c_customer_sk_bloom_filter))) and (ss_sold_date_sk BETWEEN DynamicValue(RS_107_date_dim_d_date_sk_min) AND DynamicValue(RS_107_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_107_date_dim_d_date_sk_bloom_filter))) and ss_customer_sk is not null and ss_sold_date_sk is not null)
                                                TableScan [TS_100] (rows=575995635 width=88)
                                                  default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_date_sk","ss_customer_sk","ss_net_paid"]
                                                <-Reducer 22 [BROADCAST_EDGE] vectorized
                                                  BROADCAST [RS_406]
                                                    Group By Operator [GBY_405] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=40000000)"]
                                                    <-Reducer 19 [CUSTOM_SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_361]
                                                        Group By Operator [GBY_357] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=40000000)"]
                                                          Select Operator [SEL_350] (rows=40000000 width=860)
                                                            Output:["_col0"]
                                                             Please refer to the previous Group By Operator [GBY_348]
                                                <-Reducer 30 [BROADCAST_EDGE] vectorized
                                                  BROADCAST [RS_404]
                                                    Group By Operator [GBY_403] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                    <-Map 29 [CUSTOM_SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_338]
                                                        Group By Operator [GBY_334] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                          Select Operator [SEL_327] (rows=36524 width=1119)
                                                            Output:["_col0"]
                                                             Please refer to the previous Select Operator [SEL_323]
                  <-Reducer 5 [SIMPLE_EDGE] vectorized
                    SHUFFLE [RS_374]
                      PartitionCols:_col0
                      Select Operator [SEL_373] (rows=43560808 width=135)
                        Output:["_col0","_col1"]
                        Group By Operator [GBY_372] (rows=43560808 width=135)
                          Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["max(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3
                        <-Reducer 4 [SIMPLE_EDGE]
                          SHUFFLE [RS_27]
                            PartitionCols:_col0, _col1, _col2, _col3
                            Group By Operator [GBY_26] (rows=87121617 width=135)
                              Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["max(_col6)"],keys:_col1, _col2, _col3, _col5
                              Merge Join Operator [MERGEJOIN_315] (rows=87121617 width=135)
                                Conds:RS_351._col0=RS_371._col0(Inner),Output:["_col1","_col2","_col3","_col5","_col6"]
                              <-Reducer 19 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_351]
                                  PartitionCols:_col0
                                   Please refer to the previous Group By Operator [GBY_348]
                              <-Reducer 3 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_371]
                                  PartitionCols:_col0
                                  Group By Operator [GBY_370] (rows=79201469 width=135)
                                    Output:["_col0","_col1","_col2"],aggregations:["max(VALUE._col0)"],keys:KEY._col0, KEY._col1
                                  <-Reducer 2 [SIMPLE_EDGE]
                                    SHUFFLE [RS_19]
                                      PartitionCols:_col0, _col1
                                      Group By Operator [GBY_18] (rows=158402938 width=135)
                                        Output:["_col0","_col1","_col2"],aggregations:["max(_col2)"],keys:_col1, _col4
                                        Merge Join Operator [MERGEJOIN_311] (rows=158402938 width=135)
                                          Conds:RS_369._col0=RS_328._col0(Inner),Output:["_col1","_col2","_col4"]
                                        <-Map 29 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_328]
                                            PartitionCols:_col0
                                             Please refer to the previous Select Operator [SEL_323]
                                        <-Map 1 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_369]
                                            PartitionCols:_col0
                                            Select Operator [SEL_368] (rows=144002668 width=135)
                                              Output:["_col0","_col1","_col2"]
                                              Filter Operator [FIL_367] (rows=144002668 width=135)
                                                predicate:((ws_bill_customer_sk BETWEEN DynamicValue(RS_22_customer_c_customer_sk_min) AND DynamicValue(RS_22_customer_c_customer_sk_max) and in_bloom_filter(ws_bill_customer_sk, DynamicValue(RS_22_customer_c_customer_sk_bloom_filter))) and (ws_sold_date_sk BETWEEN DynamicValue(RS_15_date_dim_d_date_sk_min) AND DynamicValue(RS_15_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_15_date_dim_d_date_sk_bloom_filter))) and ws_bill_customer_sk is not null and ws_sold_date_sk is not null)
                                                TableScan [TS_8] (rows=144002668 width=135)
                                                  default@web_sales,web_sales,Tbl:COMPLETE,Col:NONE,Output:["ws_sold_date_sk","ws_bill_customer_sk","ws_net_paid"]
                                                <-Reducer 23 [BROADCAST_EDGE] vectorized
                                                  BROADCAST [RS_366]
                                                    Group By Operator [GBY_365] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=40000000)"]
                                                    <-Reducer 19 [CUSTOM_SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_362]
                                                        Group By Operator [GBY_358] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=40000000)"]
                                                          Select Operator [SEL_352] (rows=40000000 width=860)
                                                            Output:["_col0"]
                                                             Please refer to the previous Group By Operator [GBY_348]
                                                <-Reducer 31 [BROADCAST_EDGE] vectorized
                                                  BROADCAST [RS_343]
                                                    Group By Operator [GBY_342] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                    <-Map 29 [CUSTOM_SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_339]
                                                        Group By Operator [GBY_335] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                          Select Operator [SEL_329] (rows=36524 width=1119)
                                                            Output:["_col0"]
                                                             Please refer to the previous Select Operator [SEL_323]

