PREHOOK: query: explain
with year_total as (
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,d_year as year
       ,max(ss_net_paid) year_total
       ,'s' sale_type
 from customer
     ,store_sales
     ,date_dim
 where c_customer_sk = ss_customer_sk
   and ss_sold_date_sk = d_date_sk
   and d_year in (2001,2001+1)
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,d_year
 union all
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,d_year as year
       ,max(ws_net_paid) year_total
       ,'w' sale_type
 from customer
     ,web_sales
     ,date_dim
 where c_customer_sk = ws_bill_customer_sk
   and ws_sold_date_sk = d_date_sk
   and d_year in (2001,2001+1)
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,d_year
         )
  select 
        t_s_secyear.customer_id, t_s_secyear.customer_first_name, t_s_secyear.customer_last_name
 from year_total t_s_firstyear
     ,year_total t_s_secyear
     ,year_total t_w_firstyear
     ,year_total t_w_secyear
 where t_s_secyear.customer_id = t_s_firstyear.customer_id
         and t_s_firstyear.customer_id = t_w_secyear.customer_id
         and t_s_firstyear.customer_id = t_w_firstyear.customer_id
         and t_s_firstyear.sale_type = 's'
         and t_w_firstyear.sale_type = 'w'
         and t_s_secyear.sale_type = 's'
         and t_w_secyear.sale_type = 'w'
         and t_s_firstyear.year = 2001
         and t_s_secyear.year = 2001+1
         and t_w_firstyear.year = 2001
         and t_w_secyear.year = 2001+1
         and t_s_firstyear.year_total > 0
         and t_w_firstyear.year_total > 0
         and case when t_w_firstyear.year_total > 0 then t_w_secyear.year_total / t_w_firstyear.year_total else null end
           > case when t_s_firstyear.year_total > 0 then t_s_secyear.year_total / t_s_firstyear.year_total else null end
 order by 2,1,3
limit 100
PREHOOK: type: QUERY
POSTHOOK: query: explain
with year_total as (
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,d_year as year
       ,max(ss_net_paid) year_total
       ,'s' sale_type
 from customer
     ,store_sales
     ,date_dim
 where c_customer_sk = ss_customer_sk
   and ss_sold_date_sk = d_date_sk
   and d_year in (2001,2001+1)
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,d_year
 union all
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,d_year as year
       ,max(ws_net_paid) year_total
       ,'w' sale_type
 from customer
     ,web_sales
     ,date_dim
 where c_customer_sk = ws_bill_customer_sk
   and ws_sold_date_sk = d_date_sk
   and d_year in (2001,2001+1)
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,d_year
         )
  select 
        t_s_secyear.customer_id, t_s_secyear.customer_first_name, t_s_secyear.customer_last_name
 from year_total t_s_firstyear
     ,year_total t_s_secyear
     ,year_total t_w_firstyear
     ,year_total t_w_secyear
 where t_s_secyear.customer_id = t_s_firstyear.customer_id
         and t_s_firstyear.customer_id = t_w_secyear.customer_id
         and t_s_firstyear.customer_id = t_w_firstyear.customer_id
         and t_s_firstyear.sale_type = 's'
         and t_w_firstyear.sale_type = 'w'
         and t_s_secyear.sale_type = 's'
         and t_w_secyear.sale_type = 'w'
         and t_s_firstyear.year = 2001
         and t_s_secyear.year = 2001+1
         and t_w_firstyear.year = 2001
         and t_w_secyear.year = 2001+1
         and t_s_firstyear.year_total > 0
         and t_w_firstyear.year_total > 0
         and case when t_w_firstyear.year_total > 0 then t_w_secyear.year_total / t_w_firstyear.year_total else null end
           > case when t_s_firstyear.year_total > 0 then t_s_secyear.year_total / t_s_firstyear.year_total else null end
 order by 2,1,3
limit 100
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 21 (BROADCAST_EDGE)
Map 11 <- Reducer 23 (BROADCAST_EDGE)
Map 15 <- Reducer 20 (BROADCAST_EDGE)
Map 7 <- Reducer 22 (BROADCAST_EDGE)
Reducer 10 <- Reducer 9 (SIMPLE_EDGE)
Reducer 12 <- Map 11 (SIMPLE_EDGE), Map 19 (SIMPLE_EDGE)
Reducer 13 <- Map 24 (SIMPLE_EDGE), Reducer 12 (SIMPLE_EDGE)
Reducer 14 <- Reducer 13 (SIMPLE_EDGE)
Reducer 16 <- Map 15 (SIMPLE_EDGE), Map 19 (SIMPLE_EDGE)
Reducer 17 <- Map 24 (SIMPLE_EDGE), Reducer 16 (SIMPLE_EDGE)
Reducer 18 <- Reducer 17 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 19 (SIMPLE_EDGE)
Reducer 20 <- Map 19 (CUSTOM_SIMPLE_EDGE)
Reducer 21 <- Map 19 (CUSTOM_SIMPLE_EDGE)
Reducer 22 <- Map 19 (CUSTOM_SIMPLE_EDGE)
Reducer 23 <- Map 19 (CUSTOM_SIMPLE_EDGE)
Reducer 3 <- Map 24 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 10 (SIMPLE_EDGE), Reducer 14 (SIMPLE_EDGE), Reducer 18 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (SIMPLE_EDGE)
Reducer 8 <- Map 19 (SIMPLE_EDGE), Map 7 (SIMPLE_EDGE)
Reducer 9 <- Map 24 (SIMPLE_EDGE), Reducer 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 6 vectorized
      File Output Operator [FS_346]
        Limit [LIM_345] (rows=100 width=280)
          Number of rows:100
          Select Operator [SEL_344] (rows=93786629 width=280)
            Output:["_col0","_col1","_col2"]
          <-Reducer 5 [SIMPLE_EDGE]
            SHUFFLE [RS_89]
              Select Operator [SEL_88] (rows=93786629 width=280)
                Output:["_col0","_col1","_col2"]
                Filter Operator [FIL_87] (rows=93786629 width=728)
                  predicate:CASE WHEN (_col3 is not null) THEN (CASE WHEN (_col5 is not null) THEN (((_col1 / _col5) > (_col9 / _col3))) ELSE ((null > (_col9 / _col3))) END) ELSE (CASE WHEN (_col5 is not null) THEN (((_col1 / _col5) > null)) ELSE (null) END) END
                  Merge Join Operator [MERGEJOIN_279] (rows=187573258 width=728)
                    Conds:RS_315._col0=RS_325._col0(Inner),RS_325._col0=RS_335._col0(Inner),RS_325._col0=RS_343._col0(Inner),Output:["_col1","_col3","_col5","_col6","_col7","_col8","_col9"]
                  <-Reducer 10 [SIMPLE_EDGE] vectorized
                    SHUFFLE [RS_325]
                      PartitionCols:_col0
                      Select Operator [SEL_324] (rows=62524419 width=212)
                        Output:["_col0","_col1"]
                        Filter Operator [FIL_323] (rows=62524419 width=212)
                          predicate:(_col4 > 0)
                          Select Operator [SEL_322] (rows=187573258 width=212)
                            Output:["_col0","_col4"]
                            Group By Operator [GBY_321] (rows=187573258 width=396)
                              Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["max(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3
                            <-Reducer 9 [SIMPLE_EDGE]
                              SHUFFLE [RS_37]
                                PartitionCols:_col0, _col1, _col2, _col3
                                Group By Operator [GBY_36] (rows=187573258 width=396)
                                  Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["max(_col2)"],keys:_col6, _col7, _col8, _col4
                                  Merge Join Operator [MERGEJOIN_274] (rows=187573258 width=381)
                                    Conds:RS_32._col1=RS_311._col0(Inner),Output:["_col2","_col4","_col6","_col7","_col8"]
                                  <-Map 24 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_311]
                                      PartitionCols:_col0
                                      Select Operator [SEL_308] (rows=80000000 width=284)
                                        Output:["_col0","_col1","_col2","_col3"]
                                        Filter Operator [FIL_307] (rows=80000000 width=284)
                                          predicate:(c_customer_id is not null and c_customer_sk is not null)
                                          TableScan [TS_68] (rows=80000000 width=284)
                                            default@customer,customer,Tbl:COMPLETE,Col:COMPLETE,Output:["c_customer_sk","c_customer_id","c_first_name","c_last_name"]
                                  <-Reducer 8 [SIMPLE_EDGE]
                                    SHUFFLE [RS_32]
                                      PartitionCols:_col1
                                      Merge Join Operator [MERGEJOIN_273] (rows=187573258 width=105)
                                        Conds:RS_320._col0=RS_290._col0(Inner),Output:["_col1","_col2","_col4"]
                                      <-Map 19 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_290]
                                          PartitionCols:_col0
                                          Select Operator [SEL_284] (rows=652 width=8)
                                            Output:["_col0","_col1"]
                                            Filter Operator [FIL_281] (rows=652 width=8)
                                              predicate:((d_year = 2001) and (d_year) IN (2001, 2002) and d_date_sk is not null)
                                              TableScan [TS_65] (rows=73049 width=8)
                                                default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                      <-Map 7 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_320]
                                          PartitionCols:_col0
                                          Select Operator [SEL_319] (rows=525327388 width=114)
                                            Output:["_col0","_col1","_col2"]
                                            Filter Operator [FIL_318] (rows=525327388 width=114)
                                              predicate:((ss_sold_date_sk BETWEEN DynamicValue(RS_30_date_dim_d_date_sk_min) AND DynamicValue(RS_30_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_30_date_dim_d_date_sk_bloom_filter))) and ss_customer_sk is not null and ss_sold_date_sk is not null)
                                              TableScan [TS_20] (rows=575995635 width=114)
                                                default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_customer_sk","ss_net_paid"]
                                              <-Reducer 22 [BROADCAST_EDGE] vectorized
                                                BROADCAST [RS_317]
                                                  Group By Operator [GBY_316] (rows=1 width=12)
                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                  <-Map 19 [CUSTOM_SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_300]
                                                      Group By Operator [GBY_296] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                        Select Operator [SEL_291] (rows=652 width=4)
                                                          Output:["_col0"]
                                                           Please refer to the previous Select Operator [SEL_284]
                  <-Reducer 14 [SIMPLE_EDGE] vectorized
                    SHUFFLE [RS_335]
                      PartitionCols:_col0
                      Select Operator [SEL_334] (rows=17130654 width=212)
                        Output:["_col0","_col1"]
                        Filter Operator [FIL_333] (rows=17130654 width=212)
                          predicate:(_col4 > 0)
                          Select Operator [SEL_332] (rows=51391963 width=212)
                            Output:["_col0","_col4"]
                            Group By Operator [GBY_331] (rows=51391963 width=396)
                              Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["max(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3
                            <-Reducer 13 [SIMPLE_EDGE]
                              SHUFFLE [RS_58]
                                PartitionCols:_col0, _col1, _col2, _col3
                                Group By Operator [GBY_57] (rows=51391963 width=396)
                                  Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["max(_col2)"],keys:_col6, _col7, _col8, _col4
                                  Merge Join Operator [MERGEJOIN_276] (rows=51391963 width=395)
                                    Conds:RS_53._col1=RS_312._col0(Inner),Output:["_col2","_col4","_col6","_col7","_col8"]
                                  <-Map 24 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_312]
                                      PartitionCols:_col0
                                       Please refer to the previous Select Operator [SEL_308]
                                  <-Reducer 12 [SIMPLE_EDGE]
                                    SHUFFLE [RS_53]
                                      PartitionCols:_col1
                                      Merge Join Operator [MERGEJOIN_275] (rows=51391963 width=119)
                                        Conds:RS_330._col0=RS_292._col0(Inner),Output:["_col1","_col2","_col4"]
                                      <-Map 19 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_292]
                                          PartitionCols:_col0
                                          Select Operator [SEL_285] (rows=652 width=8)
                                            Output:["_col0","_col1"]
                                            Filter Operator [FIL_282] (rows=652 width=8)
                                              predicate:((d_year = 2001) and (d_year) IN (2001, 2002) and d_date_sk is not null)
                                               Please refer to the previous TableScan [TS_65]
                                      <-Map 11 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_330]
                                          PartitionCols:_col0
                                          Select Operator [SEL_329] (rows=143930993 width=119)
                                            Output:["_col0","_col1","_col2"]
                                            Filter Operator [FIL_328] (rows=143930993 width=119)
                                              predicate:((ws_sold_date_sk BETWEEN DynamicValue(RS_51_date_dim_d_date_sk_min) AND DynamicValue(RS_51_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_51_date_dim_d_date_sk_bloom_filter))) and ws_bill_customer_sk is not null and ws_sold_date_sk is not null)
                                              TableScan [TS_41] (rows=144002668 width=119)
                                                default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_bill_customer_sk","ws_net_paid"]
                                              <-Reducer 23 [BROADCAST_EDGE] vectorized
                                                BROADCAST [RS_327]
                                                  Group By Operator [GBY_326] (rows=1 width=12)
                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                  <-Map 19 [CUSTOM_SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_301]
                                                      Group By Operator [GBY_297] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                        Select Operator [SEL_293] (rows=652 width=4)
                                                          Output:["_col0"]
                                                           Please refer to the previous Select Operator [SEL_285]
                  <-Reducer 18 [SIMPLE_EDGE] vectorized
                    SHUFFLE [RS_343]
                      PartitionCols:_col0
                      Select Operator [SEL_342] (rows=187573258 width=392)
                        Output:["_col0","_col1","_col2","_col3"]
                        Group By Operator [GBY_341] (rows=187573258 width=396)
                          Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["max(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3
                        <-Reducer 17 [SIMPLE_EDGE]
                          SHUFFLE [RS_79]
                            PartitionCols:_col0, _col1, _col2, _col3
                            Group By Operator [GBY_78] (rows=187573258 width=396)
                              Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["max(_col2)"],keys:_col6, _col7, _col8, _col4
                              Merge Join Operator [MERGEJOIN_278] (rows=187573258 width=381)
                                Conds:RS_74._col1=RS_309._col0(Inner),Output:["_col2","_col4","_col6","_col7","_col8"]
                              <-Map 24 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_309]
                                  PartitionCols:_col0
                                   Please refer to the previous Select Operator [SEL_308]
                              <-Reducer 16 [SIMPLE_EDGE]
                                SHUFFLE [RS_74]
                                  PartitionCols:_col1
                                  Merge Join Operator [MERGEJOIN_277] (rows=187573258 width=105)
                                    Conds:RS_340._col0=RS_286._col0(Inner),Output:["_col1","_col2","_col4"]
                                  <-Map 19 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_286]
                                      PartitionCols:_col0
                                      Select Operator [SEL_283] (rows=652 width=8)
                                        Output:["_col0","_col1"]
                                        Filter Operator [FIL_280] (rows=652 width=8)
                                          predicate:((d_year = 2002) and (d_year) IN (2001, 2002) and d_date_sk is not null)
                                           Please refer to the previous TableScan [TS_65]
                                  <-Map 15 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_340]
                                      PartitionCols:_col0
                                      Select Operator [SEL_339] (rows=525327388 width=114)
                                        Output:["_col0","_col1","_col2"]
                                        Filter Operator [FIL_338] (rows=525327388 width=114)
                                          predicate:((ss_sold_date_sk BETWEEN DynamicValue(RS_72_date_dim_d_date_sk_min) AND DynamicValue(RS_72_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_72_date_dim_d_date_sk_bloom_filter))) and ss_customer_sk is not null and ss_sold_date_sk is not null)
                                          TableScan [TS_62] (rows=575995635 width=114)
                                            default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_customer_sk","ss_net_paid"]
                                          <-Reducer 20 [BROADCAST_EDGE] vectorized
                                            BROADCAST [RS_337]
                                              Group By Operator [GBY_336] (rows=1 width=12)
                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                              <-Map 19 [CUSTOM_SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_298]
                                                  Group By Operator [GBY_294] (rows=1 width=12)
                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                    Select Operator [SEL_287] (rows=652 width=4)
                                                      Output:["_col0"]
                                                       Please refer to the previous Select Operator [SEL_283]
                  <-Reducer 4 [SIMPLE_EDGE] vectorized
                    SHUFFLE [RS_315]
                      PartitionCols:_col0
                      Select Operator [SEL_314] (rows=51391963 width=212)
                        Output:["_col0","_col1"]
                        Group By Operator [GBY_313] (rows=51391963 width=396)
                          Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["max(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3
                        <-Reducer 3 [SIMPLE_EDGE]
                          SHUFFLE [RS_17]
                            PartitionCols:_col0, _col1, _col2, _col3
                            Group By Operator [GBY_16] (rows=51391963 width=396)
                              Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["max(_col2)"],keys:_col6, _col7, _col8, _col4
                              Merge Join Operator [MERGEJOIN_272] (rows=51391963 width=395)
                                Conds:RS_12._col1=RS_310._col0(Inner),Output:["_col2","_col4","_col6","_col7","_col8"]
                              <-Map 24 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_310]
                                  PartitionCols:_col0
                                   Please refer to the previous Select Operator [SEL_308]
                              <-Reducer 2 [SIMPLE_EDGE]
                                SHUFFLE [RS_12]
                                  PartitionCols:_col1
                                  Merge Join Operator [MERGEJOIN_271] (rows=51391963 width=119)
                                    Conds:RS_306._col0=RS_288._col0(Inner),Output:["_col1","_col2","_col4"]
                                  <-Map 19 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_288]
                                      PartitionCols:_col0
                                       Please refer to the previous Select Operator [SEL_283]
                                  <-Map 1 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_306]
                                      PartitionCols:_col0
                                      Select Operator [SEL_305] (rows=143930993 width=119)
                                        Output:["_col0","_col1","_col2"]
                                        Filter Operator [FIL_304] (rows=143930993 width=119)
                                          predicate:((ws_sold_date_sk BETWEEN DynamicValue(RS_10_date_dim_d_date_sk_min) AND DynamicValue(RS_10_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_10_date_dim_d_date_sk_bloom_filter))) and ws_bill_customer_sk is not null and ws_sold_date_sk is not null)
                                          TableScan [TS_0] (rows=144002668 width=119)
                                            default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_bill_customer_sk","ws_net_paid"]
                                          <-Reducer 21 [BROADCAST_EDGE] vectorized
                                            BROADCAST [RS_303]
                                              Group By Operator [GBY_302] (rows=1 width=12)
                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                              <-Map 19 [CUSTOM_SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_299]
                                                  Group By Operator [GBY_295] (rows=1 width=12)
                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                    Select Operator [SEL_289] (rows=652 width=4)
                                                      Output:["_col0"]
                                                       Please refer to the previous Select Operator [SEL_283]

