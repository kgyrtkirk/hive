Warning: Shuffle Join MERGEJOIN[1653][tables = [$hdt$_1, $hdt$_2, $hdt$_0]] in Stage 'Reducer 5' is a cross product
Warning: Shuffle Join MERGEJOIN[1666][tables = [$hdt$_1, $hdt$_2, $hdt$_0]] in Stage 'Reducer 12' is a cross product
Warning: Shuffle Join MERGEJOIN[1679][tables = [$hdt$_2, $hdt$_3, $hdt$_1]] in Stage 'Reducer 16' is a cross product
PREHOOK: query: explain
with  cross_items as
 (select i_item_sk ss_item_sk
 from item,
 (select iss.i_brand_id brand_id
     ,iss.i_class_id class_id
     ,iss.i_category_id category_id
 from store_sales
     ,item iss
     ,date_dim d1
 where ss_item_sk = iss.i_item_sk
   and ss_sold_date_sk = d1.d_date_sk
   and d1.d_year between 1999 AND 1999 + 2
 intersect 
 select ics.i_brand_id
     ,ics.i_class_id
     ,ics.i_category_id
 from catalog_sales
     ,item ics
     ,date_dim d2
 where cs_item_sk = ics.i_item_sk
   and cs_sold_date_sk = d2.d_date_sk
   and d2.d_year between 1999 AND 1999 + 2
 intersect
 select iws.i_brand_id
     ,iws.i_class_id
     ,iws.i_category_id
 from web_sales
     ,item iws
     ,date_dim d3
 where ws_item_sk = iws.i_item_sk
   and ws_sold_date_sk = d3.d_date_sk
   and d3.d_year between 1999 AND 1999 + 2) x
 where i_brand_id = brand_id
      and i_class_id = class_id
      and i_category_id = category_id
),
 avg_sales as
 (select avg(quantity*list_price) average_sales
  from (select ss_quantity quantity
             ,ss_list_price list_price
       from store_sales
           ,date_dim
       where ss_sold_date_sk = d_date_sk
         and d_year between 1999 and 2001 
       union all 
       select cs_quantity quantity 
             ,cs_list_price list_price
       from catalog_sales
           ,date_dim
       where cs_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2 
       union all
       select ws_quantity quantity
             ,ws_list_price list_price
       from web_sales
           ,date_dim
       where ws_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2) x)
  select  channel, i_brand_id,i_class_id,i_category_id,sum(sales), sum(number_sales)
 from(
       select 'store' channel, i_brand_id,i_class_id
             ,i_category_id,sum(ss_quantity*ss_list_price) sales
             , count(*) number_sales
       from store_sales
           ,item
           ,date_dim
       where ss_item_sk in (select ss_item_sk from cross_items)
         and ss_item_sk = i_item_sk
         and ss_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ss_quantity*ss_list_price) > (select average_sales from avg_sales)
       union all
       select 'catalog' channel, i_brand_id,i_class_id,i_category_id, sum(cs_quantity*cs_list_price) sales, count(*) number_sales
       from catalog_sales
           ,item
           ,date_dim
       where cs_item_sk in (select ss_item_sk from cross_items)
         and cs_item_sk = i_item_sk
         and cs_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(cs_quantity*cs_list_price) > (select average_sales from avg_sales)
       union all
       select 'web' channel, i_brand_id,i_class_id,i_category_id, sum(ws_quantity*ws_list_price) sales , count(*) number_sales
       from web_sales
           ,item
           ,date_dim
       where ws_item_sk in (select ss_item_sk from cross_items)
         and ws_item_sk = i_item_sk
         and ws_sold_date_sk = d_date_sk
         and d_year = 1998+2
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ws_quantity*ws_list_price) > (select average_sales from avg_sales)
 ) y
 group by rollup (channel, i_brand_id,i_class_id,i_category_id)
 order by channel,i_brand_id,i_class_id,i_category_id
 limit 100
PREHOOK: type: QUERY
POSTHOOK: query: explain
with  cross_items as
 (select i_item_sk ss_item_sk
 from item,
 (select iss.i_brand_id brand_id
     ,iss.i_class_id class_id
     ,iss.i_category_id category_id
 from store_sales
     ,item iss
     ,date_dim d1
 where ss_item_sk = iss.i_item_sk
   and ss_sold_date_sk = d1.d_date_sk
   and d1.d_year between 1999 AND 1999 + 2
 intersect 
 select ics.i_brand_id
     ,ics.i_class_id
     ,ics.i_category_id
 from catalog_sales
     ,item ics
     ,date_dim d2
 where cs_item_sk = ics.i_item_sk
   and cs_sold_date_sk = d2.d_date_sk
   and d2.d_year between 1999 AND 1999 + 2
 intersect
 select iws.i_brand_id
     ,iws.i_class_id
     ,iws.i_category_id
 from web_sales
     ,item iws
     ,date_dim d3
 where ws_item_sk = iws.i_item_sk
   and ws_sold_date_sk = d3.d_date_sk
   and d3.d_year between 1999 AND 1999 + 2) x
 where i_brand_id = brand_id
      and i_class_id = class_id
      and i_category_id = category_id
),
 avg_sales as
 (select avg(quantity*list_price) average_sales
  from (select ss_quantity quantity
             ,ss_list_price list_price
       from store_sales
           ,date_dim
       where ss_sold_date_sk = d_date_sk
         and d_year between 1999 and 2001 
       union all 
       select cs_quantity quantity 
             ,cs_list_price list_price
       from catalog_sales
           ,date_dim
       where cs_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2 
       union all
       select ws_quantity quantity
             ,ws_list_price list_price
       from web_sales
           ,date_dim
       where ws_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2) x)
  select  channel, i_brand_id,i_class_id,i_category_id,sum(sales), sum(number_sales)
 from(
       select 'store' channel, i_brand_id,i_class_id
             ,i_category_id,sum(ss_quantity*ss_list_price) sales
             , count(*) number_sales
       from store_sales
           ,item
           ,date_dim
       where ss_item_sk in (select ss_item_sk from cross_items)
         and ss_item_sk = i_item_sk
         and ss_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ss_quantity*ss_list_price) > (select average_sales from avg_sales)
       union all
       select 'catalog' channel, i_brand_id,i_class_id,i_category_id, sum(cs_quantity*cs_list_price) sales, count(*) number_sales
       from catalog_sales
           ,item
           ,date_dim
       where cs_item_sk in (select ss_item_sk from cross_items)
         and cs_item_sk = i_item_sk
         and cs_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(cs_quantity*cs_list_price) > (select average_sales from avg_sales)
       union all
       select 'web' channel, i_brand_id,i_class_id,i_category_id, sum(ws_quantity*ws_list_price) sales , count(*) number_sales
       from web_sales
           ,item
           ,date_dim
       where ws_item_sk in (select ss_item_sk from cross_items)
         and ws_item_sk = i_item_sk
         and ws_sold_date_sk = d_date_sk
         and d_year = 1998+2
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ws_quantity*ws_list_price) > (select average_sales from avg_sales)
 ) y
 group by rollup (channel, i_brand_id,i_class_id,i_category_id)
 order by channel,i_brand_id,i_class_id,i_category_id
 limit 100
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 119 (BROADCAST_EDGE)
Map 106 <- Reducer 112 (BROADCAST_EDGE), Reducer 72 (BROADCAST_EDGE)
Map 121 <- Reducer 115 (BROADCAST_EDGE), Reducer 76 (BROADCAST_EDGE)
Map 123 <- Reducer 118 (BROADCAST_EDGE), Reducer 80 (BROADCAST_EDGE)
Map 125 <- Reducer 104 (BROADCAST_EDGE), Reducer 58 (BROADCAST_EDGE), Reducer 84 (BROADCAST_EDGE)
Map 126 <- Reducer 105 (BROADCAST_EDGE), Reducer 62 (BROADCAST_EDGE), Reducer 95 (BROADCAST_EDGE)
Map 17 <- Reducer 22 (BROADCAST_EDGE)
Map 33 <- Reducer 38 (BROADCAST_EDGE)
Map 43 <- Reducer 120 (BROADCAST_EDGE)
Map 47 <- Reducer 26 (BROADCAST_EDGE)
Map 48 <- Reducer 40 (BROADCAST_EDGE)
Map 49 <- Reducer 54 (BROADCAST_EDGE), Reducer 66 (BROADCAST_EDGE), Reducer 81 (BROADCAST_EDGE)
Reducer 100 <- Map 63 (SIMPLE_EDGE)
Reducer 101 <- Reducer 100 (SIMPLE_EDGE), Reducer 117 (ONE_TO_ONE_EDGE)
Reducer 102 <- Reducer 101 (SIMPLE_EDGE), Union 88 (CONTAINS)
Reducer 103 <- Reducer 101 (SIMPLE_EDGE), Union 91 (CONTAINS)
Reducer 104 <- Map 63 (CUSTOM_SIMPLE_EDGE)
Reducer 105 <- Map 63 (CUSTOM_SIMPLE_EDGE)
Reducer 107 <- Map 106 (SIMPLE_EDGE)
Reducer 108 <- Reducer 107 (SIMPLE_EDGE), Reducer 111 (ONE_TO_ONE_EDGE)
Reducer 109 <- Reducer 108 (SIMPLE_EDGE)
Reducer 11 <- Union 10 (CUSTOM_SIMPLE_EDGE)
Reducer 111 <- Map 110 (SIMPLE_EDGE)
Reducer 112 <- Reducer 111 (CUSTOM_SIMPLE_EDGE)
Reducer 113 <- Reducer 111 (ONE_TO_ONE_EDGE), Reducer 122 (SIMPLE_EDGE)
Reducer 114 <- Reducer 113 (SIMPLE_EDGE)
Reducer 115 <- Reducer 111 (CUSTOM_SIMPLE_EDGE)
Reducer 116 <- Reducer 111 (ONE_TO_ONE_EDGE), Reducer 124 (SIMPLE_EDGE)
Reducer 117 <- Reducer 116 (SIMPLE_EDGE)
Reducer 118 <- Reducer 111 (CUSTOM_SIMPLE_EDGE)
Reducer 119 <- Map 110 (CUSTOM_SIMPLE_EDGE)
Reducer 12 <- Reducer 11 (CUSTOM_SIMPLE_EDGE), Reducer 29 (CUSTOM_SIMPLE_EDGE), Reducer 57 (CUSTOM_SIMPLE_EDGE), Union 6 (CONTAINS)
Reducer 120 <- Map 110 (CUSTOM_SIMPLE_EDGE)
Reducer 122 <- Map 121 (SIMPLE_EDGE)
Reducer 124 <- Map 123 (SIMPLE_EDGE)
Reducer 13 <- Map 1 (SIMPLE_EDGE), Map 110 (SIMPLE_EDGE), Union 14 (CONTAINS)
Reducer 15 <- Union 14 (CUSTOM_SIMPLE_EDGE)
Reducer 16 <- Reducer 15 (CUSTOM_SIMPLE_EDGE), Reducer 32 (CUSTOM_SIMPLE_EDGE), Reducer 61 (CUSTOM_SIMPLE_EDGE), Union 6 (CONTAINS)
Reducer 18 <- Map 17 (SIMPLE_EDGE), Map 21 (SIMPLE_EDGE), Union 3 (CONTAINS)
Reducer 19 <- Map 17 (SIMPLE_EDGE), Map 21 (SIMPLE_EDGE), Union 10 (CONTAINS)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 110 (SIMPLE_EDGE), Union 3 (CONTAINS)
Reducer 20 <- Map 17 (SIMPLE_EDGE), Map 21 (SIMPLE_EDGE), Union 14 (CONTAINS)
Reducer 22 <- Map 21 (CUSTOM_SIMPLE_EDGE)
Reducer 23 <- Map 21 (SIMPLE_EDGE), Map 47 (SIMPLE_EDGE), Union 24 (CONTAINS)
Reducer 25 <- Union 24 (CUSTOM_SIMPLE_EDGE)
Reducer 26 <- Map 21 (CUSTOM_SIMPLE_EDGE)
Reducer 27 <- Map 21 (SIMPLE_EDGE), Map 47 (SIMPLE_EDGE), Union 28 (CONTAINS)
Reducer 29 <- Union 28 (CUSTOM_SIMPLE_EDGE)
Reducer 30 <- Map 21 (SIMPLE_EDGE), Map 47 (SIMPLE_EDGE), Union 31 (CONTAINS)
Reducer 32 <- Union 31 (CUSTOM_SIMPLE_EDGE)
Reducer 34 <- Map 33 (SIMPLE_EDGE), Map 37 (SIMPLE_EDGE), Union 3 (CONTAINS)
Reducer 35 <- Map 33 (SIMPLE_EDGE), Map 37 (SIMPLE_EDGE), Union 10 (CONTAINS)
Reducer 36 <- Map 33 (SIMPLE_EDGE), Map 37 (SIMPLE_EDGE), Union 14 (CONTAINS)
Reducer 38 <- Map 37 (CUSTOM_SIMPLE_EDGE)
Reducer 39 <- Map 37 (SIMPLE_EDGE), Map 48 (SIMPLE_EDGE), Union 24 (CONTAINS)
Reducer 4 <- Union 3 (CUSTOM_SIMPLE_EDGE)
Reducer 40 <- Map 37 (CUSTOM_SIMPLE_EDGE)
Reducer 41 <- Map 37 (SIMPLE_EDGE), Map 48 (SIMPLE_EDGE), Union 28 (CONTAINS)
Reducer 42 <- Map 37 (SIMPLE_EDGE), Map 48 (SIMPLE_EDGE), Union 31 (CONTAINS)
Reducer 44 <- Map 110 (SIMPLE_EDGE), Map 43 (SIMPLE_EDGE), Union 24 (CONTAINS)
Reducer 45 <- Map 110 (SIMPLE_EDGE), Map 43 (SIMPLE_EDGE), Union 28 (CONTAINS)
Reducer 46 <- Map 110 (SIMPLE_EDGE), Map 43 (SIMPLE_EDGE), Union 31 (CONTAINS)
Reducer 5 <- Reducer 25 (CUSTOM_SIMPLE_EDGE), Reducer 4 (CUSTOM_SIMPLE_EDGE), Reducer 52 (CUSTOM_SIMPLE_EDGE), Union 6 (CONTAINS)
Reducer 50 <- Map 49 (SIMPLE_EDGE), Map 53 (SIMPLE_EDGE)
Reducer 51 <- Map 63 (SIMPLE_EDGE), Reducer 50 (SIMPLE_EDGE), Reducer 65 (ONE_TO_ONE_EDGE)
Reducer 52 <- Reducer 51 (SIMPLE_EDGE)
Reducer 54 <- Map 53 (CUSTOM_SIMPLE_EDGE)
Reducer 55 <- Map 125 (SIMPLE_EDGE), Map 53 (SIMPLE_EDGE)
Reducer 56 <- Map 63 (SIMPLE_EDGE), Reducer 55 (SIMPLE_EDGE), Reducer 83 (ONE_TO_ONE_EDGE)
Reducer 57 <- Reducer 56 (SIMPLE_EDGE)
Reducer 58 <- Map 53 (CUSTOM_SIMPLE_EDGE)
Reducer 59 <- Map 126 (SIMPLE_EDGE), Map 53 (SIMPLE_EDGE)
Reducer 60 <- Map 63 (SIMPLE_EDGE), Reducer 59 (SIMPLE_EDGE), Reducer 94 (ONE_TO_ONE_EDGE)
Reducer 61 <- Reducer 60 (SIMPLE_EDGE)
Reducer 62 <- Map 53 (CUSTOM_SIMPLE_EDGE)
Reducer 64 <- Map 63 (SIMPLE_EDGE), Reducer 71 (ONE_TO_ONE_EDGE)
Reducer 65 <- Reducer 64 (SIMPLE_EDGE)
Reducer 66 <- Reducer 65 (CUSTOM_SIMPLE_EDGE)
Reducer 67 <- Map 63 (SIMPLE_EDGE)
Reducer 68 <- Reducer 109 (ONE_TO_ONE_EDGE), Reducer 67 (SIMPLE_EDGE)
Reducer 69 <- Reducer 68 (SIMPLE_EDGE), Union 70 (CONTAINS)
Reducer 7 <- Union 6 (SIMPLE_EDGE)
Reducer 71 <- Union 70 (SIMPLE_EDGE)
Reducer 72 <- Reducer 67 (CUSTOM_SIMPLE_EDGE)
Reducer 73 <- Map 63 (SIMPLE_EDGE)
Reducer 74 <- Reducer 114 (ONE_TO_ONE_EDGE), Reducer 73 (SIMPLE_EDGE)
Reducer 75 <- Reducer 74 (SIMPLE_EDGE), Union 70 (CONTAINS)
Reducer 76 <- Reducer 73 (CUSTOM_SIMPLE_EDGE)
Reducer 77 <- Map 63 (SIMPLE_EDGE)
Reducer 78 <- Reducer 117 (ONE_TO_ONE_EDGE), Reducer 77 (SIMPLE_EDGE)
Reducer 79 <- Reducer 78 (SIMPLE_EDGE), Union 70 (CONTAINS)
Reducer 8 <- Reducer 7 (SIMPLE_EDGE)
Reducer 80 <- Reducer 77 (CUSTOM_SIMPLE_EDGE)
Reducer 81 <- Map 63 (CUSTOM_SIMPLE_EDGE)
Reducer 82 <- Map 63 (SIMPLE_EDGE), Reducer 89 (ONE_TO_ONE_EDGE)
Reducer 83 <- Reducer 82 (SIMPLE_EDGE)
Reducer 84 <- Reducer 83 (CUSTOM_SIMPLE_EDGE)
Reducer 85 <- Map 63 (SIMPLE_EDGE)
Reducer 86 <- Reducer 109 (ONE_TO_ONE_EDGE), Reducer 85 (SIMPLE_EDGE)
Reducer 87 <- Reducer 86 (SIMPLE_EDGE), Union 88 (CONTAINS)
Reducer 89 <- Union 88 (SIMPLE_EDGE)
Reducer 9 <- Map 1 (SIMPLE_EDGE), Map 110 (SIMPLE_EDGE), Union 10 (CONTAINS)
Reducer 90 <- Reducer 86 (SIMPLE_EDGE), Union 91 (CONTAINS)
Reducer 92 <- Union 91 (SIMPLE_EDGE)
Reducer 93 <- Map 63 (SIMPLE_EDGE), Reducer 92 (ONE_TO_ONE_EDGE)
Reducer 94 <- Reducer 93 (SIMPLE_EDGE)
Reducer 95 <- Reducer 94 (CUSTOM_SIMPLE_EDGE)
Reducer 96 <- Map 63 (SIMPLE_EDGE)
Reducer 97 <- Reducer 114 (ONE_TO_ONE_EDGE), Reducer 96 (SIMPLE_EDGE)
Reducer 98 <- Reducer 97 (SIMPLE_EDGE), Union 88 (CONTAINS)
Reducer 99 <- Reducer 97 (SIMPLE_EDGE), Union 91 (CONTAINS)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 8 vectorized
      File Output Operator [FS_1928]
        Limit [LIM_1927] (rows=100 width=237)
          Number of rows:100
          Select Operator [SEL_1926] (rows=1016388080 width=237)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
          <-Reducer 7 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_1925]
              Select Operator [SEL_1924] (rows=1016388080 width=237)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                Group By Operator [GBY_1923] (rows=1016388080 width=237)
                  Output:["_col0","_col1","_col2","_col3","_col5","_col6"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4
                <-Union 6 [SIMPLE_EDGE]
                  <-Reducer 12 [CONTAINS]
                    Reduce Output Operator [RS_1672]
                      PartitionCols:_col0, _col1, _col2, _col3, _col4
                      Group By Operator [GBY_1671] (rows=2032776160 width=237)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col4)","sum(_col5)"],keys:_col0, _col1, _col2, _col3, 0L
                        Top N Key Operator [TNK_1670] (rows=406555232 width=237)
                          keys:_col0, _col1, _col2, _col3, 0L,sort order:+++++,top n:100
                          Select Operator [SEL_1668] (rows=116155905 width=264)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                            Filter Operator [FIL_1667] (rows=116155905 width=264)
                              predicate:(_col5 > _col1)
                              Merge Join Operator [MERGEJOIN_1666] (rows=348467716 width=264)
                                Conds:(Inner),(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6"]
                              <-Reducer 11 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1934]
                                  Select Operator [SEL_1933] (rows=1 width=8)
                                    Filter Operator [FIL_1932] (rows=1 width=8)
                                      predicate:(sq_count_check(_col0) <= 1)
                                      Group By Operator [GBY_1931] (rows=1 width=8)
                                        Output:["_col0"],aggregations:["count()"]
                                        Select Operator [SEL_1930] (rows=1 width=8)
                                          Group By Operator [GBY_1929] (rows=1 width=8)
                                            Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                          <-Union 10 [CUSTOM_SIMPLE_EDGE]
                                            <-Reducer 19 [CONTAINS]
                                              Reduce Output Operator [RS_1697]
                                                Group By Operator [GBY_1696] (rows=1 width=8)
                                                  Output:["_col0"],aggregations:["count(_col0)"]
                                                  Select Operator [SEL_1695] (rows=1108786976 width=108)
                                                    Output:["_col0"]
                                                    Select Operator [SEL_1693] (rows=316788826 width=135)
                                                      Output:["_col0"]
                                                      Merge Join Operator [MERGEJOIN_1692] (rows=316788826 width=135)
                                                        Conds:RS_2006._col0=RS_1993._col0(Inner),Output:["_col1"]
                                                      <-Map 21 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1993]
                                                          PartitionCols:_col0
                                                          Select Operator [SEL_1988] (rows=73049 width=1119)
                                                            Output:["_col0"]
                                                            Filter Operator [FIL_1987] (rows=73049 width=1119)
                                                              predicate:(d_date_sk is not null and d_year BETWEEN 1998 AND 2000)
                                                              TableScan [TS_13] (rows=73049 width=1119)
                                                                default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_year"]
                                                      <-Map 17 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_2006]
                                                          PartitionCols:_col0
                                                          Select Operator [SEL_2004] (rows=287989836 width=135)
                                                            Output:["_col0","_col1"]
                                                            Filter Operator [FIL_2003] (rows=287989836 width=135)
                                                              predicate:((cs_sold_date_sk BETWEEN DynamicValue(RS_17_date_dim_d_date_sk_min) AND DynamicValue(RS_17_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_17_date_dim_d_date_sk_bloom_filter))) and cs_sold_date_sk is not null)
                                                              TableScan [TS_10] (rows=287989836 width=135)
                                                                default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:NONE,Output:["cs_sold_date_sk","cs_quantity"]
                                                              <-Reducer 22 [BROADCAST_EDGE] vectorized
                                                                BROADCAST [RS_2002]
                                                                  Group By Operator [GBY_2001] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                  <-Map 21 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                    SHUFFLE [RS_1999]
                                                                      Group By Operator [GBY_1997] (rows=1 width=12)
                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                        Select Operator [SEL_1990] (rows=73049 width=1119)
                                                                          Output:["_col0"]
                                                                           Please refer to the previous Select Operator [SEL_1988]
                                            <-Reducer 35 [CONTAINS]
                                              Reduce Output Operator [RS_1733]
                                                Group By Operator [GBY_1732] (rows=1 width=8)
                                                  Output:["_col0"],aggregations:["count(_col0)"]
                                                  Select Operator [SEL_1731] (rows=1108786976 width=108)
                                                    Output:["_col0"]
                                                    Select Operator [SEL_1729] (rows=158402938 width=135)
                                                      Output:["_col0"]
                                                      Merge Join Operator [MERGEJOIN_1728] (rows=158402938 width=135)
                                                        Conds:RS_2034._col0=RS_2021._col0(Inner),Output:["_col1"]
                                                      <-Map 37 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_2021]
                                                          PartitionCols:_col0
                                                          Select Operator [SEL_2016] (rows=73049 width=1119)
                                                            Output:["_col0"]
                                                            Filter Operator [FIL_2015] (rows=73049 width=1119)
                                                              predicate:(d_date_sk is not null and d_year BETWEEN 1998 AND 2000)
                                                              TableScan [TS_24] (rows=73049 width=1119)
                                                                default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_year"]
                                                      <-Map 33 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_2034]
                                                          PartitionCols:_col0
                                                          Select Operator [SEL_2032] (rows=144002668 width=135)
                                                            Output:["_col0","_col1"]
                                                            Filter Operator [FIL_2031] (rows=144002668 width=135)
                                                              predicate:((ws_sold_date_sk BETWEEN DynamicValue(RS_28_date_dim_d_date_sk_min) AND DynamicValue(RS_28_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_28_date_dim_d_date_sk_bloom_filter))) and ws_sold_date_sk is not null)
                                                              TableScan [TS_21] (rows=144002668 width=135)
                                                                default@web_sales,web_sales,Tbl:COMPLETE,Col:NONE,Output:["ws_sold_date_sk","ws_quantity"]
                                                              <-Reducer 38 [BROADCAST_EDGE] vectorized
                                                                BROADCAST [RS_2030]
                                                                  Group By Operator [GBY_2029] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                  <-Map 37 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                    SHUFFLE [RS_2027]
                                                                      Group By Operator [GBY_2025] (rows=1 width=12)
                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                        Select Operator [SEL_2018] (rows=73049 width=1119)
                                                                          Output:["_col0"]
                                                                           Please refer to the previous Select Operator [SEL_2016]
                                            <-Reducer 9 [CONTAINS]
                                              Reduce Output Operator [RS_1665]
                                                Group By Operator [GBY_1664] (rows=1 width=8)
                                                  Output:["_col0"],aggregations:["count(_col0)"]
                                                  Select Operator [SEL_1663] (rows=1108786976 width=108)
                                                    Output:["_col0"]
                                                    Select Operator [SEL_1661] (rows=633595212 width=88)
                                                      Output:["_col0"]
                                                      Merge Join Operator [MERGEJOIN_1660] (rows=633595212 width=88)
                                                        Conds:RS_1833._col0=RS_1819._col0(Inner),Output:["_col1"]
                                                      <-Map 110 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1819]
                                                          PartitionCols:_col0
                                                          Select Operator [SEL_1813] (rows=73049 width=1119)
                                                            Output:["_col0"]
                                                            Filter Operator [FIL_1812] (rows=73049 width=1119)
                                                              predicate:(d_date_sk is not null and d_year BETWEEN 1999 AND 2001)
                                                              TableScan [TS_102] (rows=73049 width=1119)
                                                                default@date_dim,d1,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_year"]
                                                      <-Map 1 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1833]
                                                          PartitionCols:_col0
                                                          Select Operator [SEL_1831] (rows=575995635 width=88)
                                                            Output:["_col0","_col1"]
                                                            Filter Operator [FIL_1830] (rows=575995635 width=88)
                                                              predicate:((ss_sold_date_sk BETWEEN DynamicValue(RS_7_date_dim_d_date_sk_min) AND DynamicValue(RS_7_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_7_date_dim_d_date_sk_bloom_filter))) and ss_sold_date_sk is not null)
                                                              TableScan [TS_0] (rows=575995635 width=88)
                                                                default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_date_sk","ss_quantity"]
                                                              <-Reducer 119 [BROADCAST_EDGE] vectorized
                                                                BROADCAST [RS_1829]
                                                                  Group By Operator [GBY_1828] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                  <-Map 110 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                    SHUFFLE [RS_1826]
                                                                      Group By Operator [GBY_1824] (rows=1 width=12)
                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                        Select Operator [SEL_1816] (rows=73049 width=1119)
                                                                          Output:["_col0"]
                                                                           Please refer to the previous Select Operator [SEL_1813]
                              <-Reducer 29 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1937]
                                  Select Operator [SEL_1936] (rows=1 width=120)
                                    Output:["_col0"]
                                    Group By Operator [GBY_1935] (rows=1 width=120)
                                      Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"]
                                    <-Union 28 [CUSTOM_SIMPLE_EDGE]
                                      <-Reducer 27 [CONTAINS]
                                        Reduce Output Operator [RS_1715]
                                          Group By Operator [GBY_1714] (rows=1 width=120)
                                            Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                            Select Operator [SEL_1713] (rows=1108786976 width=108)
                                              Output:["_col0"]
                                              Select Operator [SEL_1711] (rows=316788826 width=135)
                                                Output:["_col0","_col1"]
                                                Merge Join Operator [MERGEJOIN_1710] (rows=316788826 width=135)
                                                  Conds:RS_2013._col0=RS_1994._col0(Inner),Output:["_col1","_col2"]
                                                <-Map 21 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_1994]
                                                    PartitionCols:_col0
                                                     Please refer to the previous Select Operator [SEL_1988]
                                                <-Map 47 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_2013]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_2011] (rows=287989836 width=135)
                                                      Output:["_col0","_col1","_col2"]
                                                      Filter Operator [FIL_2010] (rows=287989836 width=135)
                                                        predicate:((cs_sold_date_sk BETWEEN DynamicValue(RS_62_date_dim_d_date_sk_min) AND DynamicValue(RS_62_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_62_date_dim_d_date_sk_bloom_filter))) and cs_sold_date_sk is not null)
                                                        TableScan [TS_55] (rows=287989836 width=135)
                                                          default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:NONE,Output:["cs_sold_date_sk","cs_quantity","cs_list_price"]
                                                        <-Reducer 26 [BROADCAST_EDGE] vectorized
                                                          BROADCAST [RS_2009]
                                                            Group By Operator [GBY_2008] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                            <-Map 21 [CUSTOM_SIMPLE_EDGE] vectorized
                                                              SHUFFLE [RS_2000]
                                                                Group By Operator [GBY_1998] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                  Select Operator [SEL_1992] (rows=73049 width=1119)
                                                                    Output:["_col0"]
                                                                     Please refer to the previous Select Operator [SEL_1988]
                                      <-Reducer 41 [CONTAINS]
                                        Reduce Output Operator [RS_1751]
                                          Group By Operator [GBY_1750] (rows=1 width=120)
                                            Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                            Select Operator [SEL_1749] (rows=1108786976 width=108)
                                              Output:["_col0"]
                                              Select Operator [SEL_1747] (rows=158402938 width=135)
                                                Output:["_col0","_col1"]
                                                Merge Join Operator [MERGEJOIN_1746] (rows=158402938 width=135)
                                                  Conds:RS_2041._col0=RS_2022._col0(Inner),Output:["_col1","_col2"]
                                                <-Map 37 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_2022]
                                                    PartitionCols:_col0
                                                     Please refer to the previous Select Operator [SEL_2016]
                                                <-Map 48 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_2041]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_2039] (rows=144002668 width=135)
                                                      Output:["_col0","_col1","_col2"]
                                                      Filter Operator [FIL_2038] (rows=144002668 width=135)
                                                        predicate:((ws_sold_date_sk BETWEEN DynamicValue(RS_73_date_dim_d_date_sk_min) AND DynamicValue(RS_73_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_73_date_dim_d_date_sk_bloom_filter))) and ws_sold_date_sk is not null)
                                                        TableScan [TS_66] (rows=144002668 width=135)
                                                          default@web_sales,web_sales,Tbl:COMPLETE,Col:NONE,Output:["ws_sold_date_sk","ws_quantity","ws_list_price"]
                                                        <-Reducer 40 [BROADCAST_EDGE] vectorized
                                                          BROADCAST [RS_2037]
                                                            Group By Operator [GBY_2036] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                            <-Map 37 [CUSTOM_SIMPLE_EDGE] vectorized
                                                              SHUFFLE [RS_2028]
                                                                Group By Operator [GBY_2026] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                  Select Operator [SEL_2020] (rows=73049 width=1119)
                                                                    Output:["_col0"]
                                                                     Please refer to the previous Select Operator [SEL_2016]
                                      <-Reducer 45 [CONTAINS]
                                        Reduce Output Operator [RS_1769]
                                          Group By Operator [GBY_1768] (rows=1 width=120)
                                            Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                            Select Operator [SEL_1767] (rows=1108786976 width=108)
                                              Output:["_col0"]
                                              Select Operator [SEL_1765] (rows=633595212 width=88)
                                                Output:["_col0","_col1"]
                                                Merge Join Operator [MERGEJOIN_1764] (rows=633595212 width=88)
                                                  Conds:RS_2048._col0=RS_1820._col0(Inner),Output:["_col1","_col2"]
                                                <-Map 110 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_1820]
                                                    PartitionCols:_col0
                                                     Please refer to the previous Select Operator [SEL_1813]
                                                <-Map 43 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_2048]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_2046] (rows=575995635 width=88)
                                                      Output:["_col0","_col1","_col2"]
                                                      Filter Operator [FIL_2045] (rows=575995635 width=88)
                                                        predicate:((ss_sold_date_sk BETWEEN DynamicValue(RS_52_date_dim_d_date_sk_min) AND DynamicValue(RS_52_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_52_date_dim_d_date_sk_bloom_filter))) and ss_sold_date_sk is not null)
                                                        TableScan [TS_45] (rows=575995635 width=88)
                                                          default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_date_sk","ss_quantity","ss_list_price"]
                                                        <-Reducer 120 [BROADCAST_EDGE] vectorized
                                                          BROADCAST [RS_2044]
                                                            Group By Operator [GBY_2043] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                            <-Map 110 [CUSTOM_SIMPLE_EDGE] vectorized
                                                              SHUFFLE [RS_1827]
                                                                Group By Operator [GBY_1825] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                  Select Operator [SEL_1818] (rows=73049 width=1119)
                                                                    Output:["_col0"]
                                                                     Please refer to the previous Select Operator [SEL_1813]
                              <-Reducer 57 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1957]
                                  Group By Operator [GBY_1956] (rows=348467716 width=135)
                                    Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2
                                  <-Reducer 56 [SIMPLE_EDGE]
                                    SHUFFLE [RS_501]
                                      PartitionCols:_col0, _col1, _col2
                                      Group By Operator [GBY_500] (rows=696935432 width=135)
                                        Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col3)","count()"],keys:_col0, _col1, _col2
                                        Select Operator [SEL_498] (rows=696935432 width=135)
                                          Output:["_col0","_col1","_col2","_col3"]
                                          Merge Join Operator [MERGEJOIN_1628] (rows=696935432 width=135)
                                            Conds:RS_494._col1=RS_1888._col0(Inner),RS_494._col1=RS_1947._col0(Inner),Output:["_col2","_col3","_col8","_col9","_col10"]
                                          <-Map 63 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_1888]
                                              PartitionCols:_col0
                                              Select Operator [SEL_1875] (rows=462000 width=1436)
                                                Output:["_col0","_col1","_col2","_col3"]
                                                Filter Operator [FIL_1866] (rows=462000 width=1436)
                                                  predicate:i_item_sk is not null
                                                  TableScan [TS_91] (rows=462000 width=1436)
                                                    default@item,item,Tbl:COMPLETE,Col:NONE,Output:["i_item_sk","i_brand_id","i_class_id","i_category_id"]
                                          <-Reducer 83 [ONE_TO_ONE_EDGE] vectorized
                                            PARTITION_ONLY_SHUFFLE [RS_1947]
                                              PartitionCols:_col0
                                              Group By Operator [GBY_1946] (rows=254100 width=1436)
                                                Output:["_col0"],keys:KEY._col0
                                              <-Reducer 82 [SIMPLE_EDGE]
                                                SHUFFLE [RS_488]
                                                  PartitionCols:_col0
                                                  Group By Operator [GBY_487] (rows=508200 width=1436)
                                                    Output:["_col0"],keys:_col0
                                                    Merge Join Operator [MERGEJOIN_1627] (rows=508200 width=1436)
                                                      Conds:RS_1884._col1, _col2, _col3=RS_1945._col0, _col1, _col2(Inner),Output:["_col0"]
                                                    <-Map 63 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1884]
                                                        PartitionCols:_col1, _col2, _col3
                                                        Select Operator [SEL_1871] (rows=462000 width=1436)
                                                          Output:["_col0","_col1","_col2","_col3"]
                                                          Filter Operator [FIL_1862] (rows=462000 width=1436)
                                                            predicate:(i_brand_id is not null and i_category_id is not null and i_class_id is not null and i_item_sk is not null)
                                                             Please refer to the previous TableScan [TS_91]
                                                    <-Reducer 89 [ONE_TO_ONE_EDGE] vectorized
                                                      FORWARD [RS_1945]
                                                        PartitionCols:_col0, _col1, _col2
                                                        Select Operator [SEL_1944] (rows=1 width=108)
                                                          Output:["_col0","_col1","_col2"]
                                                          Filter Operator [FIL_1943] (rows=1 width=108)
                                                            predicate:(_col3 = 3L)
                                                            Group By Operator [GBY_1942] (rows=76229105 width=108)
                                                              Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                            <-Union 88 [SIMPLE_EDGE]
                                                              <-Reducer 102 [CONTAINS]
                                                                Reduce Output Operator [RS_1807]
                                                                  PartitionCols:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1806] (rows=152458210 width=108)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                    Group By Operator [GBY_1804] (rows=21780404 width=135)
                                                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["$sum0(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                    <-Reducer 101 [SIMPLE_EDGE]
                                                                      SHUFFLE [RS_473]
                                                                        PartitionCols:_col0, _col1, _col2
                                                                        Group By Operator [GBY_472] (rows=43560808 width=135)
                                                                          Output:["_col0","_col1","_col2","_col3"],aggregations:["$sum0(_col7)"],keys:_col3, _col4, _col5
                                                                          Select Operator [SEL_470] (rows=43560808 width=135)
                                                                            Output:["_col3","_col4","_col5","_col7"]
                                                                            Merge Join Operator [MERGEJOIN_1626] (rows=43560808 width=135)
                                                                              Conds:RS_467._col0=RS_2113._col0(Inner),Output:["_col1","_col3","_col4","_col5","_col6"]
                                                                            <-Reducer 117 [ONE_TO_ONE_EDGE]
                                                                              FORWARD [RS_467]
                                                                                PartitionCols:_col0
                                                                                Group By Operator [GBY_202] (rows=39600734 width=135)
                                                                                  Output:["_col0","_col1"],aggregations:["$sum0(VALUE._col0)"],keys:KEY._col0
                                                                                <-Reducer 116 [SIMPLE_EDGE]
                                                                                  SHUFFLE [RS_201]
                                                                                    PartitionCols:_col0
                                                                                    Group By Operator [GBY_200] (rows=79201469 width=135)
                                                                                      Output:["_col0","_col1"],aggregations:["$sum0(_col5)"],keys:_col1
                                                                                      Select Operator [SEL_198] (rows=79201469 width=135)
                                                                                        Output:["_col1","_col5"]
                                                                                        Merge Join Operator [MERGEJOIN_1610] (rows=79201469 width=135)
                                                                                          Conds:RS_2107._col0=RS_2060._col0(Inner),Output:["_col1","_col2","_col4"]
                                                                                        <-Reducer 111 [ONE_TO_ONE_EDGE] vectorized
                                                                                          PARTITION_ONLY_SHUFFLE [RS_2060]
                                                                                            PartitionCols:_col0
                                                                                            Group By Operator [GBY_2055] (rows=36524 width=1119)
                                                                                              Output:["_col0","_col1"],aggregations:["count(VALUE._col0)"],keys:KEY._col0
                                                                                            <-Map 110 [SIMPLE_EDGE] vectorized
                                                                                              SHUFFLE [RS_1823]
                                                                                                PartitionCols:_col0
                                                                                                Group By Operator [GBY_1814] (rows=73049 width=1119)
                                                                                                  Output:["_col0","_col1"],aggregations:["count()"],keys:_col0
                                                                                                   Please refer to the previous Select Operator [SEL_1813]
                                                                                        <-Reducer 124 [SIMPLE_EDGE] vectorized
                                                                                          SHUFFLE [RS_2107]
                                                                                            PartitionCols:_col0
                                                                                            Group By Operator [GBY_2106] (rows=72001334 width=135)
                                                                                              Output:["_col0","_col1","_col2"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1
                                                                                            <-Map 123 [SIMPLE_EDGE] vectorized
                                                                                              SHUFFLE [RS_2105]
                                                                                                PartitionCols:_col0, _col1
                                                                                                Group By Operator [GBY_2104] (rows=144002668 width=135)
                                                                                                  Output:["_col0","_col1","_col2"],aggregations:["count()"],keys:_col0, _col1
                                                                                                  Select Operator [SEL_2103] (rows=144002668 width=135)
                                                                                                    Output:["_col0","_col1"]
                                                                                                    Filter Operator [FIL_2102] (rows=144002668 width=135)
                                                                                                      predicate:((ws_item_sk BETWEEN DynamicValue(RS_213_iws_i_item_sk_min) AND DynamicValue(RS_213_iws_i_item_sk_max) and in_bloom_filter(ws_item_sk, DynamicValue(RS_213_iws_i_item_sk_bloom_filter))) and (ws_sold_date_sk BETWEEN DynamicValue(RS_196_d3_d_date_sk_min) AND DynamicValue(RS_196_d3_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_196_d3_d_date_sk_bloom_filter))) and ws_item_sk is not null and ws_sold_date_sk is not null)
                                                                                                      TableScan [TS_179] (rows=144002668 width=135)
                                                                                                        default@web_sales,web_sales,Tbl:COMPLETE,Col:NONE,Output:["ws_sold_date_sk","ws_item_sk"]
                                                                                                      <-Reducer 118 [BROADCAST_EDGE] vectorized
                                                                                                        BROADCAST [RS_2099]
                                                                                                          Group By Operator [GBY_2098] (rows=1 width=16)
                                                                                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                                          <-Reducer 111 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                                            PARTITION_ONLY_SHUFFLE [RS_2067]
                                                                                                              Group By Operator [GBY_2064] (rows=1 width=16)
                                                                                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                                                Select Operator [SEL_2061] (rows=36524 width=1119)
                                                                                                                  Output:["_col0"]
                                                                                                                   Please refer to the previous Group By Operator [GBY_2055]
                                                                                                      <-Reducer 80 [BROADCAST_EDGE] vectorized
                                                                                                        BROADCAST [RS_2101]
                                                                                                          Group By Operator [GBY_2100] (rows=1 width=20)
                                                                                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                                          <-Reducer 77 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                                            PARTITION_ONLY_SHUFFLE [RS_2097]
                                                                                                              Group By Operator [GBY_2096] (rows=1 width=20)
                                                                                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                                                Select Operator [SEL_2095] (rows=231000 width=1436)
                                                                                                                  Output:["_col0"]
                                                                                                                  Group By Operator [GBY_2093] (rows=231000 width=1436)
                                                                                                                    Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3
                                                                                                                  <-Map 63 [SIMPLE_EDGE] vectorized
                                                                                                                    SHUFFLE [RS_1895]
                                                                                                                      PartitionCols:_col0, _col1, _col2, _col3
                                                                                                                      Group By Operator [GBY_1881] (rows=462000 width=1436)
                                                                                                                        Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["count()"],keys:_col0, _col1, _col2, _col3
                                                                                                                        Select Operator [SEL_1869] (rows=462000 width=1436)
                                                                                                                          Output:["_col0","_col1","_col2","_col3"]
                                                                                                                          Filter Operator [FIL_1860] (rows=462000 width=1436)
                                                                                                                            predicate:(i_brand_id is not null and i_category_id is not null and i_class_id is not null and i_item_sk is not null)
                                                                                                                             Please refer to the previous TableScan [TS_91]
                                                                            <-Reducer 100 [SIMPLE_EDGE] vectorized
                                                                              SHUFFLE [RS_2113]
                                                                                PartitionCols:_col0
                                                                                Group By Operator [GBY_2112] (rows=231000 width=1436)
                                                                                  Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3
                                                                                <-Map 63 [SIMPLE_EDGE] vectorized
                                                                                  SHUFFLE [RS_1899]
                                                                                    PartitionCols:_col0, _col1, _col2, _col3
                                                                                    Group By Operator [GBY_1887] (rows=462000 width=1436)
                                                                                      Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["count()"],keys:_col0, _col1, _col2, _col3
                                                                                      Select Operator [SEL_1874] (rows=462000 width=1436)
                                                                                        Output:["_col0","_col1","_col2","_col3"]
                                                                                        Filter Operator [FIL_1865] (rows=462000 width=1436)
                                                                                          predicate:(i_brand_id is not null and i_category_id is not null and i_class_id is not null and i_item_sk is not null)
                                                                                           Please refer to the previous TableScan [TS_91]
                                                              <-Reducer 87 [CONTAINS]
                                                                Reduce Output Operator [RS_1791]
                                                                  PartitionCols:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1790] (rows=152458210 width=108)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                    Group By Operator [GBY_1788] (rows=87119342 width=88)
                                                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["$sum0(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                    <-Reducer 86 [SIMPLE_EDGE]
                                                                      SHUFFLE [RS_388]
                                                                        PartitionCols:_col0, _col1, _col2
                                                                        Group By Operator [GBY_387] (rows=174238685 width=88)
                                                                          Output:["_col0","_col1","_col2","_col3"],aggregations:["$sum0(_col7)"],keys:_col3, _col4, _col5
                                                                          Select Operator [SEL_385] (rows=174238685 width=88)
                                                                            Output:["_col3","_col4","_col5","_col7"]
                                                                            Merge Join Operator [MERGEJOIN_1622] (rows=174238685 width=88)
                                                                              Conds:RS_382._col0=RS_2109._col0(Inner),Output:["_col1","_col3","_col4","_col5","_col6"]
                                                                            <-Reducer 109 [ONE_TO_ONE_EDGE]
                                                                              FORWARD [RS_382]
                                                                                PartitionCols:_col0
                                                                                Group By Operator [GBY_117] (rows=158398802 width=88)
                                                                                  Output:["_col0","_col1"],aggregations:["$sum0(VALUE._col0)"],keys:KEY._col0
                                                                                <-Reducer 108 [SIMPLE_EDGE]
                                                                                  SHUFFLE [RS_116]
                                                                                    PartitionCols:_col0
                                                                                    Group By Operator [GBY_115] (rows=316797605 width=88)
                                                                                      Output:["_col0","_col1"],aggregations:["$sum0(_col5)"],keys:_col1
                                                                                      Select Operator [SEL_113] (rows=316797605 width=88)
                                                                                        Output:["_col1","_col5"]
                                                                                        Merge Join Operator [MERGEJOIN_1606] (rows=316797605 width=88)
                                                                                          Conds:RS_2077._col0=RS_2056._col0(Inner),Output:["_col1","_col2","_col4"]
                                                                                        <-Reducer 111 [ONE_TO_ONE_EDGE] vectorized
                                                                                          PARTITION_ONLY_SHUFFLE [RS_2056]
                                                                                            PartitionCols:_col0
                                                                                             Please refer to the previous Group By Operator [GBY_2055]
                                                                                        <-Reducer 107 [SIMPLE_EDGE] vectorized
                                                                                          SHUFFLE [RS_2077]
                                                                                            PartitionCols:_col0
                                                                                            Group By Operator [GBY_2076] (rows=287997817 width=88)
                                                                                              Output:["_col0","_col1","_col2"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1
                                                                                            <-Map 106 [SIMPLE_EDGE] vectorized
                                                                                              SHUFFLE [RS_2075]
                                                                                                PartitionCols:_col0, _col1
                                                                                                Group By Operator [GBY_2074] (rows=575995635 width=88)
                                                                                                  Output:["_col0","_col1","_col2"],aggregations:["count()"],keys:_col0, _col1
                                                                                                  Select Operator [SEL_2073] (rows=575995635 width=88)
                                                                                                    Output:["_col0","_col1"]
                                                                                                    Filter Operator [FIL_2072] (rows=575995635 width=88)
                                                                                                      predicate:((ss_item_sk BETWEEN DynamicValue(RS_128_iss_i_item_sk_min) AND DynamicValue(RS_128_iss_i_item_sk_max) and in_bloom_filter(ss_item_sk, DynamicValue(RS_128_iss_i_item_sk_bloom_filter))) and (ss_sold_date_sk BETWEEN DynamicValue(RS_111_d1_d_date_sk_min) AND DynamicValue(RS_111_d1_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_111_d1_d_date_sk_bloom_filter))) and ss_item_sk is not null and ss_sold_date_sk is not null)
                                                                                                      TableScan [TS_94] (rows=575995635 width=88)
                                                                                                        default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_date_sk","ss_item_sk"]
                                                                                                      <-Reducer 112 [BROADCAST_EDGE] vectorized
                                                                                                        BROADCAST [RS_2069]
                                                                                                          Group By Operator [GBY_2068] (rows=1 width=16)
                                                                                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                                          <-Reducer 111 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                                            PARTITION_ONLY_SHUFFLE [RS_2065]
                                                                                                              Group By Operator [GBY_2062] (rows=1 width=16)
                                                                                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                                                Select Operator [SEL_2057] (rows=36524 width=1119)
                                                                                                                  Output:["_col0"]
                                                                                                                   Please refer to the previous Group By Operator [GBY_2055]
                                                                                                      <-Reducer 72 [BROADCAST_EDGE] vectorized
                                                                                                        BROADCAST [RS_2071]
                                                                                                          Group By Operator [GBY_2070] (rows=1 width=20)
                                                                                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                                          <-Reducer 67 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                                            PARTITION_ONLY_SHUFFLE [RS_2054]
                                                                                                              Group By Operator [GBY_2053] (rows=1 width=20)
                                                                                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                                                Select Operator [SEL_2052] (rows=231000 width=1436)
                                                                                                                  Output:["_col0"]
                                                                                                                  Group By Operator [GBY_2050] (rows=231000 width=1436)
                                                                                                                    Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3
                                                                                                                  <-Map 63 [SIMPLE_EDGE] vectorized
                                                                                                                    SHUFFLE [RS_1893]
                                                                                                                      PartitionCols:_col0, _col1, _col2, _col3
                                                                                                                      Group By Operator [GBY_1879] (rows=462000 width=1436)
                                                                                                                        Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["count()"],keys:_col0, _col1, _col2, _col3
                                                                                                                         Please refer to the previous Select Operator [SEL_1869]
                                                                            <-Reducer 85 [SIMPLE_EDGE] vectorized
                                                                              SHUFFLE [RS_2109]
                                                                                PartitionCols:_col0
                                                                                Group By Operator [GBY_2108] (rows=231000 width=1436)
                                                                                  Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3
                                                                                <-Map 63 [SIMPLE_EDGE] vectorized
                                                                                  SHUFFLE [RS_1897]
                                                                                    PartitionCols:_col0, _col1, _col2, _col3
                                                                                    Group By Operator [GBY_1885] (rows=462000 width=1436)
                                                                                      Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["count()"],keys:_col0, _col1, _col2, _col3
                                                                                      Select Operator [SEL_1872] (rows=462000 width=1436)
                                                                                        Output:["_col0","_col1","_col2","_col3"]
                                                                                        Filter Operator [FIL_1863] (rows=462000 width=1436)
                                                                                          predicate:(i_brand_id is not null and i_category_id is not null and i_class_id is not null and i_item_sk is not null)
                                                                                           Please refer to the previous TableScan [TS_91]
                                                              <-Reducer 98 [CONTAINS]
                                                                Reduce Output Operator [RS_1799]
                                                                  PartitionCols:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1798] (rows=152458210 width=108)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                    Group By Operator [GBY_1796] (rows=43558464 width=135)
                                                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["$sum0(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                    <-Reducer 97 [SIMPLE_EDGE]
                                                                      SHUFFLE [RS_430]
                                                                        PartitionCols:_col0, _col1, _col2
                                                                        Group By Operator [GBY_429] (rows=87116928 width=135)
                                                                          Output:["_col0","_col1","_col2","_col3"],aggregations:["$sum0(_col7)"],keys:_col3, _col4, _col5
                                                                          Select Operator [SEL_427] (rows=87116928 width=135)
                                                                            Output:["_col3","_col4","_col5","_col7"]
                                                                            Merge Join Operator [MERGEJOIN_1624] (rows=87116928 width=135)
                                                                              Conds:RS_424._col0=RS_2111._col0(Inner),Output:["_col1","_col3","_col4","_col5","_col6"]
                                                                            <-Reducer 114 [ONE_TO_ONE_EDGE]
                                                                              FORWARD [RS_424]
                                                                                PartitionCols:_col0
                                                                                Group By Operator [GBY_159] (rows=79197206 width=135)
                                                                                  Output:["_col0","_col1"],aggregations:["$sum0(VALUE._col0)"],keys:KEY._col0
                                                                                <-Reducer 113 [SIMPLE_EDGE]
                                                                                  SHUFFLE [RS_158]
                                                                                    PartitionCols:_col0
                                                                                    Group By Operator [GBY_157] (rows=158394413 width=135)
                                                                                      Output:["_col0","_col1"],aggregations:["$sum0(_col5)"],keys:_col1
                                                                                      Select Operator [SEL_155] (rows=158394413 width=135)
                                                                                        Output:["_col1","_col5"]
                                                                                        Merge Join Operator [MERGEJOIN_1608] (rows=158394413 width=135)
                                                                                          Conds:RS_2092._col0=RS_2058._col0(Inner),Output:["_col1","_col2","_col4"]
                                                                                        <-Reducer 111 [ONE_TO_ONE_EDGE] vectorized
                                                                                          PARTITION_ONLY_SHUFFLE [RS_2058]
                                                                                            PartitionCols:_col0
                                                                                             Please refer to the previous Group By Operator [GBY_2055]
                                                                                        <-Reducer 122 [SIMPLE_EDGE] vectorized
                                                                                          SHUFFLE [RS_2092]
                                                                                            PartitionCols:_col0
                                                                                            Group By Operator [GBY_2091] (rows=143994918 width=135)
                                                                                              Output:["_col0","_col1","_col2"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1
                                                                                            <-Map 121 [SIMPLE_EDGE] vectorized
                                                                                              SHUFFLE [RS_2090]
                                                                                                PartitionCols:_col0, _col1
                                                                                                Group By Operator [GBY_2089] (rows=287989836 width=135)
                                                                                                  Output:["_col0","_col1","_col2"],aggregations:["count()"],keys:_col0, _col1
                                                                                                  Select Operator [SEL_2088] (rows=287989836 width=135)
                                                                                                    Output:["_col0","_col1"]
                                                                                                    Filter Operator [FIL_2087] (rows=287989836 width=135)
                                                                                                      predicate:((cs_item_sk BETWEEN DynamicValue(RS_170_ics_i_item_sk_min) AND DynamicValue(RS_170_ics_i_item_sk_max) and in_bloom_filter(cs_item_sk, DynamicValue(RS_170_ics_i_item_sk_bloom_filter))) and (cs_sold_date_sk BETWEEN DynamicValue(RS_153_d2_d_date_sk_min) AND DynamicValue(RS_153_d2_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_153_d2_d_date_sk_bloom_filter))) and cs_item_sk is not null and cs_sold_date_sk is not null)
                                                                                                      TableScan [TS_136] (rows=287989836 width=135)
                                                                                                        default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:NONE,Output:["cs_sold_date_sk","cs_item_sk"]
                                                                                                      <-Reducer 115 [BROADCAST_EDGE] vectorized
                                                                                                        BROADCAST [RS_2084]
                                                                                                          Group By Operator [GBY_2083] (rows=1 width=16)
                                                                                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                                          <-Reducer 111 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                                            PARTITION_ONLY_SHUFFLE [RS_2066]
                                                                                                              Group By Operator [GBY_2063] (rows=1 width=16)
                                                                                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                                                Select Operator [SEL_2059] (rows=36524 width=1119)
                                                                                                                  Output:["_col0"]
                                                                                                                   Please refer to the previous Group By Operator [GBY_2055]
                                                                                                      <-Reducer 76 [BROADCAST_EDGE] vectorized
                                                                                                        BROADCAST [RS_2086]
                                                                                                          Group By Operator [GBY_2085] (rows=1 width=20)
                                                                                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                                          <-Reducer 73 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                                            PARTITION_ONLY_SHUFFLE [RS_2082]
                                                                                                              Group By Operator [GBY_2081] (rows=1 width=20)
                                                                                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                                                Select Operator [SEL_2080] (rows=231000 width=1436)
                                                                                                                  Output:["_col0"]
                                                                                                                  Group By Operator [GBY_2078] (rows=231000 width=1436)
                                                                                                                    Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3
                                                                                                                  <-Map 63 [SIMPLE_EDGE] vectorized
                                                                                                                    SHUFFLE [RS_1894]
                                                                                                                      PartitionCols:_col0, _col1, _col2, _col3
                                                                                                                      Group By Operator [GBY_1880] (rows=462000 width=1436)
                                                                                                                        Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["count()"],keys:_col0, _col1, _col2, _col3
                                                                                                                         Please refer to the previous Select Operator [SEL_1869]
                                                                            <-Reducer 96 [SIMPLE_EDGE] vectorized
                                                                              SHUFFLE [RS_2111]
                                                                                PartitionCols:_col0
                                                                                Group By Operator [GBY_2110] (rows=231000 width=1436)
                                                                                  Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3
                                                                                <-Map 63 [SIMPLE_EDGE] vectorized
                                                                                  SHUFFLE [RS_1898]
                                                                                    PartitionCols:_col0, _col1, _col2, _col3
                                                                                    Group By Operator [GBY_1886] (rows=462000 width=1436)
                                                                                      Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["count()"],keys:_col0, _col1, _col2, _col3
                                                                                      Select Operator [SEL_1873] (rows=462000 width=1436)
                                                                                        Output:["_col0","_col1","_col2","_col3"]
                                                                                        Filter Operator [FIL_1864] (rows=462000 width=1436)
                                                                                          predicate:(i_brand_id is not null and i_category_id is not null and i_class_id is not null and i_item_sk is not null)
                                                                                           Please refer to the previous TableScan [TS_91]
                                          <-Reducer 55 [SIMPLE_EDGE]
                                            SHUFFLE [RS_494]
                                              PartitionCols:_col1
                                              Merge Join Operator [MERGEJOIN_1620] (rows=316788826 width=135)
                                                Conds:RS_1955._col0=RS_1848._col0(Inner),Output:["_col1","_col2","_col3"]
                                              <-Map 53 [SIMPLE_EDGE] vectorized
                                                PARTITION_ONLY_SHUFFLE [RS_1848]
                                                  PartitionCols:_col0
                                                  Select Operator [SEL_1845] (rows=18262 width=1119)
                                                    Output:["_col0"]
                                                    Filter Operator [FIL_1844] (rows=18262 width=1119)
                                                      predicate:((d_moy = 11) and (d_year = 2000) and d_date_sk is not null)
                                                      TableScan [TS_85] (rows=73049 width=1119)
                                                        default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_year","d_moy"]
                                              <-Map 125 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_1955]
                                                  PartitionCols:_col0
                                                  Select Operator [SEL_1954] (rows=287989836 width=135)
                                                    Output:["_col0","_col1","_col2","_col3"]
                                                    Filter Operator [FIL_1953] (rows=287989836 width=135)
                                                      predicate:((cs_item_sk BETWEEN DynamicValue(RS_495_item_i_item_sk_min) AND DynamicValue(RS_495_item_i_item_sk_max) and in_bloom_filter(cs_item_sk, DynamicValue(RS_495_item_i_item_sk_bloom_filter))) and (cs_item_sk BETWEEN DynamicValue(RS_496_item_i_item_sk_min) AND DynamicValue(RS_496_item_i_item_sk_max) and in_bloom_filter(cs_item_sk, DynamicValue(RS_496_item_i_item_sk_bloom_filter))) and (cs_sold_date_sk BETWEEN DynamicValue(RS_492_date_dim_d_date_sk_min) AND DynamicValue(RS_492_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_492_date_dim_d_date_sk_bloom_filter))) and cs_item_sk is not null and cs_sold_date_sk is not null)
                                                      TableScan [TS_337] (rows=287989836 width=135)
                                                        default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:NONE,Output:["cs_sold_date_sk","cs_item_sk","cs_quantity","cs_list_price"]
                                                      <-Reducer 104 [BROADCAST_EDGE] vectorized
                                                        BROADCAST [RS_1941]
                                                          Group By Operator [GBY_1940] (rows=1 width=12)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                          <-Map 63 [CUSTOM_SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_1903]
                                                              Group By Operator [GBY_1900] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                Select Operator [SEL_1889] (rows=462000 width=1436)
                                                                  Output:["_col0"]
                                                                   Please refer to the previous Select Operator [SEL_1875]
                                                      <-Reducer 58 [BROADCAST_EDGE] vectorized
                                                        BROADCAST [RS_1939]
                                                          Group By Operator [GBY_1938] (rows=1 width=12)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                          <-Map 53 [CUSTOM_SIMPLE_EDGE] vectorized
                                                            PARTITION_ONLY_SHUFFLE [RS_1856]
                                                              Group By Operator [GBY_1853] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                Select Operator [SEL_1849] (rows=18262 width=1119)
                                                                  Output:["_col0"]
                                                                   Please refer to the previous Select Operator [SEL_1845]
                                                      <-Reducer 84 [BROADCAST_EDGE] vectorized
                                                        BROADCAST [RS_1952]
                                                          Group By Operator [GBY_1951] (rows=1 width=12)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                          <-Reducer 83 [CUSTOM_SIMPLE_EDGE] vectorized
                                                            PARTITION_ONLY_SHUFFLE [RS_1950]
                                                              Group By Operator [GBY_1949] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                Select Operator [SEL_1948] (rows=254100 width=1436)
                                                                  Output:["_col0"]
                                                                   Please refer to the previous Group By Operator [GBY_1946]
                  <-Reducer 16 [CONTAINS]
                    Reduce Output Operator [RS_1685]
                      PartitionCols:_col0, _col1, _col2, _col3, _col4
                      Group By Operator [GBY_1684] (rows=2032776160 width=237)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col4)","sum(_col5)"],keys:_col0, _col1, _col2, _col3, 0L
                        Top N Key Operator [TNK_1683] (rows=406555232 width=237)
                          keys:_col0, _col1, _col2, _col3, 0L,sort order:+++++,top n:100
                          Select Operator [SEL_1681] (rows=58081078 width=264)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                            Filter Operator [FIL_1680] (rows=58081078 width=264)
                              predicate:(_col5 > _col1)
                              Merge Join Operator [MERGEJOIN_1679] (rows=174243235 width=264)
                                Conds:(Inner),(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6"]
                              <-Reducer 15 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1963]
                                  Select Operator [SEL_1962] (rows=1 width=8)
                                    Filter Operator [FIL_1961] (rows=1 width=8)
                                      predicate:(sq_count_check(_col0) <= 1)
                                      Group By Operator [GBY_1960] (rows=1 width=8)
                                        Output:["_col0"],aggregations:["count()"]
                                        Select Operator [SEL_1959] (rows=1 width=8)
                                          Group By Operator [GBY_1958] (rows=1 width=8)
                                            Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                          <-Union 14 [CUSTOM_SIMPLE_EDGE]
                                            <-Reducer 13 [CONTAINS]
                                              Reduce Output Operator [RS_1678]
                                                Group By Operator [GBY_1677] (rows=1 width=8)
                                                  Output:["_col0"],aggregations:["count(_col0)"]
                                                  Select Operator [SEL_1676] (rows=1108786976 width=108)
                                                    Output:["_col0"]
                                                    Select Operator [SEL_1674] (rows=633595212 width=88)
                                                      Output:["_col0"]
                                                      Merge Join Operator [MERGEJOIN_1673] (rows=633595212 width=88)
                                                        Conds:RS_1834._col0=RS_1821._col0(Inner),Output:["_col1"]
                                                      <-Map 110 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1821]
                                                          PartitionCols:_col0
                                                           Please refer to the previous Select Operator [SEL_1813]
                                                      <-Map 1 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1834]
                                                          PartitionCols:_col0
                                                           Please refer to the previous Select Operator [SEL_1831]
                                            <-Reducer 20 [CONTAINS]
                                              Reduce Output Operator [RS_1703]
                                                Group By Operator [GBY_1702] (rows=1 width=8)
                                                  Output:["_col0"],aggregations:["count(_col0)"]
                                                  Select Operator [SEL_1701] (rows=1108786976 width=108)
                                                    Output:["_col0"]
                                                    Select Operator [SEL_1699] (rows=316788826 width=135)
                                                      Output:["_col0"]
                                                      Merge Join Operator [MERGEJOIN_1698] (rows=316788826 width=135)
                                                        Conds:RS_2007._col0=RS_1995._col0(Inner),Output:["_col1"]
                                                      <-Map 21 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1995]
                                                          PartitionCols:_col0
                                                           Please refer to the previous Select Operator [SEL_1988]
                                                      <-Map 17 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_2007]
                                                          PartitionCols:_col0
                                                           Please refer to the previous Select Operator [SEL_2004]
                                            <-Reducer 36 [CONTAINS]
                                              Reduce Output Operator [RS_1739]
                                                Group By Operator [GBY_1738] (rows=1 width=8)
                                                  Output:["_col0"],aggregations:["count(_col0)"]
                                                  Select Operator [SEL_1737] (rows=1108786976 width=108)
                                                    Output:["_col0"]
                                                    Select Operator [SEL_1735] (rows=158402938 width=135)
                                                      Output:["_col0"]
                                                      Merge Join Operator [MERGEJOIN_1734] (rows=158402938 width=135)
                                                        Conds:RS_2035._col0=RS_2023._col0(Inner),Output:["_col1"]
                                                      <-Map 37 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_2023]
                                                          PartitionCols:_col0
                                                           Please refer to the previous Select Operator [SEL_2016]
                                                      <-Map 33 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_2035]
                                                          PartitionCols:_col0
                                                           Please refer to the previous Select Operator [SEL_2032]
                              <-Reducer 32 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1966]
                                  Select Operator [SEL_1965] (rows=1 width=120)
                                    Output:["_col0"]
                                    Group By Operator [GBY_1964] (rows=1 width=120)
                                      Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"]
                                    <-Union 31 [CUSTOM_SIMPLE_EDGE]
                                      <-Reducer 30 [CONTAINS]
                                        Reduce Output Operator [RS_1721]
                                          Group By Operator [GBY_1720] (rows=1 width=120)
                                            Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                            Select Operator [SEL_1719] (rows=1108786976 width=108)
                                              Output:["_col0"]
                                              Select Operator [SEL_1717] (rows=316788826 width=135)
                                                Output:["_col0","_col1"]
                                                Merge Join Operator [MERGEJOIN_1716] (rows=316788826 width=135)
                                                  Conds:RS_2014._col0=RS_1996._col0(Inner),Output:["_col1","_col2"]
                                                <-Map 21 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_1996]
                                                    PartitionCols:_col0
                                                     Please refer to the previous Select Operator [SEL_1988]
                                                <-Map 47 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_2014]
                                                    PartitionCols:_col0
                                                     Please refer to the previous Select Operator [SEL_2011]
                                      <-Reducer 42 [CONTAINS]
                                        Reduce Output Operator [RS_1757]
                                          Group By Operator [GBY_1756] (rows=1 width=120)
                                            Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                            Select Operator [SEL_1755] (rows=1108786976 width=108)
                                              Output:["_col0"]
                                              Select Operator [SEL_1753] (rows=158402938 width=135)
                                                Output:["_col0","_col1"]
                                                Merge Join Operator [MERGEJOIN_1752] (rows=158402938 width=135)
                                                  Conds:RS_2042._col0=RS_2024._col0(Inner),Output:["_col1","_col2"]
                                                <-Map 37 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_2024]
                                                    PartitionCols:_col0
                                                     Please refer to the previous Select Operator [SEL_2016]
                                                <-Map 48 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_2042]
                                                    PartitionCols:_col0
                                                     Please refer to the previous Select Operator [SEL_2039]
                                      <-Reducer 46 [CONTAINS]
                                        Reduce Output Operator [RS_1775]
                                          Group By Operator [GBY_1774] (rows=1 width=120)
                                            Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                            Select Operator [SEL_1773] (rows=1108786976 width=108)
                                              Output:["_col0"]
                                              Select Operator [SEL_1771] (rows=633595212 width=88)
                                                Output:["_col0","_col1"]
                                                Merge Join Operator [MERGEJOIN_1770] (rows=633595212 width=88)
                                                  Conds:RS_2049._col0=RS_1822._col0(Inner),Output:["_col1","_col2"]
                                                <-Map 110 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_1822]
                                                    PartitionCols:_col0
                                                     Please refer to the previous Select Operator [SEL_1813]
                                                <-Map 43 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_2049]
                                                    PartitionCols:_col0
                                                     Please refer to the previous Select Operator [SEL_2046]
                              <-Reducer 61 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1986]
                                  Group By Operator [GBY_1985] (rows=174243235 width=135)
                                    Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2
                                  <-Reducer 60 [SIMPLE_EDGE]
                                    SHUFFLE [RS_757]
                                      PartitionCols:_col0, _col1, _col2
                                      Group By Operator [GBY_756] (rows=348486471 width=135)
                                        Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col3)","count()"],keys:_col0, _col1, _col2
                                        Select Operator [SEL_754] (rows=348486471 width=135)
                                          Output:["_col0","_col1","_col2","_col3"]
                                          Merge Join Operator [MERGEJOIN_1643] (rows=348486471 width=135)
                                            Conds:RS_750._col1=RS_1891._col0(Inner),RS_750._col1=RS_1976._col0(Inner),Output:["_col2","_col3","_col8","_col9","_col10"]
                                          <-Map 63 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_1891]
                                              PartitionCols:_col0
                                              Select Operator [SEL_1877] (rows=462000 width=1436)
                                                Output:["_col0","_col1","_col2","_col3"]
                                                Filter Operator [FIL_1868] (rows=462000 width=1436)
                                                  predicate:i_item_sk is not null
                                                   Please refer to the previous TableScan [TS_91]
                                          <-Reducer 94 [ONE_TO_ONE_EDGE] vectorized
                                            PARTITION_ONLY_SHUFFLE [RS_1976]
                                              PartitionCols:_col0
                                              Group By Operator [GBY_1975] (rows=254100 width=1436)
                                                Output:["_col0"],keys:KEY._col0
                                              <-Reducer 93 [SIMPLE_EDGE]
                                                SHUFFLE [RS_744]
                                                  PartitionCols:_col0
                                                  Group By Operator [GBY_743] (rows=508200 width=1436)
                                                    Output:["_col0"],keys:_col0
                                                    Merge Join Operator [MERGEJOIN_1642] (rows=508200 width=1436)
                                                      Conds:RS_1890._col1, _col2, _col3=RS_1974._col0, _col1, _col2(Inner),Output:["_col0"]
                                                    <-Map 63 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1890]
                                                        PartitionCols:_col1, _col2, _col3
                                                        Select Operator [SEL_1876] (rows=462000 width=1436)
                                                          Output:["_col0","_col1","_col2","_col3"]
                                                          Filter Operator [FIL_1867] (rows=462000 width=1436)
                                                            predicate:(i_brand_id is not null and i_category_id is not null and i_class_id is not null and i_item_sk is not null)
                                                             Please refer to the previous TableScan [TS_91]
                                                    <-Reducer 92 [ONE_TO_ONE_EDGE] vectorized
                                                      FORWARD [RS_1974]
                                                        PartitionCols:_col0, _col1, _col2
                                                        Select Operator [SEL_1973] (rows=1 width=108)
                                                          Output:["_col0","_col1","_col2"]
                                                          Filter Operator [FIL_1972] (rows=1 width=108)
                                                            predicate:(_col3 = 3L)
                                                            Group By Operator [GBY_1971] (rows=76229105 width=108)
                                                              Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                            <-Union 91 [SIMPLE_EDGE]
                                                              <-Reducer 103 [CONTAINS]
                                                                Reduce Output Operator [RS_1811]
                                                                  PartitionCols:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1810] (rows=152458210 width=108)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                    Group By Operator [GBY_1808] (rows=21780404 width=135)
                                                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["$sum0(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                    <-Reducer 101 [SIMPLE_EDGE]
                                                                      SHUFFLE [RS_729]
                                                                        PartitionCols:_col0, _col1, _col2
                                                                         Please refer to the previous Group By Operator [GBY_472]
                                                              <-Reducer 90 [CONTAINS]
                                                                Reduce Output Operator [RS_1795]
                                                                  PartitionCols:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1794] (rows=152458210 width=108)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                    Group By Operator [GBY_1792] (rows=87119342 width=88)
                                                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["$sum0(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                    <-Reducer 86 [SIMPLE_EDGE]
                                                                      SHUFFLE [RS_644]
                                                                        PartitionCols:_col0, _col1, _col2
                                                                         Please refer to the previous Group By Operator [GBY_387]
                                                              <-Reducer 99 [CONTAINS]
                                                                Reduce Output Operator [RS_1803]
                                                                  PartitionCols:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1802] (rows=152458210 width=108)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                    Group By Operator [GBY_1800] (rows=43558464 width=135)
                                                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["$sum0(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                    <-Reducer 97 [SIMPLE_EDGE]
                                                                      SHUFFLE [RS_686]
                                                                        PartitionCols:_col0, _col1, _col2
                                                                         Please refer to the previous Group By Operator [GBY_429]
                                          <-Reducer 59 [SIMPLE_EDGE]
                                            SHUFFLE [RS_750]
                                              PartitionCols:_col1
                                              Merge Join Operator [MERGEJOIN_1635] (rows=158402938 width=135)
                                                Conds:RS_1984._col0=RS_1850._col0(Inner),Output:["_col1","_col2","_col3"]
                                              <-Map 53 [SIMPLE_EDGE] vectorized
                                                PARTITION_ONLY_SHUFFLE [RS_1850]
                                                  PartitionCols:_col0
                                                   Please refer to the previous Select Operator [SEL_1845]
                                              <-Map 126 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_1984]
                                                  PartitionCols:_col0
                                                  Select Operator [SEL_1983] (rows=144002668 width=135)
                                                    Output:["_col0","_col1","_col2","_col3"]
                                                    Filter Operator [FIL_1982] (rows=144002668 width=135)
                                                      predicate:((ws_item_sk BETWEEN DynamicValue(RS_751_item_i_item_sk_min) AND DynamicValue(RS_751_item_i_item_sk_max) and in_bloom_filter(ws_item_sk, DynamicValue(RS_751_item_i_item_sk_bloom_filter))) and (ws_item_sk BETWEEN DynamicValue(RS_752_item_i_item_sk_min) AND DynamicValue(RS_752_item_i_item_sk_max) and in_bloom_filter(ws_item_sk, DynamicValue(RS_752_item_i_item_sk_bloom_filter))) and (ws_sold_date_sk BETWEEN DynamicValue(RS_748_date_dim_d_date_sk_min) AND DynamicValue(RS_748_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_748_date_dim_d_date_sk_bloom_filter))) and ws_item_sk is not null and ws_sold_date_sk is not null)
                                                      TableScan [TS_593] (rows=144002668 width=135)
                                                        default@web_sales,web_sales,Tbl:COMPLETE,Col:NONE,Output:["ws_sold_date_sk","ws_item_sk","ws_quantity","ws_list_price"]
                                                      <-Reducer 105 [BROADCAST_EDGE] vectorized
                                                        BROADCAST [RS_1970]
                                                          Group By Operator [GBY_1969] (rows=1 width=12)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                          <-Map 63 [CUSTOM_SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_1904]
                                                              Group By Operator [GBY_1901] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                Select Operator [SEL_1892] (rows=462000 width=1436)
                                                                  Output:["_col0"]
                                                                   Please refer to the previous Select Operator [SEL_1877]
                                                      <-Reducer 62 [BROADCAST_EDGE] vectorized
                                                        BROADCAST [RS_1968]
                                                          Group By Operator [GBY_1967] (rows=1 width=12)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                          <-Map 53 [CUSTOM_SIMPLE_EDGE] vectorized
                                                            PARTITION_ONLY_SHUFFLE [RS_1857]
                                                              Group By Operator [GBY_1854] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                Select Operator [SEL_1851] (rows=18262 width=1119)
                                                                  Output:["_col0"]
                                                                   Please refer to the previous Select Operator [SEL_1845]
                                                      <-Reducer 95 [BROADCAST_EDGE] vectorized
                                                        BROADCAST [RS_1981]
                                                          Group By Operator [GBY_1980] (rows=1 width=12)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                          <-Reducer 94 [CUSTOM_SIMPLE_EDGE] vectorized
                                                            PARTITION_ONLY_SHUFFLE [RS_1979]
                                                              Group By Operator [GBY_1978] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                Select Operator [SEL_1977] (rows=254100 width=1436)
                                                                  Output:["_col0"]
                                                                   Please refer to the previous Group By Operator [GBY_1975]
                  <-Reducer 5 [CONTAINS]
                    Reduce Output Operator [RS_1659]
                      PartitionCols:_col0, _col1, _col2, _col3, _col4
                      Group By Operator [GBY_1658] (rows=2032776160 width=237)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col4)","sum(_col5)"],keys:_col0, _col1, _col2, _col3, 0L
                        Top N Key Operator [TNK_1657] (rows=406555232 width=237)
                          keys:_col0, _col1, _col2, _col3, 0L,sort order:+++++,top n:100
                          Select Operator [SEL_1655] (rows=232318249 width=217)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                            Filter Operator [FIL_1654] (rows=232318249 width=217)
                              predicate:(_col5 > _col1)
                              Merge Join Operator [MERGEJOIN_1653] (rows=696954748 width=217)
                                Conds:(Inner),(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6"]
                              <-Reducer 25 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1843]
                                  Select Operator [SEL_1842] (rows=1 width=120)
                                    Output:["_col0"]
                                    Group By Operator [GBY_1841] (rows=1 width=120)
                                      Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"]
                                    <-Union 24 [CUSTOM_SIMPLE_EDGE]
                                      <-Reducer 23 [CONTAINS]
                                        Reduce Output Operator [RS_1709]
                                          Group By Operator [GBY_1708] (rows=1 width=120)
                                            Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                            Select Operator [SEL_1707] (rows=1108786976 width=108)
                                              Output:["_col0"]
                                              Select Operator [SEL_1705] (rows=316788826 width=135)
                                                Output:["_col0","_col1"]
                                                Merge Join Operator [MERGEJOIN_1704] (rows=316788826 width=135)
                                                  Conds:RS_2012._col0=RS_1991._col0(Inner),Output:["_col1","_col2"]
                                                <-Map 21 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_1991]
                                                    PartitionCols:_col0
                                                     Please refer to the previous Select Operator [SEL_1988]
                                                <-Map 47 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_2012]
                                                    PartitionCols:_col0
                                                     Please refer to the previous Select Operator [SEL_2011]
                                      <-Reducer 39 [CONTAINS]
                                        Reduce Output Operator [RS_1745]
                                          Group By Operator [GBY_1744] (rows=1 width=120)
                                            Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                            Select Operator [SEL_1743] (rows=1108786976 width=108)
                                              Output:["_col0"]
                                              Select Operator [SEL_1741] (rows=158402938 width=135)
                                                Output:["_col0","_col1"]
                                                Merge Join Operator [MERGEJOIN_1740] (rows=158402938 width=135)
                                                  Conds:RS_2040._col0=RS_2019._col0(Inner),Output:["_col1","_col2"]
                                                <-Map 37 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_2019]
                                                    PartitionCols:_col0
                                                     Please refer to the previous Select Operator [SEL_2016]
                                                <-Map 48 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_2040]
                                                    PartitionCols:_col0
                                                     Please refer to the previous Select Operator [SEL_2039]
                                      <-Reducer 44 [CONTAINS]
                                        Reduce Output Operator [RS_1763]
                                          Group By Operator [GBY_1762] (rows=1 width=120)
                                            Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                            Select Operator [SEL_1761] (rows=1108786976 width=108)
                                              Output:["_col0"]
                                              Select Operator [SEL_1759] (rows=633595212 width=88)
                                                Output:["_col0","_col1"]
                                                Merge Join Operator [MERGEJOIN_1758] (rows=633595212 width=88)
                                                  Conds:RS_2047._col0=RS_1817._col0(Inner),Output:["_col1","_col2"]
                                                <-Map 110 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_1817]
                                                    PartitionCols:_col0
                                                     Please refer to the previous Select Operator [SEL_1813]
                                                <-Map 43 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_2047]
                                                    PartitionCols:_col0
                                                     Please refer to the previous Select Operator [SEL_2046]
                              <-Reducer 4 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1840]
                                  Select Operator [SEL_1839] (rows=1 width=8)
                                    Filter Operator [FIL_1838] (rows=1 width=8)
                                      predicate:(sq_count_check(_col0) <= 1)
                                      Group By Operator [GBY_1837] (rows=1 width=8)
                                        Output:["_col0"],aggregations:["count()"]
                                        Select Operator [SEL_1836] (rows=1 width=8)
                                          Group By Operator [GBY_1835] (rows=1 width=8)
                                            Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                          <-Union 3 [CUSTOM_SIMPLE_EDGE]
                                            <-Reducer 18 [CONTAINS]
                                              Reduce Output Operator [RS_1691]
                                                Group By Operator [GBY_1690] (rows=1 width=8)
                                                  Output:["_col0"],aggregations:["count(_col0)"]
                                                  Select Operator [SEL_1689] (rows=1108786976 width=108)
                                                    Output:["_col0"]
                                                    Select Operator [SEL_1687] (rows=316788826 width=135)
                                                      Output:["_col0"]
                                                      Merge Join Operator [MERGEJOIN_1686] (rows=316788826 width=135)
                                                        Conds:RS_2005._col0=RS_1989._col0(Inner),Output:["_col1"]
                                                      <-Map 21 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1989]
                                                          PartitionCols:_col0
                                                           Please refer to the previous Select Operator [SEL_1988]
                                                      <-Map 17 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_2005]
                                                          PartitionCols:_col0
                                                           Please refer to the previous Select Operator [SEL_2004]
                                            <-Reducer 2 [CONTAINS]
                                              Reduce Output Operator [RS_1652]
                                                Group By Operator [GBY_1651] (rows=1 width=8)
                                                  Output:["_col0"],aggregations:["count(_col0)"]
                                                  Select Operator [SEL_1650] (rows=1108786976 width=108)
                                                    Output:["_col0"]
                                                    Select Operator [SEL_1648] (rows=633595212 width=88)
                                                      Output:["_col0"]
                                                      Merge Join Operator [MERGEJOIN_1647] (rows=633595212 width=88)
                                                        Conds:RS_1832._col0=RS_1815._col0(Inner),Output:["_col1"]
                                                      <-Map 110 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1815]
                                                          PartitionCols:_col0
                                                           Please refer to the previous Select Operator [SEL_1813]
                                                      <-Map 1 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1832]
                                                          PartitionCols:_col0
                                                           Please refer to the previous Select Operator [SEL_1831]
                                            <-Reducer 34 [CONTAINS]
                                              Reduce Output Operator [RS_1727]
                                                Group By Operator [GBY_1726] (rows=1 width=8)
                                                  Output:["_col0"],aggregations:["count(_col0)"]
                                                  Select Operator [SEL_1725] (rows=1108786976 width=108)
                                                    Output:["_col0"]
                                                    Select Operator [SEL_1723] (rows=158402938 width=135)
                                                      Output:["_col0"]
                                                      Merge Join Operator [MERGEJOIN_1722] (rows=158402938 width=135)
                                                        Conds:RS_2033._col0=RS_2017._col0(Inner),Output:["_col1"]
                                                      <-Map 37 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_2017]
                                                          PartitionCols:_col0
                                                           Please refer to the previous Select Operator [SEL_2016]
                                                      <-Map 33 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_2033]
                                                          PartitionCols:_col0
                                                           Please refer to the previous Select Operator [SEL_2032]
                              <-Reducer 52 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1922]
                                  Group By Operator [GBY_1921] (rows=696954748 width=88)
                                    Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2
                                  <-Reducer 51 [SIMPLE_EDGE]
                                    SHUFFLE [RS_246]
                                      PartitionCols:_col0, _col1, _col2
                                      Group By Operator [GBY_245] (rows=1393909496 width=88)
                                        Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col3)","count()"],keys:_col0, _col1, _col2
                                        Select Operator [SEL_243] (rows=1393909496 width=88)
                                          Output:["_col0","_col1","_col2","_col3"]
                                          Merge Join Operator [MERGEJOIN_1613] (rows=1393909496 width=88)
                                            Conds:RS_239._col1=RS_1882._col0(Inner),RS_239._col1=RS_1912._col0(Inner),Output:["_col2","_col3","_col8","_col9","_col10"]
                                          <-Map 63 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_1882]
                                              PartitionCols:_col0
                                              Select Operator [SEL_1870] (rows=462000 width=1436)
                                                Output:["_col0","_col1","_col2","_col3"]
                                                Filter Operator [FIL_1861] (rows=462000 width=1436)
                                                  predicate:i_item_sk is not null
                                                   Please refer to the previous TableScan [TS_91]
                                          <-Reducer 65 [ONE_TO_ONE_EDGE] vectorized
                                            PARTITION_ONLY_SHUFFLE [RS_1912]
                                              PartitionCols:_col0
                                              Group By Operator [GBY_1911] (rows=254100 width=1436)
                                                Output:["_col0"],keys:KEY._col0
                                              <-Reducer 64 [SIMPLE_EDGE]
                                                SHUFFLE [RS_233]
                                                  PartitionCols:_col0
                                                  Group By Operator [GBY_232] (rows=508200 width=1436)
                                                    Output:["_col0"],keys:_col0
                                                    Merge Join Operator [MERGEJOIN_1612] (rows=508200 width=1436)
                                                      Conds:RS_1878._col1, _col2, _col3=RS_1910._col0, _col1, _col2(Inner),Output:["_col0"]
                                                    <-Map 63 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1878]
                                                        PartitionCols:_col1, _col2, _col3
                                                         Please refer to the previous Select Operator [SEL_1869]
                                                    <-Reducer 71 [ONE_TO_ONE_EDGE] vectorized
                                                      FORWARD [RS_1910]
                                                        PartitionCols:_col0, _col1, _col2
                                                        Select Operator [SEL_1909] (rows=1 width=108)
                                                          Output:["_col0","_col1","_col2"]
                                                          Filter Operator [FIL_1908] (rows=1 width=108)
                                                            predicate:(_col3 = 3L)
                                                            Group By Operator [GBY_1907] (rows=76229105 width=108)
                                                              Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                            <-Union 70 [SIMPLE_EDGE]
                                                              <-Reducer 69 [CONTAINS]
                                                                Reduce Output Operator [RS_1779]
                                                                  PartitionCols:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1778] (rows=152458210 width=108)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                    Group By Operator [GBY_1776] (rows=87119342 width=88)
                                                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["$sum0(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                    <-Reducer 68 [SIMPLE_EDGE]
                                                                      SHUFFLE [RS_133]
                                                                        PartitionCols:_col0, _col1, _col2
                                                                        Group By Operator [GBY_132] (rows=174238685 width=88)
                                                                          Output:["_col0","_col1","_col2","_col3"],aggregations:["$sum0(_col7)"],keys:_col3, _col4, _col5
                                                                          Select Operator [SEL_130] (rows=174238685 width=88)
                                                                            Output:["_col3","_col4","_col5","_col7"]
                                                                            Merge Join Operator [MERGEJOIN_1607] (rows=174238685 width=88)
                                                                              Conds:RS_127._col0=RS_2051._col0(Inner),Output:["_col1","_col3","_col4","_col5","_col6"]
                                                                            <-Reducer 109 [ONE_TO_ONE_EDGE]
                                                                              FORWARD [RS_127]
                                                                                PartitionCols:_col0
                                                                                 Please refer to the previous Group By Operator [GBY_117]
                                                                            <-Reducer 67 [SIMPLE_EDGE] vectorized
                                                                              PARTITION_ONLY_SHUFFLE [RS_2051]
                                                                                PartitionCols:_col0
                                                                                 Please refer to the previous Group By Operator [GBY_2050]
                                                              <-Reducer 75 [CONTAINS]
                                                                Reduce Output Operator [RS_1783]
                                                                  PartitionCols:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1782] (rows=152458210 width=108)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                    Group By Operator [GBY_1780] (rows=43558464 width=135)
                                                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["$sum0(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                    <-Reducer 74 [SIMPLE_EDGE]
                                                                      SHUFFLE [RS_175]
                                                                        PartitionCols:_col0, _col1, _col2
                                                                        Group By Operator [GBY_174] (rows=87116928 width=135)
                                                                          Output:["_col0","_col1","_col2","_col3"],aggregations:["$sum0(_col7)"],keys:_col3, _col4, _col5
                                                                          Select Operator [SEL_172] (rows=87116928 width=135)
                                                                            Output:["_col3","_col4","_col5","_col7"]
                                                                            Merge Join Operator [MERGEJOIN_1609] (rows=87116928 width=135)
                                                                              Conds:RS_169._col0=RS_2079._col0(Inner),Output:["_col1","_col3","_col4","_col5","_col6"]
                                                                            <-Reducer 114 [ONE_TO_ONE_EDGE]
                                                                              FORWARD [RS_169]
                                                                                PartitionCols:_col0
                                                                                 Please refer to the previous Group By Operator [GBY_159]
                                                                            <-Reducer 73 [SIMPLE_EDGE] vectorized
                                                                              PARTITION_ONLY_SHUFFLE [RS_2079]
                                                                                PartitionCols:_col0
                                                                                 Please refer to the previous Group By Operator [GBY_2078]
                                                              <-Reducer 79 [CONTAINS]
                                                                Reduce Output Operator [RS_1787]
                                                                  PartitionCols:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1786] (rows=152458210 width=108)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                    Group By Operator [GBY_1784] (rows=21780404 width=135)
                                                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["$sum0(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                    <-Reducer 78 [SIMPLE_EDGE]
                                                                      SHUFFLE [RS_218]
                                                                        PartitionCols:_col0, _col1, _col2
                                                                        Group By Operator [GBY_217] (rows=43560808 width=135)
                                                                          Output:["_col0","_col1","_col2","_col3"],aggregations:["$sum0(_col7)"],keys:_col3, _col4, _col5
                                                                          Select Operator [SEL_215] (rows=43560808 width=135)
                                                                            Output:["_col3","_col4","_col5","_col7"]
                                                                            Merge Join Operator [MERGEJOIN_1611] (rows=43560808 width=135)
                                                                              Conds:RS_212._col0=RS_2094._col0(Inner),Output:["_col1","_col3","_col4","_col5","_col6"]
                                                                            <-Reducer 117 [ONE_TO_ONE_EDGE]
                                                                              FORWARD [RS_212]
                                                                                PartitionCols:_col0
                                                                                 Please refer to the previous Group By Operator [GBY_202]
                                                                            <-Reducer 77 [SIMPLE_EDGE] vectorized
                                                                              PARTITION_ONLY_SHUFFLE [RS_2094]
                                                                                PartitionCols:_col0
                                                                                 Please refer to the previous Group By Operator [GBY_2093]
                                          <-Reducer 50 [SIMPLE_EDGE]
                                            SHUFFLE [RS_239]
                                              PartitionCols:_col1
                                              Merge Join Operator [MERGEJOIN_1605] (rows=633595212 width=88)
                                                Conds:RS_1920._col0=RS_1846._col0(Inner),Output:["_col1","_col2","_col3"]
                                              <-Map 53 [SIMPLE_EDGE] vectorized
                                                PARTITION_ONLY_SHUFFLE [RS_1846]
                                                  PartitionCols:_col0
                                                   Please refer to the previous Select Operator [SEL_1845]
                                              <-Map 49 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_1920]
                                                  PartitionCols:_col0
                                                  Select Operator [SEL_1919] (rows=575995635 width=88)
                                                    Output:["_col0","_col1","_col2","_col3"]
                                                    Filter Operator [FIL_1918] (rows=575995635 width=88)
                                                      predicate:((ss_item_sk BETWEEN DynamicValue(RS_240_item_i_item_sk_min) AND DynamicValue(RS_240_item_i_item_sk_max) and in_bloom_filter(ss_item_sk, DynamicValue(RS_240_item_i_item_sk_bloom_filter))) and (ss_item_sk BETWEEN DynamicValue(RS_241_item_i_item_sk_min) AND DynamicValue(RS_241_item_i_item_sk_max) and in_bloom_filter(ss_item_sk, DynamicValue(RS_241_item_i_item_sk_bloom_filter))) and (ss_sold_date_sk BETWEEN DynamicValue(RS_237_date_dim_d_date_sk_min) AND DynamicValue(RS_237_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_237_date_dim_d_date_sk_bloom_filter))) and ss_item_sk is not null and ss_sold_date_sk is not null)
                                                      TableScan [TS_82] (rows=575995635 width=88)
                                                        default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_date_sk","ss_item_sk","ss_quantity","ss_list_price"]
                                                      <-Reducer 54 [BROADCAST_EDGE] vectorized
                                                        BROADCAST [RS_1859]
                                                          Group By Operator [GBY_1858] (rows=1 width=12)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                          <-Map 53 [CUSTOM_SIMPLE_EDGE] vectorized
                                                            PARTITION_ONLY_SHUFFLE [RS_1855]
                                                              Group By Operator [GBY_1852] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                Select Operator [SEL_1847] (rows=18262 width=1119)
                                                                  Output:["_col0"]
                                                                   Please refer to the previous Select Operator [SEL_1845]
                                                      <-Reducer 66 [BROADCAST_EDGE] vectorized
                                                        BROADCAST [RS_1917]
                                                          Group By Operator [GBY_1916] (rows=1 width=12)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                          <-Reducer 65 [CUSTOM_SIMPLE_EDGE] vectorized
                                                            PARTITION_ONLY_SHUFFLE [RS_1915]
                                                              Group By Operator [GBY_1914] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                Select Operator [SEL_1913] (rows=254100 width=1436)
                                                                  Output:["_col0"]
                                                                   Please refer to the previous Group By Operator [GBY_1911]
                                                      <-Reducer 81 [BROADCAST_EDGE] vectorized
                                                        BROADCAST [RS_1906]
                                                          Group By Operator [GBY_1905] (rows=1 width=12)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                          <-Map 63 [CUSTOM_SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_1902]
                                                              Group By Operator [GBY_1896] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                Select Operator [SEL_1883] (rows=462000 width=1436)
                                                                  Output:["_col0"]
                                                                   Please refer to the previous Select Operator [SEL_1870]

