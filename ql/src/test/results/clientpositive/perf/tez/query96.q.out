PREHOOK: query: explain
select  count(*) 
from store_sales
    ,household_demographics 
    ,time_dim, store
where ss_sold_time_sk = time_dim.t_time_sk   
    and ss_hdemo_sk = household_demographics.hd_demo_sk 
    and ss_store_sk = s_store_sk
    and time_dim.t_hour = 8
    and time_dim.t_minute >= 30
    and household_demographics.hd_dep_count = 5
    and store.s_store_name = 'ese'
order by count(*)
limit 100
PREHOOK: type: QUERY
POSTHOOK: query: explain
select  count(*) 
from store_sales
    ,household_demographics 
    ,time_dim, store
where ss_sold_time_sk = time_dim.t_time_sk   
    and ss_hdemo_sk = household_demographics.hd_demo_sk 
    and ss_store_sk = s_store_sk
    and time_dim.t_hour = 8
    and time_dim.t_minute >= 30
    and household_demographics.hd_dep_count = 5
    and store.s_store_name = 'ese'
order by count(*)
limit 100
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 10 (BROADCAST_EDGE), Reducer 13 (BROADCAST_EDGE), Reducer 16 (BROADCAST_EDGE)
Reducer 10 <- Map 9 (CUSTOM_SIMPLE_EDGE)
Reducer 12 <- Map 11 (SIMPLE_EDGE)
Reducer 13 <- Reducer 12 (CUSTOM_SIMPLE_EDGE)
Reducer 15 <- Map 14 (SIMPLE_EDGE)
Reducer 16 <- Reducer 15 (CUSTOM_SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 9 (SIMPLE_EDGE)
Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 12 (ONE_TO_ONE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 15 (ONE_TO_ONE_EDGE), Reducer 5 (ONE_TO_ONE_EDGE)
Reducer 7 <- Reducer 6 (CUSTOM_SIMPLE_EDGE)
Reducer 8 <- Reducer 7 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 8 vectorized
      File Output Operator [FS_136]
        Limit [LIM_135] (rows=1 width=8)
          Number of rows:100
          Select Operator [SEL_134] (rows=1 width=8)
            Output:["_col0"]
          <-Reducer 7 [SIMPLE_EDGE]
            SHUFFLE [RS_48]
              Select Operator [SEL_47] (rows=1 width=8)
                Output:["_col1"]
                Group By Operator [GBY_46] (rows=1 width=8)
                  Output:["_col0"],aggregations:["$sum0(VALUE._col0)"]
                <-Reducer 6 [CUSTOM_SIMPLE_EDGE]
                  PARTITION_ONLY_SHUFFLE [RS_45]
                    Group By Operator [GBY_44] (rows=1 width=8)
                      Output:["_col0"],aggregations:["$sum0(_col4)"]
                      Select Operator [SEL_42] (rows=191662559 width=88)
                        Output:["_col4"]
                        Merge Join Operator [MERGEJOIN_98] (rows=191662559 width=88)
                          Conds:RS_39._col0=RS_123._col0(Inner),Output:["_col1","_col3"]
                        <-Reducer 15 [ONE_TO_ONE_EDGE] vectorized
                          FORWARD [RS_123]
                            PartitionCols:_col0
                            Group By Operator [GBY_122] (rows=426 width=1910)
                              Output:["_col0","_col1"],aggregations:["count(VALUE._col0)"],keys:KEY._col0
                            <-Map 14 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_121]
                                PartitionCols:_col0
                                Group By Operator [GBY_120] (rows=852 width=1910)
                                  Output:["_col0","_col1"],aggregations:["count()"],keys:_col0
                                  Select Operator [SEL_119] (rows=852 width=1910)
                                    Output:["_col0"]
                                    Filter Operator [FIL_118] (rows=852 width=1910)
                                      predicate:((s_store_name = 'ese') and s_store_sk is not null)
                                      TableScan [TS_31] (rows=1704 width=1910)
                                        default@store,store,Tbl:COMPLETE,Col:NONE,Output:["s_store_sk","s_store_name"]
                        <-Reducer 5 [ONE_TO_ONE_EDGE]
                          FORWARD [RS_39]
                            PartitionCols:_col0
                            Group By Operator [GBY_29] (rows=174238687 width=88)
                              Output:["_col0","_col1"],aggregations:["$sum0(VALUE._col0)"],keys:KEY._col0
                            <-Reducer 4 [SIMPLE_EDGE]
                              SHUFFLE [RS_28]
                                PartitionCols:_col0
                                Group By Operator [GBY_27] (rows=348477374 width=88)
                                  Output:["_col0","_col1"],aggregations:["$sum0(_col5)"],keys:_col1
                                  Select Operator [SEL_25] (rows=348477374 width=88)
                                    Output:["_col1","_col5"]
                                    Merge Join Operator [MERGEJOIN_97] (rows=348477374 width=88)
                                      Conds:RS_133._col0=RS_112._col0(Inner),Output:["_col1","_col2","_col4"]
                                    <-Reducer 12 [ONE_TO_ONE_EDGE] vectorized
                                      FORWARD [RS_112]
                                        PartitionCols:_col0
                                        Group By Operator [GBY_111] (rows=1800 width=107)
                                          Output:["_col0","_col1"],aggregations:["count(VALUE._col0)"],keys:KEY._col0
                                        <-Map 11 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_110]
                                            PartitionCols:_col0
                                            Group By Operator [GBY_109] (rows=3600 width=107)
                                              Output:["_col0","_col1"],aggregations:["count()"],keys:_col0
                                              Select Operator [SEL_108] (rows=3600 width=107)
                                                Output:["_col0"]
                                                Filter Operator [FIL_107] (rows=3600 width=107)
                                                  predicate:((hd_dep_count = 5) and hd_demo_sk is not null)
                                                  TableScan [TS_14] (rows=7200 width=107)
                                                    default@household_demographics,household_demographics,Tbl:COMPLETE,Col:NONE,Output:["hd_demo_sk","hd_dep_count"]
                                    <-Reducer 3 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_133]
                                        PartitionCols:_col0
                                        Group By Operator [GBY_132] (rows=316797606 width=88)
                                          Output:["_col0","_col1","_col2"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1
                                        <-Reducer 2 [SIMPLE_EDGE]
                                          SHUFFLE [RS_11]
                                            PartitionCols:_col0, _col1
                                            Group By Operator [GBY_10] (rows=633595212 width=88)
                                              Output:["_col0","_col1","_col2"],aggregations:["count()"],keys:_col1, _col2
                                              Merge Join Operator [MERGEJOIN_96] (rows=633595212 width=88)
                                                Conds:RS_131._col0=RS_101._col0(Inner),Output:["_col1","_col2"]
                                              <-Map 9 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_101]
                                                  PartitionCols:_col0
                                                  Select Operator [SEL_100] (rows=14400 width=471)
                                                    Output:["_col0"]
                                                    Filter Operator [FIL_99] (rows=14400 width=471)
                                                      predicate:((t_hour = 8) and (t_minute >= 30) and t_time_sk is not null)
                                                      TableScan [TS_3] (rows=86400 width=471)
                                                        default@time_dim,time_dim,Tbl:COMPLETE,Col:NONE,Output:["t_time_sk","t_hour","t_minute"]
                                              <-Map 1 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_131]
                                                  PartitionCols:_col0
                                                  Select Operator [SEL_130] (rows=575995635 width=88)
                                                    Output:["_col0","_col1","_col2"]
                                                    Filter Operator [FIL_129] (rows=575995635 width=88)
                                                      predicate:((ss_hdemo_sk BETWEEN DynamicValue(RS_23_household_demographics_hd_demo_sk_min) AND DynamicValue(RS_23_household_demographics_hd_demo_sk_max) and in_bloom_filter(ss_hdemo_sk, DynamicValue(RS_23_household_demographics_hd_demo_sk_bloom_filter))) and (ss_sold_time_sk BETWEEN DynamicValue(RS_7_time_dim_t_time_sk_min) AND DynamicValue(RS_7_time_dim_t_time_sk_max) and in_bloom_filter(ss_sold_time_sk, DynamicValue(RS_7_time_dim_t_time_sk_bloom_filter))) and (ss_store_sk BETWEEN DynamicValue(RS_40_store_s_store_sk_min) AND DynamicValue(RS_40_store_s_store_sk_max) and in_bloom_filter(ss_store_sk, DynamicValue(RS_40_store_s_store_sk_bloom_filter))) and ss_hdemo_sk is not null and ss_sold_time_sk is not null and ss_store_sk is not null)
                                                      TableScan [TS_0] (rows=575995635 width=88)
                                                        default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_time_sk","ss_hdemo_sk","ss_store_sk"]
                                                      <-Reducer 10 [BROADCAST_EDGE] vectorized
                                                        BROADCAST [RS_106]
                                                          Group By Operator [GBY_105] (rows=1 width=12)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                          <-Map 9 [CUSTOM_SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_104]
                                                              Group By Operator [GBY_103] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                Select Operator [SEL_102] (rows=14400 width=471)
                                                                  Output:["_col0"]
                                                                   Please refer to the previous Select Operator [SEL_100]
                                                      <-Reducer 13 [BROADCAST_EDGE] vectorized
                                                        BROADCAST [RS_117]
                                                          Group By Operator [GBY_116] (rows=1 width=16)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                          <-Reducer 12 [CUSTOM_SIMPLE_EDGE] vectorized
                                                            FORWARD [RS_115]
                                                              Group By Operator [GBY_114] (rows=1 width=16)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                Select Operator [SEL_113] (rows=1800 width=107)
                                                                  Output:["_col0"]
                                                                   Please refer to the previous Group By Operator [GBY_111]
                                                      <-Reducer 16 [BROADCAST_EDGE] vectorized
                                                        BROADCAST [RS_128]
                                                          Group By Operator [GBY_127] (rows=1 width=16)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                          <-Reducer 15 [CUSTOM_SIMPLE_EDGE] vectorized
                                                            FORWARD [RS_126]
                                                              Group By Operator [GBY_125] (rows=1 width=16)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                Select Operator [SEL_124] (rows=426 width=1910)
                                                                  Output:["_col0"]
                                                                   Please refer to the previous Group By Operator [GBY_122]

