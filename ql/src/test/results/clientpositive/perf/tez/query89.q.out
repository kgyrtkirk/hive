PREHOOK: query: explain
select  *
from(
select i_category, i_class, i_brand,
       s_store_name, s_company_name,
       d_moy,
       sum(ss_sales_price) sum_sales,
       avg(sum(ss_sales_price)) over
         (partition by i_category, i_brand, s_store_name, s_company_name)
         avg_monthly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
      ss_sold_date_sk = d_date_sk and
      ss_store_sk = s_store_sk and
      d_year in (2000) and
        ((i_category in ('Home','Books','Electronics') and
          i_class in ('wallpaper','parenting','musical')
         )
      or (i_category in ('Shoes','Jewelry','Men') and
          i_class in ('womens','birdal','pants') 
        ))
group by i_category, i_class, i_brand,
         s_store_name, s_company_name, d_moy) tmp1
where case when (avg_monthly_sales <> 0) then (abs(sum_sales - avg_monthly_sales) / avg_monthly_sales) else null end > 0.1
order by sum_sales - avg_monthly_sales, s_store_name
limit 100
PREHOOK: type: QUERY
POSTHOOK: query: explain
select  *
from(
select i_category, i_class, i_brand,
       s_store_name, s_company_name,
       d_moy,
       sum(ss_sales_price) sum_sales,
       avg(sum(ss_sales_price)) over
         (partition by i_category, i_brand, s_store_name, s_company_name)
         avg_monthly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
      ss_sold_date_sk = d_date_sk and
      ss_store_sk = s_store_sk and
      d_year in (2000) and
        ((i_category in ('Home','Books','Electronics') and
          i_class in ('wallpaper','parenting','musical')
         )
      or (i_category in ('Shoes','Jewelry','Men') and
          i_class in ('womens','birdal','pants') 
        ))
group by i_category, i_class, i_brand,
         s_store_name, s_company_name, d_moy) tmp1
where case when (avg_monthly_sales <> 0) then (abs(sum_sales - avg_monthly_sales) / avg_monthly_sales) else null end > 0.1
order by sum_sales - avg_monthly_sales, s_store_name
limit 100
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 11 (BROADCAST_EDGE), Reducer 14 (BROADCAST_EDGE), Reducer 17 (BROADCAST_EDGE)
Reducer 11 <- Map 10 (CUSTOM_SIMPLE_EDGE)
Reducer 13 <- Map 12 (SIMPLE_EDGE)
Reducer 14 <- Reducer 13 (CUSTOM_SIMPLE_EDGE)
Reducer 16 <- Map 15 (SIMPLE_EDGE)
Reducer 17 <- Reducer 16 (CUSTOM_SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 10 (SIMPLE_EDGE)
Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 13 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 16 (SIMPLE_EDGE), Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 6 (SIMPLE_EDGE)
Reducer 8 <- Reducer 7 (SIMPLE_EDGE)
Reducer 9 <- Reducer 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 9 vectorized
      File Output Operator [FS_154]
        Limit [LIM_153] (rows=100 width=88)
          Number of rows:100
          Select Operator [SEL_152] (rows=47915639 width=88)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
          <-Reducer 8 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_151]
              Select Operator [SEL_150] (rows=47915639 width=88)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"]
                Filter Operator [FIL_149] (rows=47915639 width=88)
                  predicate:CASE WHEN ((avg_window_0 <> 0)) THEN (((abs((_col6 - avg_window_0)) / avg_window_0) > 0.1)) ELSE (null) END
                  Select Operator [SEL_148] (rows=95831279 width=88)
                    Output:["avg_window_0","_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                    PTF Operator [PTF_147] (rows=95831279 width=88)
                      Function definitions:[{},{"name:":"windowingtablefunction","order by:":"_col3 ASC NULLS FIRST, _col1 ASC NULLS FIRST, _col4 ASC NULLS FIRST, _col5 ASC NULLS FIRST","partition by:":"_col3, _col1, _col4, _col5"}]
                      Select Operator [SEL_146] (rows=95831279 width=88)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                      <-Reducer 7 [SIMPLE_EDGE] vectorized
                        SHUFFLE [RS_145]
                          PartitionCols:_col3, _col1, _col4, _col5
                          Group By Operator [GBY_144] (rows=95831279 width=88)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5
                          <-Reducer 6 [SIMPLE_EDGE]
                            SHUFFLE [RS_45]
                              PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5
                              Group By Operator [GBY_44] (rows=191662559 width=88)
                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col10)"],keys:_col1, _col2, _col3, _col4, _col7, _col8
                                Select Operator [SEL_42] (rows=191662559 width=88)
                                  Output:["_col1","_col2","_col3","_col4","_col7","_col8","_col10"]
                                  Merge Join Operator [MERGEJOIN_106] (rows=191662559 width=88)
                                    Conds:RS_143._col0=RS_131._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col7","_col8","_col9"]
                                  <-Reducer 16 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_131]
                                      PartitionCols:_col0
                                      Group By Operator [GBY_130] (rows=852 width=1910)
                                        Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                      <-Map 15 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_129]
                                          PartitionCols:_col0, _col1, _col2
                                          Group By Operator [GBY_128] (rows=1704 width=1910)
                                            Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col0, _col1, _col2
                                            Select Operator [SEL_127] (rows=1704 width=1910)
                                              Output:["_col0","_col1","_col2"]
                                              Filter Operator [FIL_126] (rows=1704 width=1910)
                                                predicate:s_store_sk is not null
                                                TableScan [TS_31] (rows=1704 width=1910)
                                                  default@store,store,Tbl:COMPLETE,Col:NONE,Output:["s_store_sk","s_store_name","s_company_name"]
                                  <-Reducer 5 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_143]
                                      PartitionCols:_col0
                                      Group By Operator [GBY_142] (rows=174238687 width=88)
                                        Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4
                                      <-Reducer 4 [SIMPLE_EDGE]
                                        SHUFFLE [RS_28]
                                          PartitionCols:_col0, _col1, _col2, _col3, _col4
                                          Group By Operator [GBY_27] (rows=348477374 width=88)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(_col9)"],keys:_col1, _col2, _col5, _col6, _col7
                                            Select Operator [SEL_25] (rows=348477374 width=88)
                                              Output:["_col1","_col2","_col5","_col6","_col7","_col9"]
                                              Merge Join Operator [MERGEJOIN_105] (rows=348477374 width=88)
                                                Conds:RS_141._col0=RS_120._col0(Inner),Output:["_col1","_col2","_col3","_col5","_col6","_col7","_col8"]
                                              <-Reducer 13 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_120]
                                                  PartitionCols:_col0
                                                  Group By Operator [GBY_119] (rows=231000 width=1436)
                                                    Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3
                                                  <-Map 12 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_118]
                                                      PartitionCols:_col0, _col1, _col2, _col3
                                                      Group By Operator [GBY_117] (rows=462000 width=1436)
                                                        Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["count()"],keys:_col0, _col1, _col2, _col3
                                                        Select Operator [SEL_116] (rows=462000 width=1436)
                                                          Output:["_col0","_col1","_col2","_col3"]
                                                          Filter Operator [FIL_115] (rows=462000 width=1436)
                                                            predicate:((((i_category) IN ('Home', 'Books', 'Electronics') and (i_class) IN ('wallpaper', 'parenting', 'musical')) or ((i_category) IN ('Shoes', 'Jewelry', 'Men') and (i_class) IN ('womens', 'birdal', 'pants'))) and i_item_sk is not null)
                                                            TableScan [TS_14] (rows=462000 width=1436)
                                                              default@item,item,Tbl:COMPLETE,Col:NONE,Output:["i_item_sk","i_brand","i_class","i_category"]
                                              <-Reducer 3 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_141]
                                                  PartitionCols:_col0
                                                  Group By Operator [GBY_140] (rows=316797606 width=88)
                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                  <-Reducer 2 [SIMPLE_EDGE]
                                                    SHUFFLE [RS_11]
                                                      PartitionCols:_col0, _col1, _col2
                                                      Group By Operator [GBY_10] (rows=633595212 width=88)
                                                        Output:["_col0","_col1","_col2","_col3"],aggregations:["sum(_col3)"],keys:_col1, _col2, _col6
                                                        Merge Join Operator [MERGEJOIN_104] (rows=633595212 width=88)
                                                          Conds:RS_139._col0=RS_109._col0(Inner),Output:["_col1","_col2","_col3","_col6"]
                                                        <-Map 10 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_109]
                                                            PartitionCols:_col0
                                                            Select Operator [SEL_108] (rows=36524 width=1119)
                                                              Output:["_col0","_col2"]
                                                              Filter Operator [FIL_107] (rows=36524 width=1119)
                                                                predicate:((d_year = 2000) and d_date_sk is not null)
                                                                TableScan [TS_3] (rows=73049 width=1119)
                                                                  default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_year","d_moy"]
                                                        <-Map 1 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_139]
                                                            PartitionCols:_col0
                                                            Select Operator [SEL_138] (rows=575995635 width=88)
                                                              Output:["_col0","_col1","_col2","_col3"]
                                                              Filter Operator [FIL_137] (rows=575995635 width=88)
                                                                predicate:((ss_item_sk BETWEEN DynamicValue(RS_23_item_i_item_sk_min) AND DynamicValue(RS_23_item_i_item_sk_max) and in_bloom_filter(ss_item_sk, DynamicValue(RS_23_item_i_item_sk_bloom_filter))) and (ss_sold_date_sk BETWEEN DynamicValue(RS_7_date_dim_d_date_sk_min) AND DynamicValue(RS_7_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_7_date_dim_d_date_sk_bloom_filter))) and (ss_store_sk BETWEEN DynamicValue(RS_40_store_s_store_sk_min) AND DynamicValue(RS_40_store_s_store_sk_max) and in_bloom_filter(ss_store_sk, DynamicValue(RS_40_store_s_store_sk_bloom_filter))) and ss_item_sk is not null and ss_sold_date_sk is not null and ss_store_sk is not null)
                                                                TableScan [TS_0] (rows=575995635 width=88)
                                                                  default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_date_sk","ss_item_sk","ss_store_sk","ss_sales_price"]
                                                                <-Reducer 11 [BROADCAST_EDGE] vectorized
                                                                  BROADCAST [RS_114]
                                                                    Group By Operator [GBY_113] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                    <-Map 10 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                      SHUFFLE [RS_112]
                                                                        Group By Operator [GBY_111] (rows=1 width=12)
                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                          Select Operator [SEL_110] (rows=36524 width=1119)
                                                                            Output:["_col0"]
                                                                             Please refer to the previous Select Operator [SEL_108]
                                                                <-Reducer 14 [BROADCAST_EDGE] vectorized
                                                                  BROADCAST [RS_125]
                                                                    Group By Operator [GBY_124] (rows=1 width=20)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                    <-Reducer 13 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                      SHUFFLE [RS_123]
                                                                        Group By Operator [GBY_122] (rows=1 width=20)
                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                          Select Operator [SEL_121] (rows=231000 width=1436)
                                                                            Output:["_col0"]
                                                                             Please refer to the previous Group By Operator [GBY_119]
                                                                <-Reducer 17 [BROADCAST_EDGE] vectorized
                                                                  BROADCAST [RS_136]
                                                                    Group By Operator [GBY_135] (rows=1 width=20)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                    <-Reducer 16 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                      SHUFFLE [RS_134]
                                                                        Group By Operator [GBY_133] (rows=1 width=20)
                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                          Select Operator [SEL_132] (rows=852 width=1910)
                                                                            Output:["_col0"]
                                                                             Please refer to the previous Group By Operator [GBY_130]

