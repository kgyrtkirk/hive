Warning: Shuffle Join MERGEJOIN[763][tables = [$hdt$_0, $hdt$_1, $hdt$_2, $hdt$_3, $hdt$_4, $hdt$_5, $hdt$_6, $hdt$_7]] in Stage 'Reducer 8' is a cross product
PREHOOK: query: explain
select  *
from
 (select count(*) h8_30_to_9
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk   
     and ss_hdemo_sk = household_demographics.hd_demo_sk 
     and ss_store_sk = s_store_sk
     and time_dim.t_hour = 8
     and time_dim.t_minute >= 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2)) 
     and store.s_store_name = 'ese') s1,
 (select count(*) h9_to_9_30 
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk 
     and time_dim.t_hour = 9 
     and time_dim.t_minute < 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s2,
 (select count(*) h9_30_to_10 
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk
     and time_dim.t_hour = 9
     and time_dim.t_minute >= 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s3,
 (select count(*) h10_to_10_30
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk
     and time_dim.t_hour = 10 
     and time_dim.t_minute < 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s4,
 (select count(*) h10_30_to_11
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk
     and time_dim.t_hour = 10 
     and time_dim.t_minute >= 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s5,
 (select count(*) h11_to_11_30
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk 
     and time_dim.t_hour = 11
     and time_dim.t_minute < 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s6,
 (select count(*) h11_30_to_12
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk
     and time_dim.t_hour = 11
     and time_dim.t_minute >= 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s7,
 (select count(*) h12_to_12_30
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk
     and time_dim.t_hour = 12
     and time_dim.t_minute < 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s8
PREHOOK: type: QUERY
POSTHOOK: query: explain
select  *
from
 (select count(*) h8_30_to_9
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk   
     and ss_hdemo_sk = household_demographics.hd_demo_sk 
     and ss_store_sk = s_store_sk
     and time_dim.t_hour = 8
     and time_dim.t_minute >= 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2)) 
     and store.s_store_name = 'ese') s1,
 (select count(*) h9_to_9_30 
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk 
     and time_dim.t_hour = 9 
     and time_dim.t_minute < 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s2,
 (select count(*) h9_30_to_10 
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk
     and time_dim.t_hour = 9
     and time_dim.t_minute >= 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s3,
 (select count(*) h10_to_10_30
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk
     and time_dim.t_hour = 10 
     and time_dim.t_minute < 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s4,
 (select count(*) h10_30_to_11
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk
     and time_dim.t_hour = 10 
     and time_dim.t_minute >= 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s5,
 (select count(*) h11_to_11_30
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk 
     and time_dim.t_hour = 11
     and time_dim.t_minute < 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s6,
 (select count(*) h11_30_to_12
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk
     and time_dim.t_hour = 11
     and time_dim.t_minute >= 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s7,
 (select count(*) h12_to_12_30
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk
     and time_dim.t_hour = 12
     and time_dim.t_minute < 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s8
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 10 (BROADCAST_EDGE), Reducer 62 (BROADCAST_EDGE), Reducer 72 (BROADCAST_EDGE)
Map 80 <- Reducer 17 (BROADCAST_EDGE), Reducer 63 (BROADCAST_EDGE), Reducer 73 (BROADCAST_EDGE)
Map 81 <- Reducer 24 (BROADCAST_EDGE), Reducer 64 (BROADCAST_EDGE), Reducer 74 (BROADCAST_EDGE)
Map 82 <- Reducer 31 (BROADCAST_EDGE), Reducer 65 (BROADCAST_EDGE), Reducer 75 (BROADCAST_EDGE)
Map 83 <- Reducer 38 (BROADCAST_EDGE), Reducer 66 (BROADCAST_EDGE), Reducer 76 (BROADCAST_EDGE)
Map 84 <- Reducer 45 (BROADCAST_EDGE), Reducer 67 (BROADCAST_EDGE), Reducer 77 (BROADCAST_EDGE)
Map 85 <- Reducer 52 (BROADCAST_EDGE), Reducer 68 (BROADCAST_EDGE), Reducer 78 (BROADCAST_EDGE)
Map 86 <- Reducer 59 (BROADCAST_EDGE), Reducer 69 (BROADCAST_EDGE), Reducer 79 (BROADCAST_EDGE)
Reducer 10 <- Map 9 (CUSTOM_SIMPLE_EDGE)
Reducer 11 <- Map 80 (SIMPLE_EDGE), Map 9 (SIMPLE_EDGE)
Reducer 12 <- Reducer 11 (SIMPLE_EDGE)
Reducer 13 <- Reducer 12 (SIMPLE_EDGE), Reducer 61 (ONE_TO_ONE_EDGE)
Reducer 14 <- Reducer 13 (SIMPLE_EDGE)
Reducer 15 <- Reducer 14 (ONE_TO_ONE_EDGE), Reducer 71 (ONE_TO_ONE_EDGE)
Reducer 16 <- Reducer 15 (CUSTOM_SIMPLE_EDGE)
Reducer 17 <- Map 9 (CUSTOM_SIMPLE_EDGE)
Reducer 18 <- Map 81 (SIMPLE_EDGE), Map 9 (SIMPLE_EDGE)
Reducer 19 <- Reducer 18 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 9 (SIMPLE_EDGE)
Reducer 20 <- Reducer 19 (SIMPLE_EDGE), Reducer 61 (ONE_TO_ONE_EDGE)
Reducer 21 <- Reducer 20 (SIMPLE_EDGE)
Reducer 22 <- Reducer 21 (ONE_TO_ONE_EDGE), Reducer 71 (ONE_TO_ONE_EDGE)
Reducer 23 <- Reducer 22 (CUSTOM_SIMPLE_EDGE)
Reducer 24 <- Map 9 (CUSTOM_SIMPLE_EDGE)
Reducer 25 <- Map 82 (SIMPLE_EDGE), Map 9 (SIMPLE_EDGE)
Reducer 26 <- Reducer 25 (SIMPLE_EDGE)
Reducer 27 <- Reducer 26 (SIMPLE_EDGE), Reducer 61 (ONE_TO_ONE_EDGE)
Reducer 28 <- Reducer 27 (SIMPLE_EDGE)
Reducer 29 <- Reducer 28 (ONE_TO_ONE_EDGE), Reducer 71 (ONE_TO_ONE_EDGE)
Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
Reducer 30 <- Reducer 29 (CUSTOM_SIMPLE_EDGE)
Reducer 31 <- Map 9 (CUSTOM_SIMPLE_EDGE)
Reducer 32 <- Map 83 (SIMPLE_EDGE), Map 9 (SIMPLE_EDGE)
Reducer 33 <- Reducer 32 (SIMPLE_EDGE)
Reducer 34 <- Reducer 33 (SIMPLE_EDGE), Reducer 61 (ONE_TO_ONE_EDGE)
Reducer 35 <- Reducer 34 (SIMPLE_EDGE)
Reducer 36 <- Reducer 35 (ONE_TO_ONE_EDGE), Reducer 71 (ONE_TO_ONE_EDGE)
Reducer 37 <- Reducer 36 (CUSTOM_SIMPLE_EDGE)
Reducer 38 <- Map 9 (CUSTOM_SIMPLE_EDGE)
Reducer 39 <- Map 84 (SIMPLE_EDGE), Map 9 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE), Reducer 61 (ONE_TO_ONE_EDGE)
Reducer 40 <- Reducer 39 (SIMPLE_EDGE)
Reducer 41 <- Reducer 40 (SIMPLE_EDGE), Reducer 61 (ONE_TO_ONE_EDGE)
Reducer 42 <- Reducer 41 (SIMPLE_EDGE)
Reducer 43 <- Reducer 42 (ONE_TO_ONE_EDGE), Reducer 71 (ONE_TO_ONE_EDGE)
Reducer 44 <- Reducer 43 (CUSTOM_SIMPLE_EDGE)
Reducer 45 <- Map 9 (CUSTOM_SIMPLE_EDGE)
Reducer 46 <- Map 85 (SIMPLE_EDGE), Map 9 (SIMPLE_EDGE)
Reducer 47 <- Reducer 46 (SIMPLE_EDGE)
Reducer 48 <- Reducer 47 (SIMPLE_EDGE), Reducer 61 (ONE_TO_ONE_EDGE)
Reducer 49 <- Reducer 48 (SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (SIMPLE_EDGE)
Reducer 50 <- Reducer 49 (ONE_TO_ONE_EDGE), Reducer 71 (ONE_TO_ONE_EDGE)
Reducer 51 <- Reducer 50 (CUSTOM_SIMPLE_EDGE)
Reducer 52 <- Map 9 (CUSTOM_SIMPLE_EDGE)
Reducer 53 <- Map 86 (SIMPLE_EDGE), Map 9 (SIMPLE_EDGE)
Reducer 54 <- Reducer 53 (SIMPLE_EDGE)
Reducer 55 <- Reducer 54 (SIMPLE_EDGE), Reducer 61 (ONE_TO_ONE_EDGE)
Reducer 56 <- Reducer 55 (SIMPLE_EDGE)
Reducer 57 <- Reducer 56 (ONE_TO_ONE_EDGE), Reducer 71 (ONE_TO_ONE_EDGE)
Reducer 58 <- Reducer 57 (CUSTOM_SIMPLE_EDGE)
Reducer 59 <- Map 9 (CUSTOM_SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (ONE_TO_ONE_EDGE), Reducer 71 (ONE_TO_ONE_EDGE)
Reducer 61 <- Map 60 (SIMPLE_EDGE)
Reducer 62 <- Reducer 61 (CUSTOM_SIMPLE_EDGE)
Reducer 63 <- Reducer 61 (CUSTOM_SIMPLE_EDGE)
Reducer 64 <- Reducer 61 (CUSTOM_SIMPLE_EDGE)
Reducer 65 <- Reducer 61 (CUSTOM_SIMPLE_EDGE)
Reducer 66 <- Reducer 61 (CUSTOM_SIMPLE_EDGE)
Reducer 67 <- Reducer 61 (CUSTOM_SIMPLE_EDGE)
Reducer 68 <- Reducer 61 (CUSTOM_SIMPLE_EDGE)
Reducer 69 <- Reducer 61 (CUSTOM_SIMPLE_EDGE)
Reducer 7 <- Reducer 6 (CUSTOM_SIMPLE_EDGE)
Reducer 71 <- Map 70 (SIMPLE_EDGE)
Reducer 72 <- Reducer 71 (CUSTOM_SIMPLE_EDGE)
Reducer 73 <- Reducer 71 (CUSTOM_SIMPLE_EDGE)
Reducer 74 <- Reducer 71 (CUSTOM_SIMPLE_EDGE)
Reducer 75 <- Reducer 71 (CUSTOM_SIMPLE_EDGE)
Reducer 76 <- Reducer 71 (CUSTOM_SIMPLE_EDGE)
Reducer 77 <- Reducer 71 (CUSTOM_SIMPLE_EDGE)
Reducer 78 <- Reducer 71 (CUSTOM_SIMPLE_EDGE)
Reducer 79 <- Reducer 71 (CUSTOM_SIMPLE_EDGE)
Reducer 8 <- Reducer 16 (CUSTOM_SIMPLE_EDGE), Reducer 23 (CUSTOM_SIMPLE_EDGE), Reducer 30 (CUSTOM_SIMPLE_EDGE), Reducer 37 (CUSTOM_SIMPLE_EDGE), Reducer 44 (CUSTOM_SIMPLE_EDGE), Reducer 51 (CUSTOM_SIMPLE_EDGE), Reducer 58 (CUSTOM_SIMPLE_EDGE), Reducer 7 (CUSTOM_SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 8
      File Output Operator [FS_394]
        Select Operator [SEL_393] (rows=1 width=65)
          Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
          Merge Join Operator [MERGEJOIN_763] (rows=1 width=65)
            Conds:(Inner),(Inner),(Inner),(Inner),(Inner),(Inner),(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
          <-Reducer 16 [CUSTOM_SIMPLE_EDGE]
            PARTITION_ONLY_SHUFFLE [RS_385]
              Group By Operator [GBY_94] (rows=1 width=8)
                Output:["_col0"],aggregations:["$sum0(VALUE._col0)"]
              <-Reducer 15 [CUSTOM_SIMPLE_EDGE]
                PARTITION_ONLY_SHUFFLE [RS_93]
                  Group By Operator [GBY_92] (rows=1 width=8)
                    Output:["_col0"],aggregations:["$sum0(_col4)"]
                    Select Operator [SEL_90] (rows=191662559 width=88)
                      Output:["_col4"]
                      Merge Join Operator [MERGEJOIN_750] (rows=191662559 width=88)
                        Conds:RS_87._col0=RS_860._col0(Inner),Output:["_col1","_col3"]
                      <-Reducer 71 [ONE_TO_ONE_EDGE] vectorized
                        PARTITION_ONLY_SHUFFLE [RS_860]
                          PartitionCols:_col0
                          Group By Operator [GBY_857] (rows=426 width=1910)
                            Output:["_col0","_col1"],aggregations:["count(VALUE._col0)"],keys:KEY._col0
                          <-Map 70 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_856]
                              PartitionCols:_col0
                              Group By Operator [GBY_855] (rows=852 width=1910)
                                Output:["_col0","_col1"],aggregations:["count()"],keys:_col0
                                Select Operator [SEL_854] (rows=852 width=1910)
                                  Output:["_col0"]
                                  Filter Operator [FIL_853] (rows=852 width=1910)
                                    predicate:((s_store_name = 'ese') and s_store_sk is not null)
                                    TableScan [TS_31] (rows=1704 width=1910)
                                      default@store,store,Tbl:COMPLETE,Col:NONE,Output:["s_store_sk","s_store_name"]
                      <-Reducer 14 [ONE_TO_ONE_EDGE]
                        FORWARD [RS_87]
                          PartitionCols:_col0
                          Group By Operator [GBY_77] (rows=174238687 width=88)
                            Output:["_col0","_col1"],aggregations:["$sum0(VALUE._col0)"],keys:KEY._col0
                          <-Reducer 13 [SIMPLE_EDGE]
                            SHUFFLE [RS_76]
                              PartitionCols:_col0
                              Group By Operator [GBY_75] (rows=348477374 width=88)
                                Output:["_col0","_col1"],aggregations:["$sum0(_col5)"],keys:_col1
                                Select Operator [SEL_73] (rows=348477374 width=88)
                                  Output:["_col1","_col5"]
                                  Merge Join Operator [MERGEJOIN_749] (rows=348477374 width=88)
                                    Conds:RS_907._col0=RS_821._col0(Inner),Output:["_col1","_col2","_col4"]
                                  <-Reducer 61 [ONE_TO_ONE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_821]
                                      PartitionCols:_col0
                                      Group By Operator [GBY_818] (rows=1800 width=107)
                                        Output:["_col0","_col1"],aggregations:["count(VALUE._col0)"],keys:KEY._col0
                                      <-Map 60 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_817]
                                          PartitionCols:_col0
                                          Group By Operator [GBY_816] (rows=3600 width=107)
                                            Output:["_col0","_col1"],aggregations:["count()"],keys:_col0
                                            Select Operator [SEL_815] (rows=3600 width=107)
                                              Output:["_col0"]
                                              Filter Operator [FIL_814] (rows=3600 width=107)
                                                predicate:((((hd_dep_count = 3) and (hd_vehicle_count <= 5)) or ((hd_dep_count = 0) and (hd_vehicle_count <= 2)) or ((hd_dep_count = 1) and (hd_vehicle_count <= 3))) and hd_demo_sk is not null)
                                                TableScan [TS_14] (rows=7200 width=107)
                                                  default@household_demographics,household_demographics,Tbl:COMPLETE,Col:NONE,Output:["hd_demo_sk","hd_dep_count","hd_vehicle_count"]
                                  <-Reducer 12 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_907]
                                      PartitionCols:_col0
                                      Group By Operator [GBY_906] (rows=316797606 width=88)
                                        Output:["_col0","_col1","_col2"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1
                                      <-Reducer 11 [SIMPLE_EDGE]
                                        SHUFFLE [RS_59]
                                          PartitionCols:_col0, _col1
                                          Group By Operator [GBY_58] (rows=633595212 width=88)
                                            Output:["_col0","_col1","_col2"],aggregations:["count()"],keys:_col1, _col2
                                            Merge Join Operator [MERGEJOIN_740] (rows=633595212 width=88)
                                              Conds:RS_905._col0=RS_782._col0(Inner),Output:["_col1","_col2"]
                                            <-Map 9 [SIMPLE_EDGE] vectorized
                                              PARTITION_ONLY_SHUFFLE [RS_782]
                                                PartitionCols:_col0
                                                Select Operator [SEL_773] (rows=14400 width=471)
                                                  Output:["_col0"]
                                                  Filter Operator [FIL_765] (rows=14400 width=471)
                                                    predicate:((t_hour = 12) and (t_minute < 30) and t_time_sk is not null)
                                                    TableScan [TS_3] (rows=86400 width=471)
                                                      default@time_dim,time_dim,Tbl:COMPLETE,Col:NONE,Output:["t_time_sk","t_hour","t_minute"]
                                            <-Map 80 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_905]
                                                PartitionCols:_col0
                                                Select Operator [SEL_904] (rows=575995635 width=88)
                                                  Output:["_col0","_col1","_col2"]
                                                  Filter Operator [FIL_903] (rows=575995635 width=88)
                                                    predicate:((ss_hdemo_sk BETWEEN DynamicValue(RS_71_household_demographics_hd_demo_sk_min) AND DynamicValue(RS_71_household_demographics_hd_demo_sk_max) and in_bloom_filter(ss_hdemo_sk, DynamicValue(RS_71_household_demographics_hd_demo_sk_bloom_filter))) and (ss_sold_time_sk BETWEEN DynamicValue(RS_55_time_dim_t_time_sk_min) AND DynamicValue(RS_55_time_dim_t_time_sk_max) and in_bloom_filter(ss_sold_time_sk, DynamicValue(RS_55_time_dim_t_time_sk_bloom_filter))) and (ss_store_sk BETWEEN DynamicValue(RS_88_store_s_store_sk_min) AND DynamicValue(RS_88_store_s_store_sk_max) and in_bloom_filter(ss_store_sk, DynamicValue(RS_88_store_s_store_sk_bloom_filter))) and ss_hdemo_sk is not null and ss_sold_time_sk is not null and ss_store_sk is not null)
                                                    TableScan [TS_48] (rows=575995635 width=88)
                                                      default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_time_sk","ss_hdemo_sk","ss_store_sk"]
                                                    <-Reducer 17 [BROADCAST_EDGE] vectorized
                                                      BROADCAST [RS_898]
                                                        Group By Operator [GBY_897] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                        <-Map 9 [CUSTOM_SIMPLE_EDGE] vectorized
                                                          PARTITION_ONLY_SHUFFLE [RS_805]
                                                            Group By Operator [GBY_797] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                              Select Operator [SEL_783] (rows=14400 width=471)
                                                                Output:["_col0"]
                                                                 Please refer to the previous Select Operator [SEL_773]
                                                    <-Reducer 63 [BROADCAST_EDGE] vectorized
                                                      BROADCAST [RS_900]
                                                        Group By Operator [GBY_899] (rows=1 width=16)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                        <-Reducer 61 [CUSTOM_SIMPLE_EDGE] vectorized
                                                          PARTITION_ONLY_SHUFFLE [RS_844]
                                                            Group By Operator [GBY_836] (rows=1 width=16)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                              Select Operator [SEL_822] (rows=1800 width=107)
                                                                Output:["_col0"]
                                                                 Please refer to the previous Group By Operator [GBY_818]
                                                    <-Reducer 73 [BROADCAST_EDGE] vectorized
                                                      BROADCAST [RS_902]
                                                        Group By Operator [GBY_901] (rows=1 width=16)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                        <-Reducer 71 [CUSTOM_SIMPLE_EDGE] vectorized
                                                          PARTITION_ONLY_SHUFFLE [RS_883]
                                                            Group By Operator [GBY_875] (rows=1 width=16)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                              Select Operator [SEL_861] (rows=426 width=1910)
                                                                Output:["_col0"]
                                                                 Please refer to the previous Group By Operator [GBY_857]
          <-Reducer 23 [CUSTOM_SIMPLE_EDGE]
            PARTITION_ONLY_SHUFFLE [RS_386]
              Group By Operator [GBY_142] (rows=1 width=8)
                Output:["_col0"],aggregations:["$sum0(VALUE._col0)"]
              <-Reducer 22 [CUSTOM_SIMPLE_EDGE]
                PARTITION_ONLY_SHUFFLE [RS_141]
                  Group By Operator [GBY_140] (rows=1 width=8)
                    Output:["_col0"],aggregations:["$sum0(_col4)"]
                    Select Operator [SEL_138] (rows=191662559 width=88)
                      Output:["_col4"]
                      Merge Join Operator [MERGEJOIN_752] (rows=191662559 width=88)
                        Conds:RS_135._col0=RS_862._col0(Inner),Output:["_col1","_col3"]
                      <-Reducer 71 [ONE_TO_ONE_EDGE] vectorized
                        PARTITION_ONLY_SHUFFLE [RS_862]
                          PartitionCols:_col0
                           Please refer to the previous Group By Operator [GBY_857]
                      <-Reducer 21 [ONE_TO_ONE_EDGE]
                        FORWARD [RS_135]
                          PartitionCols:_col0
                          Group By Operator [GBY_125] (rows=174238687 width=88)
                            Output:["_col0","_col1"],aggregations:["$sum0(VALUE._col0)"],keys:KEY._col0
                          <-Reducer 20 [SIMPLE_EDGE]
                            SHUFFLE [RS_124]
                              PartitionCols:_col0
                              Group By Operator [GBY_123] (rows=348477374 width=88)
                                Output:["_col0","_col1"],aggregations:["$sum0(_col5)"],keys:_col1
                                Select Operator [SEL_121] (rows=348477374 width=88)
                                  Output:["_col1","_col5"]
                                  Merge Join Operator [MERGEJOIN_751] (rows=348477374 width=88)
                                    Conds:RS_918._col0=RS_823._col0(Inner),Output:["_col1","_col2","_col4"]
                                  <-Reducer 61 [ONE_TO_ONE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_823]
                                      PartitionCols:_col0
                                       Please refer to the previous Group By Operator [GBY_818]
                                  <-Reducer 19 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_918]
                                      PartitionCols:_col0
                                      Group By Operator [GBY_917] (rows=316797606 width=88)
                                        Output:["_col0","_col1","_col2"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1
                                      <-Reducer 18 [SIMPLE_EDGE]
                                        SHUFFLE [RS_107]
                                          PartitionCols:_col0, _col1
                                          Group By Operator [GBY_106] (rows=633595212 width=88)
                                            Output:["_col0","_col1","_col2"],aggregations:["count()"],keys:_col1, _col2
                                            Merge Join Operator [MERGEJOIN_741] (rows=633595212 width=88)
                                              Conds:RS_916._col0=RS_784._col0(Inner),Output:["_col1","_col2"]
                                            <-Map 9 [SIMPLE_EDGE] vectorized
                                              PARTITION_ONLY_SHUFFLE [RS_784]
                                                PartitionCols:_col0
                                                Select Operator [SEL_774] (rows=14400 width=471)
                                                  Output:["_col0"]
                                                  Filter Operator [FIL_766] (rows=14400 width=471)
                                                    predicate:((t_hour = 11) and (t_minute >= 30) and t_time_sk is not null)
                                                     Please refer to the previous TableScan [TS_3]
                                            <-Map 81 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_916]
                                                PartitionCols:_col0
                                                Select Operator [SEL_915] (rows=575995635 width=88)
                                                  Output:["_col0","_col1","_col2"]
                                                  Filter Operator [FIL_914] (rows=575995635 width=88)
                                                    predicate:((ss_hdemo_sk BETWEEN DynamicValue(RS_119_household_demographics_hd_demo_sk_min) AND DynamicValue(RS_119_household_demographics_hd_demo_sk_max) and in_bloom_filter(ss_hdemo_sk, DynamicValue(RS_119_household_demographics_hd_demo_sk_bloom_filter))) and (ss_sold_time_sk BETWEEN DynamicValue(RS_103_time_dim_t_time_sk_min) AND DynamicValue(RS_103_time_dim_t_time_sk_max) and in_bloom_filter(ss_sold_time_sk, DynamicValue(RS_103_time_dim_t_time_sk_bloom_filter))) and (ss_store_sk BETWEEN DynamicValue(RS_136_store_s_store_sk_min) AND DynamicValue(RS_136_store_s_store_sk_max) and in_bloom_filter(ss_store_sk, DynamicValue(RS_136_store_s_store_sk_bloom_filter))) and ss_hdemo_sk is not null and ss_sold_time_sk is not null and ss_store_sk is not null)
                                                    TableScan [TS_96] (rows=575995635 width=88)
                                                      default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_time_sk","ss_hdemo_sk","ss_store_sk"]
                                                    <-Reducer 24 [BROADCAST_EDGE] vectorized
                                                      BROADCAST [RS_909]
                                                        Group By Operator [GBY_908] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                        <-Map 9 [CUSTOM_SIMPLE_EDGE] vectorized
                                                          PARTITION_ONLY_SHUFFLE [RS_806]
                                                            Group By Operator [GBY_798] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                              Select Operator [SEL_785] (rows=14400 width=471)
                                                                Output:["_col0"]
                                                                 Please refer to the previous Select Operator [SEL_774]
                                                    <-Reducer 64 [BROADCAST_EDGE] vectorized
                                                      BROADCAST [RS_911]
                                                        Group By Operator [GBY_910] (rows=1 width=16)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                        <-Reducer 61 [CUSTOM_SIMPLE_EDGE] vectorized
                                                          PARTITION_ONLY_SHUFFLE [RS_845]
                                                            Group By Operator [GBY_837] (rows=1 width=16)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                              Select Operator [SEL_824] (rows=1800 width=107)
                                                                Output:["_col0"]
                                                                 Please refer to the previous Group By Operator [GBY_818]
                                                    <-Reducer 74 [BROADCAST_EDGE] vectorized
                                                      BROADCAST [RS_913]
                                                        Group By Operator [GBY_912] (rows=1 width=16)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                        <-Reducer 71 [CUSTOM_SIMPLE_EDGE] vectorized
                                                          PARTITION_ONLY_SHUFFLE [RS_884]
                                                            Group By Operator [GBY_876] (rows=1 width=16)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                              Select Operator [SEL_863] (rows=426 width=1910)
                                                                Output:["_col0"]
                                                                 Please refer to the previous Group By Operator [GBY_857]
          <-Reducer 30 [CUSTOM_SIMPLE_EDGE]
            PARTITION_ONLY_SHUFFLE [RS_387]
              Group By Operator [GBY_190] (rows=1 width=8)
                Output:["_col0"],aggregations:["$sum0(VALUE._col0)"]
              <-Reducer 29 [CUSTOM_SIMPLE_EDGE]
                PARTITION_ONLY_SHUFFLE [RS_189]
                  Group By Operator [GBY_188] (rows=1 width=8)
                    Output:["_col0"],aggregations:["$sum0(_col4)"]
                    Select Operator [SEL_186] (rows=191662559 width=88)
                      Output:["_col4"]
                      Merge Join Operator [MERGEJOIN_754] (rows=191662559 width=88)
                        Conds:RS_183._col0=RS_864._col0(Inner),Output:["_col1","_col3"]
                      <-Reducer 71 [ONE_TO_ONE_EDGE] vectorized
                        PARTITION_ONLY_SHUFFLE [RS_864]
                          PartitionCols:_col0
                           Please refer to the previous Group By Operator [GBY_857]
                      <-Reducer 28 [ONE_TO_ONE_EDGE]
                        FORWARD [RS_183]
                          PartitionCols:_col0
                          Group By Operator [GBY_173] (rows=174238687 width=88)
                            Output:["_col0","_col1"],aggregations:["$sum0(VALUE._col0)"],keys:KEY._col0
                          <-Reducer 27 [SIMPLE_EDGE]
                            SHUFFLE [RS_172]
                              PartitionCols:_col0
                              Group By Operator [GBY_171] (rows=348477374 width=88)
                                Output:["_col0","_col1"],aggregations:["$sum0(_col5)"],keys:_col1
                                Select Operator [SEL_169] (rows=348477374 width=88)
                                  Output:["_col1","_col5"]
                                  Merge Join Operator [MERGEJOIN_753] (rows=348477374 width=88)
                                    Conds:RS_929._col0=RS_825._col0(Inner),Output:["_col1","_col2","_col4"]
                                  <-Reducer 61 [ONE_TO_ONE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_825]
                                      PartitionCols:_col0
                                       Please refer to the previous Group By Operator [GBY_818]
                                  <-Reducer 26 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_929]
                                      PartitionCols:_col0
                                      Group By Operator [GBY_928] (rows=316797606 width=88)
                                        Output:["_col0","_col1","_col2"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1
                                      <-Reducer 25 [SIMPLE_EDGE]
                                        SHUFFLE [RS_155]
                                          PartitionCols:_col0, _col1
                                          Group By Operator [GBY_154] (rows=633595212 width=88)
                                            Output:["_col0","_col1","_col2"],aggregations:["count()"],keys:_col1, _col2
                                            Merge Join Operator [MERGEJOIN_742] (rows=633595212 width=88)
                                              Conds:RS_927._col0=RS_786._col0(Inner),Output:["_col1","_col2"]
                                            <-Map 9 [SIMPLE_EDGE] vectorized
                                              PARTITION_ONLY_SHUFFLE [RS_786]
                                                PartitionCols:_col0
                                                Select Operator [SEL_775] (rows=14400 width=471)
                                                  Output:["_col0"]
                                                  Filter Operator [FIL_767] (rows=14400 width=471)
                                                    predicate:((t_hour = 11) and (t_minute < 30) and t_time_sk is not null)
                                                     Please refer to the previous TableScan [TS_3]
                                            <-Map 82 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_927]
                                                PartitionCols:_col0
                                                Select Operator [SEL_926] (rows=575995635 width=88)
                                                  Output:["_col0","_col1","_col2"]
                                                  Filter Operator [FIL_925] (rows=575995635 width=88)
                                                    predicate:((ss_hdemo_sk BETWEEN DynamicValue(RS_167_household_demographics_hd_demo_sk_min) AND DynamicValue(RS_167_household_demographics_hd_demo_sk_max) and in_bloom_filter(ss_hdemo_sk, DynamicValue(RS_167_household_demographics_hd_demo_sk_bloom_filter))) and (ss_sold_time_sk BETWEEN DynamicValue(RS_151_time_dim_t_time_sk_min) AND DynamicValue(RS_151_time_dim_t_time_sk_max) and in_bloom_filter(ss_sold_time_sk, DynamicValue(RS_151_time_dim_t_time_sk_bloom_filter))) and (ss_store_sk BETWEEN DynamicValue(RS_184_store_s_store_sk_min) AND DynamicValue(RS_184_store_s_store_sk_max) and in_bloom_filter(ss_store_sk, DynamicValue(RS_184_store_s_store_sk_bloom_filter))) and ss_hdemo_sk is not null and ss_sold_time_sk is not null and ss_store_sk is not null)
                                                    TableScan [TS_144] (rows=575995635 width=88)
                                                      default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_time_sk","ss_hdemo_sk","ss_store_sk"]
                                                    <-Reducer 31 [BROADCAST_EDGE] vectorized
                                                      BROADCAST [RS_920]
                                                        Group By Operator [GBY_919] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                        <-Map 9 [CUSTOM_SIMPLE_EDGE] vectorized
                                                          PARTITION_ONLY_SHUFFLE [RS_807]
                                                            Group By Operator [GBY_799] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                              Select Operator [SEL_787] (rows=14400 width=471)
                                                                Output:["_col0"]
                                                                 Please refer to the previous Select Operator [SEL_775]
                                                    <-Reducer 65 [BROADCAST_EDGE] vectorized
                                                      BROADCAST [RS_922]
                                                        Group By Operator [GBY_921] (rows=1 width=16)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                        <-Reducer 61 [CUSTOM_SIMPLE_EDGE] vectorized
                                                          PARTITION_ONLY_SHUFFLE [RS_846]
                                                            Group By Operator [GBY_838] (rows=1 width=16)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                              Select Operator [SEL_826] (rows=1800 width=107)
                                                                Output:["_col0"]
                                                                 Please refer to the previous Group By Operator [GBY_818]
                                                    <-Reducer 75 [BROADCAST_EDGE] vectorized
                                                      BROADCAST [RS_924]
                                                        Group By Operator [GBY_923] (rows=1 width=16)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                        <-Reducer 71 [CUSTOM_SIMPLE_EDGE] vectorized
                                                          PARTITION_ONLY_SHUFFLE [RS_885]
                                                            Group By Operator [GBY_877] (rows=1 width=16)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                              Select Operator [SEL_865] (rows=426 width=1910)
                                                                Output:["_col0"]
                                                                 Please refer to the previous Group By Operator [GBY_857]
          <-Reducer 37 [CUSTOM_SIMPLE_EDGE]
            PARTITION_ONLY_SHUFFLE [RS_388]
              Group By Operator [GBY_238] (rows=1 width=8)
                Output:["_col0"],aggregations:["$sum0(VALUE._col0)"]
              <-Reducer 36 [CUSTOM_SIMPLE_EDGE]
                PARTITION_ONLY_SHUFFLE [RS_237]
                  Group By Operator [GBY_236] (rows=1 width=8)
                    Output:["_col0"],aggregations:["$sum0(_col4)"]
                    Select Operator [SEL_234] (rows=191662559 width=88)
                      Output:["_col4"]
                      Merge Join Operator [MERGEJOIN_756] (rows=191662559 width=88)
                        Conds:RS_231._col0=RS_866._col0(Inner),Output:["_col1","_col3"]
                      <-Reducer 71 [ONE_TO_ONE_EDGE] vectorized
                        PARTITION_ONLY_SHUFFLE [RS_866]
                          PartitionCols:_col0
                           Please refer to the previous Group By Operator [GBY_857]
                      <-Reducer 35 [ONE_TO_ONE_EDGE]
                        FORWARD [RS_231]
                          PartitionCols:_col0
                          Group By Operator [GBY_221] (rows=174238687 width=88)
                            Output:["_col0","_col1"],aggregations:["$sum0(VALUE._col0)"],keys:KEY._col0
                          <-Reducer 34 [SIMPLE_EDGE]
                            SHUFFLE [RS_220]
                              PartitionCols:_col0
                              Group By Operator [GBY_219] (rows=348477374 width=88)
                                Output:["_col0","_col1"],aggregations:["$sum0(_col5)"],keys:_col1
                                Select Operator [SEL_217] (rows=348477374 width=88)
                                  Output:["_col1","_col5"]
                                  Merge Join Operator [MERGEJOIN_755] (rows=348477374 width=88)
                                    Conds:RS_940._col0=RS_827._col0(Inner),Output:["_col1","_col2","_col4"]
                                  <-Reducer 61 [ONE_TO_ONE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_827]
                                      PartitionCols:_col0
                                       Please refer to the previous Group By Operator [GBY_818]
                                  <-Reducer 33 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_940]
                                      PartitionCols:_col0
                                      Group By Operator [GBY_939] (rows=316797606 width=88)
                                        Output:["_col0","_col1","_col2"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1
                                      <-Reducer 32 [SIMPLE_EDGE]
                                        SHUFFLE [RS_203]
                                          PartitionCols:_col0, _col1
                                          Group By Operator [GBY_202] (rows=633595212 width=88)
                                            Output:["_col0","_col1","_col2"],aggregations:["count()"],keys:_col1, _col2
                                            Merge Join Operator [MERGEJOIN_743] (rows=633595212 width=88)
                                              Conds:RS_938._col0=RS_788._col0(Inner),Output:["_col1","_col2"]
                                            <-Map 9 [SIMPLE_EDGE] vectorized
                                              PARTITION_ONLY_SHUFFLE [RS_788]
                                                PartitionCols:_col0
                                                Select Operator [SEL_776] (rows=14400 width=471)
                                                  Output:["_col0"]
                                                  Filter Operator [FIL_768] (rows=14400 width=471)
                                                    predicate:((t_hour = 10) and (t_minute >= 30) and t_time_sk is not null)
                                                     Please refer to the previous TableScan [TS_3]
                                            <-Map 83 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_938]
                                                PartitionCols:_col0
                                                Select Operator [SEL_937] (rows=575995635 width=88)
                                                  Output:["_col0","_col1","_col2"]
                                                  Filter Operator [FIL_936] (rows=575995635 width=88)
                                                    predicate:((ss_hdemo_sk BETWEEN DynamicValue(RS_215_household_demographics_hd_demo_sk_min) AND DynamicValue(RS_215_household_demographics_hd_demo_sk_max) and in_bloom_filter(ss_hdemo_sk, DynamicValue(RS_215_household_demographics_hd_demo_sk_bloom_filter))) and (ss_sold_time_sk BETWEEN DynamicValue(RS_199_time_dim_t_time_sk_min) AND DynamicValue(RS_199_time_dim_t_time_sk_max) and in_bloom_filter(ss_sold_time_sk, DynamicValue(RS_199_time_dim_t_time_sk_bloom_filter))) and (ss_store_sk BETWEEN DynamicValue(RS_232_store_s_store_sk_min) AND DynamicValue(RS_232_store_s_store_sk_max) and in_bloom_filter(ss_store_sk, DynamicValue(RS_232_store_s_store_sk_bloom_filter))) and ss_hdemo_sk is not null and ss_sold_time_sk is not null and ss_store_sk is not null)
                                                    TableScan [TS_192] (rows=575995635 width=88)
                                                      default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_time_sk","ss_hdemo_sk","ss_store_sk"]
                                                    <-Reducer 38 [BROADCAST_EDGE] vectorized
                                                      BROADCAST [RS_931]
                                                        Group By Operator [GBY_930] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                        <-Map 9 [CUSTOM_SIMPLE_EDGE] vectorized
                                                          PARTITION_ONLY_SHUFFLE [RS_808]
                                                            Group By Operator [GBY_800] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                              Select Operator [SEL_789] (rows=14400 width=471)
                                                                Output:["_col0"]
                                                                 Please refer to the previous Select Operator [SEL_776]
                                                    <-Reducer 66 [BROADCAST_EDGE] vectorized
                                                      BROADCAST [RS_933]
                                                        Group By Operator [GBY_932] (rows=1 width=16)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                        <-Reducer 61 [CUSTOM_SIMPLE_EDGE] vectorized
                                                          PARTITION_ONLY_SHUFFLE [RS_847]
                                                            Group By Operator [GBY_839] (rows=1 width=16)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                              Select Operator [SEL_828] (rows=1800 width=107)
                                                                Output:["_col0"]
                                                                 Please refer to the previous Group By Operator [GBY_818]
                                                    <-Reducer 76 [BROADCAST_EDGE] vectorized
                                                      BROADCAST [RS_935]
                                                        Group By Operator [GBY_934] (rows=1 width=16)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                        <-Reducer 71 [CUSTOM_SIMPLE_EDGE] vectorized
                                                          PARTITION_ONLY_SHUFFLE [RS_886]
                                                            Group By Operator [GBY_878] (rows=1 width=16)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                              Select Operator [SEL_867] (rows=426 width=1910)
                                                                Output:["_col0"]
                                                                 Please refer to the previous Group By Operator [GBY_857]
          <-Reducer 44 [CUSTOM_SIMPLE_EDGE]
            PARTITION_ONLY_SHUFFLE [RS_389]
              Group By Operator [GBY_286] (rows=1 width=8)
                Output:["_col0"],aggregations:["$sum0(VALUE._col0)"]
              <-Reducer 43 [CUSTOM_SIMPLE_EDGE]
                PARTITION_ONLY_SHUFFLE [RS_285]
                  Group By Operator [GBY_284] (rows=1 width=8)
                    Output:["_col0"],aggregations:["$sum0(_col4)"]
                    Select Operator [SEL_282] (rows=191662559 width=88)
                      Output:["_col4"]
                      Merge Join Operator [MERGEJOIN_758] (rows=191662559 width=88)
                        Conds:RS_279._col0=RS_868._col0(Inner),Output:["_col1","_col3"]
                      <-Reducer 71 [ONE_TO_ONE_EDGE] vectorized
                        PARTITION_ONLY_SHUFFLE [RS_868]
                          PartitionCols:_col0
                           Please refer to the previous Group By Operator [GBY_857]
                      <-Reducer 42 [ONE_TO_ONE_EDGE]
                        FORWARD [RS_279]
                          PartitionCols:_col0
                          Group By Operator [GBY_269] (rows=174238687 width=88)
                            Output:["_col0","_col1"],aggregations:["$sum0(VALUE._col0)"],keys:KEY._col0
                          <-Reducer 41 [SIMPLE_EDGE]
                            SHUFFLE [RS_268]
                              PartitionCols:_col0
                              Group By Operator [GBY_267] (rows=348477374 width=88)
                                Output:["_col0","_col1"],aggregations:["$sum0(_col5)"],keys:_col1
                                Select Operator [SEL_265] (rows=348477374 width=88)
                                  Output:["_col1","_col5"]
                                  Merge Join Operator [MERGEJOIN_757] (rows=348477374 width=88)
                                    Conds:RS_951._col0=RS_829._col0(Inner),Output:["_col1","_col2","_col4"]
                                  <-Reducer 61 [ONE_TO_ONE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_829]
                                      PartitionCols:_col0
                                       Please refer to the previous Group By Operator [GBY_818]
                                  <-Reducer 40 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_951]
                                      PartitionCols:_col0
                                      Group By Operator [GBY_950] (rows=316797606 width=88)
                                        Output:["_col0","_col1","_col2"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1
                                      <-Reducer 39 [SIMPLE_EDGE]
                                        SHUFFLE [RS_251]
                                          PartitionCols:_col0, _col1
                                          Group By Operator [GBY_250] (rows=633595212 width=88)
                                            Output:["_col0","_col1","_col2"],aggregations:["count()"],keys:_col1, _col2
                                            Merge Join Operator [MERGEJOIN_744] (rows=633595212 width=88)
                                              Conds:RS_949._col0=RS_790._col0(Inner),Output:["_col1","_col2"]
                                            <-Map 9 [SIMPLE_EDGE] vectorized
                                              PARTITION_ONLY_SHUFFLE [RS_790]
                                                PartitionCols:_col0
                                                Select Operator [SEL_777] (rows=14400 width=471)
                                                  Output:["_col0"]
                                                  Filter Operator [FIL_769] (rows=14400 width=471)
                                                    predicate:((t_hour = 10) and (t_minute < 30) and t_time_sk is not null)
                                                     Please refer to the previous TableScan [TS_3]
                                            <-Map 84 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_949]
                                                PartitionCols:_col0
                                                Select Operator [SEL_948] (rows=575995635 width=88)
                                                  Output:["_col0","_col1","_col2"]
                                                  Filter Operator [FIL_947] (rows=575995635 width=88)
                                                    predicate:((ss_hdemo_sk BETWEEN DynamicValue(RS_263_household_demographics_hd_demo_sk_min) AND DynamicValue(RS_263_household_demographics_hd_demo_sk_max) and in_bloom_filter(ss_hdemo_sk, DynamicValue(RS_263_household_demographics_hd_demo_sk_bloom_filter))) and (ss_sold_time_sk BETWEEN DynamicValue(RS_247_time_dim_t_time_sk_min) AND DynamicValue(RS_247_time_dim_t_time_sk_max) and in_bloom_filter(ss_sold_time_sk, DynamicValue(RS_247_time_dim_t_time_sk_bloom_filter))) and (ss_store_sk BETWEEN DynamicValue(RS_280_store_s_store_sk_min) AND DynamicValue(RS_280_store_s_store_sk_max) and in_bloom_filter(ss_store_sk, DynamicValue(RS_280_store_s_store_sk_bloom_filter))) and ss_hdemo_sk is not null and ss_sold_time_sk is not null and ss_store_sk is not null)
                                                    TableScan [TS_240] (rows=575995635 width=88)
                                                      default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_time_sk","ss_hdemo_sk","ss_store_sk"]
                                                    <-Reducer 45 [BROADCAST_EDGE] vectorized
                                                      BROADCAST [RS_942]
                                                        Group By Operator [GBY_941] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                        <-Map 9 [CUSTOM_SIMPLE_EDGE] vectorized
                                                          PARTITION_ONLY_SHUFFLE [RS_809]
                                                            Group By Operator [GBY_801] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                              Select Operator [SEL_791] (rows=14400 width=471)
                                                                Output:["_col0"]
                                                                 Please refer to the previous Select Operator [SEL_777]
                                                    <-Reducer 67 [BROADCAST_EDGE] vectorized
                                                      BROADCAST [RS_944]
                                                        Group By Operator [GBY_943] (rows=1 width=16)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                        <-Reducer 61 [CUSTOM_SIMPLE_EDGE] vectorized
                                                          PARTITION_ONLY_SHUFFLE [RS_848]
                                                            Group By Operator [GBY_840] (rows=1 width=16)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                              Select Operator [SEL_830] (rows=1800 width=107)
                                                                Output:["_col0"]
                                                                 Please refer to the previous Group By Operator [GBY_818]
                                                    <-Reducer 77 [BROADCAST_EDGE] vectorized
                                                      BROADCAST [RS_946]
                                                        Group By Operator [GBY_945] (rows=1 width=16)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                        <-Reducer 71 [CUSTOM_SIMPLE_EDGE] vectorized
                                                          PARTITION_ONLY_SHUFFLE [RS_887]
                                                            Group By Operator [GBY_879] (rows=1 width=16)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                              Select Operator [SEL_869] (rows=426 width=1910)
                                                                Output:["_col0"]
                                                                 Please refer to the previous Group By Operator [GBY_857]
          <-Reducer 51 [CUSTOM_SIMPLE_EDGE]
            PARTITION_ONLY_SHUFFLE [RS_390]
              Group By Operator [GBY_334] (rows=1 width=8)
                Output:["_col0"],aggregations:["$sum0(VALUE._col0)"]
              <-Reducer 50 [CUSTOM_SIMPLE_EDGE]
                PARTITION_ONLY_SHUFFLE [RS_333]
                  Group By Operator [GBY_332] (rows=1 width=8)
                    Output:["_col0"],aggregations:["$sum0(_col4)"]
                    Select Operator [SEL_330] (rows=191662559 width=88)
                      Output:["_col4"]
                      Merge Join Operator [MERGEJOIN_760] (rows=191662559 width=88)
                        Conds:RS_327._col0=RS_870._col0(Inner),Output:["_col1","_col3"]
                      <-Reducer 71 [ONE_TO_ONE_EDGE] vectorized
                        PARTITION_ONLY_SHUFFLE [RS_870]
                          PartitionCols:_col0
                           Please refer to the previous Group By Operator [GBY_857]
                      <-Reducer 49 [ONE_TO_ONE_EDGE]
                        FORWARD [RS_327]
                          PartitionCols:_col0
                          Group By Operator [GBY_317] (rows=174238687 width=88)
                            Output:["_col0","_col1"],aggregations:["$sum0(VALUE._col0)"],keys:KEY._col0
                          <-Reducer 48 [SIMPLE_EDGE]
                            SHUFFLE [RS_316]
                              PartitionCols:_col0
                              Group By Operator [GBY_315] (rows=348477374 width=88)
                                Output:["_col0","_col1"],aggregations:["$sum0(_col5)"],keys:_col1
                                Select Operator [SEL_313] (rows=348477374 width=88)
                                  Output:["_col1","_col5"]
                                  Merge Join Operator [MERGEJOIN_759] (rows=348477374 width=88)
                                    Conds:RS_962._col0=RS_831._col0(Inner),Output:["_col1","_col2","_col4"]
                                  <-Reducer 61 [ONE_TO_ONE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_831]
                                      PartitionCols:_col0
                                       Please refer to the previous Group By Operator [GBY_818]
                                  <-Reducer 47 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_962]
                                      PartitionCols:_col0
                                      Group By Operator [GBY_961] (rows=316797606 width=88)
                                        Output:["_col0","_col1","_col2"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1
                                      <-Reducer 46 [SIMPLE_EDGE]
                                        SHUFFLE [RS_299]
                                          PartitionCols:_col0, _col1
                                          Group By Operator [GBY_298] (rows=633595212 width=88)
                                            Output:["_col0","_col1","_col2"],aggregations:["count()"],keys:_col1, _col2
                                            Merge Join Operator [MERGEJOIN_745] (rows=633595212 width=88)
                                              Conds:RS_960._col0=RS_792._col0(Inner),Output:["_col1","_col2"]
                                            <-Map 9 [SIMPLE_EDGE] vectorized
                                              PARTITION_ONLY_SHUFFLE [RS_792]
                                                PartitionCols:_col0
                                                Select Operator [SEL_778] (rows=14400 width=471)
                                                  Output:["_col0"]
                                                  Filter Operator [FIL_770] (rows=14400 width=471)
                                                    predicate:((t_hour = 9) and (t_minute >= 30) and t_time_sk is not null)
                                                     Please refer to the previous TableScan [TS_3]
                                            <-Map 85 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_960]
                                                PartitionCols:_col0
                                                Select Operator [SEL_959] (rows=575995635 width=88)
                                                  Output:["_col0","_col1","_col2"]
                                                  Filter Operator [FIL_958] (rows=575995635 width=88)
                                                    predicate:((ss_hdemo_sk BETWEEN DynamicValue(RS_311_household_demographics_hd_demo_sk_min) AND DynamicValue(RS_311_household_demographics_hd_demo_sk_max) and in_bloom_filter(ss_hdemo_sk, DynamicValue(RS_311_household_demographics_hd_demo_sk_bloom_filter))) and (ss_sold_time_sk BETWEEN DynamicValue(RS_295_time_dim_t_time_sk_min) AND DynamicValue(RS_295_time_dim_t_time_sk_max) and in_bloom_filter(ss_sold_time_sk, DynamicValue(RS_295_time_dim_t_time_sk_bloom_filter))) and (ss_store_sk BETWEEN DynamicValue(RS_328_store_s_store_sk_min) AND DynamicValue(RS_328_store_s_store_sk_max) and in_bloom_filter(ss_store_sk, DynamicValue(RS_328_store_s_store_sk_bloom_filter))) and ss_hdemo_sk is not null and ss_sold_time_sk is not null and ss_store_sk is not null)
                                                    TableScan [TS_288] (rows=575995635 width=88)
                                                      default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_time_sk","ss_hdemo_sk","ss_store_sk"]
                                                    <-Reducer 52 [BROADCAST_EDGE] vectorized
                                                      BROADCAST [RS_953]
                                                        Group By Operator [GBY_952] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                        <-Map 9 [CUSTOM_SIMPLE_EDGE] vectorized
                                                          PARTITION_ONLY_SHUFFLE [RS_810]
                                                            Group By Operator [GBY_802] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                              Select Operator [SEL_793] (rows=14400 width=471)
                                                                Output:["_col0"]
                                                                 Please refer to the previous Select Operator [SEL_778]
                                                    <-Reducer 68 [BROADCAST_EDGE] vectorized
                                                      BROADCAST [RS_955]
                                                        Group By Operator [GBY_954] (rows=1 width=16)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                        <-Reducer 61 [CUSTOM_SIMPLE_EDGE] vectorized
                                                          PARTITION_ONLY_SHUFFLE [RS_849]
                                                            Group By Operator [GBY_841] (rows=1 width=16)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                              Select Operator [SEL_832] (rows=1800 width=107)
                                                                Output:["_col0"]
                                                                 Please refer to the previous Group By Operator [GBY_818]
                                                    <-Reducer 78 [BROADCAST_EDGE] vectorized
                                                      BROADCAST [RS_957]
                                                        Group By Operator [GBY_956] (rows=1 width=16)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                        <-Reducer 71 [CUSTOM_SIMPLE_EDGE] vectorized
                                                          PARTITION_ONLY_SHUFFLE [RS_888]
                                                            Group By Operator [GBY_880] (rows=1 width=16)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                              Select Operator [SEL_871] (rows=426 width=1910)
                                                                Output:["_col0"]
                                                                 Please refer to the previous Group By Operator [GBY_857]
          <-Reducer 58 [CUSTOM_SIMPLE_EDGE]
            PARTITION_ONLY_SHUFFLE [RS_391]
              Group By Operator [GBY_382] (rows=1 width=8)
                Output:["_col0"],aggregations:["$sum0(VALUE._col0)"]
              <-Reducer 57 [CUSTOM_SIMPLE_EDGE]
                PARTITION_ONLY_SHUFFLE [RS_381]
                  Group By Operator [GBY_380] (rows=1 width=8)
                    Output:["_col0"],aggregations:["$sum0(_col4)"]
                    Select Operator [SEL_378] (rows=191662559 width=88)
                      Output:["_col4"]
                      Merge Join Operator [MERGEJOIN_762] (rows=191662559 width=88)
                        Conds:RS_375._col0=RS_872._col0(Inner),Output:["_col1","_col3"]
                      <-Reducer 71 [ONE_TO_ONE_EDGE] vectorized
                        PARTITION_ONLY_SHUFFLE [RS_872]
                          PartitionCols:_col0
                           Please refer to the previous Group By Operator [GBY_857]
                      <-Reducer 56 [ONE_TO_ONE_EDGE]
                        FORWARD [RS_375]
                          PartitionCols:_col0
                          Group By Operator [GBY_365] (rows=174238687 width=88)
                            Output:["_col0","_col1"],aggregations:["$sum0(VALUE._col0)"],keys:KEY._col0
                          <-Reducer 55 [SIMPLE_EDGE]
                            SHUFFLE [RS_364]
                              PartitionCols:_col0
                              Group By Operator [GBY_363] (rows=348477374 width=88)
                                Output:["_col0","_col1"],aggregations:["$sum0(_col5)"],keys:_col1
                                Select Operator [SEL_361] (rows=348477374 width=88)
                                  Output:["_col1","_col5"]
                                  Merge Join Operator [MERGEJOIN_761] (rows=348477374 width=88)
                                    Conds:RS_973._col0=RS_833._col0(Inner),Output:["_col1","_col2","_col4"]
                                  <-Reducer 61 [ONE_TO_ONE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_833]
                                      PartitionCols:_col0
                                       Please refer to the previous Group By Operator [GBY_818]
                                  <-Reducer 54 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_973]
                                      PartitionCols:_col0
                                      Group By Operator [GBY_972] (rows=316797606 width=88)
                                        Output:["_col0","_col1","_col2"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1
                                      <-Reducer 53 [SIMPLE_EDGE]
                                        SHUFFLE [RS_347]
                                          PartitionCols:_col0, _col1
                                          Group By Operator [GBY_346] (rows=633595212 width=88)
                                            Output:["_col0","_col1","_col2"],aggregations:["count()"],keys:_col1, _col2
                                            Merge Join Operator [MERGEJOIN_746] (rows=633595212 width=88)
                                              Conds:RS_971._col0=RS_794._col0(Inner),Output:["_col1","_col2"]
                                            <-Map 9 [SIMPLE_EDGE] vectorized
                                              PARTITION_ONLY_SHUFFLE [RS_794]
                                                PartitionCols:_col0
                                                Select Operator [SEL_779] (rows=14400 width=471)
                                                  Output:["_col0"]
                                                  Filter Operator [FIL_771] (rows=14400 width=471)
                                                    predicate:((t_hour = 9) and (t_minute < 30) and t_time_sk is not null)
                                                     Please refer to the previous TableScan [TS_3]
                                            <-Map 86 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_971]
                                                PartitionCols:_col0
                                                Select Operator [SEL_970] (rows=575995635 width=88)
                                                  Output:["_col0","_col1","_col2"]
                                                  Filter Operator [FIL_969] (rows=575995635 width=88)
                                                    predicate:((ss_hdemo_sk BETWEEN DynamicValue(RS_359_household_demographics_hd_demo_sk_min) AND DynamicValue(RS_359_household_demographics_hd_demo_sk_max) and in_bloom_filter(ss_hdemo_sk, DynamicValue(RS_359_household_demographics_hd_demo_sk_bloom_filter))) and (ss_sold_time_sk BETWEEN DynamicValue(RS_343_time_dim_t_time_sk_min) AND DynamicValue(RS_343_time_dim_t_time_sk_max) and in_bloom_filter(ss_sold_time_sk, DynamicValue(RS_343_time_dim_t_time_sk_bloom_filter))) and (ss_store_sk BETWEEN DynamicValue(RS_376_store_s_store_sk_min) AND DynamicValue(RS_376_store_s_store_sk_max) and in_bloom_filter(ss_store_sk, DynamicValue(RS_376_store_s_store_sk_bloom_filter))) and ss_hdemo_sk is not null and ss_sold_time_sk is not null and ss_store_sk is not null)
                                                    TableScan [TS_336] (rows=575995635 width=88)
                                                      default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_time_sk","ss_hdemo_sk","ss_store_sk"]
                                                    <-Reducer 59 [BROADCAST_EDGE] vectorized
                                                      BROADCAST [RS_964]
                                                        Group By Operator [GBY_963] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                        <-Map 9 [CUSTOM_SIMPLE_EDGE] vectorized
                                                          PARTITION_ONLY_SHUFFLE [RS_811]
                                                            Group By Operator [GBY_803] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                              Select Operator [SEL_795] (rows=14400 width=471)
                                                                Output:["_col0"]
                                                                 Please refer to the previous Select Operator [SEL_779]
                                                    <-Reducer 69 [BROADCAST_EDGE] vectorized
                                                      BROADCAST [RS_966]
                                                        Group By Operator [GBY_965] (rows=1 width=16)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                        <-Reducer 61 [CUSTOM_SIMPLE_EDGE] vectorized
                                                          PARTITION_ONLY_SHUFFLE [RS_850]
                                                            Group By Operator [GBY_842] (rows=1 width=16)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                              Select Operator [SEL_834] (rows=1800 width=107)
                                                                Output:["_col0"]
                                                                 Please refer to the previous Group By Operator [GBY_818]
                                                    <-Reducer 79 [BROADCAST_EDGE] vectorized
                                                      BROADCAST [RS_968]
                                                        Group By Operator [GBY_967] (rows=1 width=16)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                        <-Reducer 71 [CUSTOM_SIMPLE_EDGE] vectorized
                                                          PARTITION_ONLY_SHUFFLE [RS_889]
                                                            Group By Operator [GBY_881] (rows=1 width=16)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                              Select Operator [SEL_873] (rows=426 width=1910)
                                                                Output:["_col0"]
                                                                 Please refer to the previous Group By Operator [GBY_857]
          <-Reducer 7 [CUSTOM_SIMPLE_EDGE]
            PARTITION_ONLY_SHUFFLE [RS_384]
              Group By Operator [GBY_46] (rows=1 width=8)
                Output:["_col0"],aggregations:["$sum0(VALUE._col0)"]
              <-Reducer 6 [CUSTOM_SIMPLE_EDGE]
                PARTITION_ONLY_SHUFFLE [RS_45]
                  Group By Operator [GBY_44] (rows=1 width=8)
                    Output:["_col0"],aggregations:["$sum0(_col4)"]
                    Select Operator [SEL_42] (rows=191662559 width=88)
                      Output:["_col4"]
                      Merge Join Operator [MERGEJOIN_748] (rows=191662559 width=88)
                        Conds:RS_39._col0=RS_858._col0(Inner),Output:["_col1","_col3"]
                      <-Reducer 71 [ONE_TO_ONE_EDGE] vectorized
                        PARTITION_ONLY_SHUFFLE [RS_858]
                          PartitionCols:_col0
                           Please refer to the previous Group By Operator [GBY_857]
                      <-Reducer 5 [ONE_TO_ONE_EDGE]
                        FORWARD [RS_39]
                          PartitionCols:_col0
                          Group By Operator [GBY_29] (rows=174238687 width=88)
                            Output:["_col0","_col1"],aggregations:["$sum0(VALUE._col0)"],keys:KEY._col0
                          <-Reducer 4 [SIMPLE_EDGE]
                            SHUFFLE [RS_28]
                              PartitionCols:_col0
                              Group By Operator [GBY_27] (rows=348477374 width=88)
                                Output:["_col0","_col1"],aggregations:["$sum0(_col5)"],keys:_col1
                                Select Operator [SEL_25] (rows=348477374 width=88)
                                  Output:["_col1","_col5"]
                                  Merge Join Operator [MERGEJOIN_747] (rows=348477374 width=88)
                                    Conds:RS_896._col0=RS_819._col0(Inner),Output:["_col1","_col2","_col4"]
                                  <-Reducer 61 [ONE_TO_ONE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_819]
                                      PartitionCols:_col0
                                       Please refer to the previous Group By Operator [GBY_818]
                                  <-Reducer 3 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_896]
                                      PartitionCols:_col0
                                      Group By Operator [GBY_895] (rows=316797606 width=88)
                                        Output:["_col0","_col1","_col2"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1
                                      <-Reducer 2 [SIMPLE_EDGE]
                                        SHUFFLE [RS_11]
                                          PartitionCols:_col0, _col1
                                          Group By Operator [GBY_10] (rows=633595212 width=88)
                                            Output:["_col0","_col1","_col2"],aggregations:["count()"],keys:_col1, _col2
                                            Merge Join Operator [MERGEJOIN_739] (rows=633595212 width=88)
                                              Conds:RS_894._col0=RS_780._col0(Inner),Output:["_col1","_col2"]
                                            <-Map 9 [SIMPLE_EDGE] vectorized
                                              PARTITION_ONLY_SHUFFLE [RS_780]
                                                PartitionCols:_col0
                                                Select Operator [SEL_772] (rows=14400 width=471)
                                                  Output:["_col0"]
                                                  Filter Operator [FIL_764] (rows=14400 width=471)
                                                    predicate:((t_hour = 8) and (t_minute >= 30) and t_time_sk is not null)
                                                     Please refer to the previous TableScan [TS_3]
                                            <-Map 1 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_894]
                                                PartitionCols:_col0
                                                Select Operator [SEL_893] (rows=575995635 width=88)
                                                  Output:["_col0","_col1","_col2"]
                                                  Filter Operator [FIL_892] (rows=575995635 width=88)
                                                    predicate:((ss_hdemo_sk BETWEEN DynamicValue(RS_23_household_demographics_hd_demo_sk_min) AND DynamicValue(RS_23_household_demographics_hd_demo_sk_max) and in_bloom_filter(ss_hdemo_sk, DynamicValue(RS_23_household_demographics_hd_demo_sk_bloom_filter))) and (ss_sold_time_sk BETWEEN DynamicValue(RS_7_time_dim_t_time_sk_min) AND DynamicValue(RS_7_time_dim_t_time_sk_max) and in_bloom_filter(ss_sold_time_sk, DynamicValue(RS_7_time_dim_t_time_sk_bloom_filter))) and (ss_store_sk BETWEEN DynamicValue(RS_40_store_s_store_sk_min) AND DynamicValue(RS_40_store_s_store_sk_max) and in_bloom_filter(ss_store_sk, DynamicValue(RS_40_store_s_store_sk_bloom_filter))) and ss_hdemo_sk is not null and ss_sold_time_sk is not null and ss_store_sk is not null)
                                                    TableScan [TS_0] (rows=575995635 width=88)
                                                      default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_time_sk","ss_hdemo_sk","ss_store_sk"]
                                                    <-Reducer 10 [BROADCAST_EDGE] vectorized
                                                      BROADCAST [RS_813]
                                                        Group By Operator [GBY_812] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                        <-Map 9 [CUSTOM_SIMPLE_EDGE] vectorized
                                                          PARTITION_ONLY_SHUFFLE [RS_804]
                                                            Group By Operator [GBY_796] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                              Select Operator [SEL_781] (rows=14400 width=471)
                                                                Output:["_col0"]
                                                                 Please refer to the previous Select Operator [SEL_772]
                                                    <-Reducer 62 [BROADCAST_EDGE] vectorized
                                                      BROADCAST [RS_852]
                                                        Group By Operator [GBY_851] (rows=1 width=16)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                        <-Reducer 61 [CUSTOM_SIMPLE_EDGE] vectorized
                                                          PARTITION_ONLY_SHUFFLE [RS_843]
                                                            Group By Operator [GBY_835] (rows=1 width=16)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                              Select Operator [SEL_820] (rows=1800 width=107)
                                                                Output:["_col0"]
                                                                 Please refer to the previous Group By Operator [GBY_818]
                                                    <-Reducer 72 [BROADCAST_EDGE] vectorized
                                                      BROADCAST [RS_891]
                                                        Group By Operator [GBY_890] (rows=1 width=16)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                        <-Reducer 71 [CUSTOM_SIMPLE_EDGE] vectorized
                                                          PARTITION_ONLY_SHUFFLE [RS_882]
                                                            Group By Operator [GBY_874] (rows=1 width=16)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                              Select Operator [SEL_859] (rows=426 width=1910)
                                                                Output:["_col0"]
                                                                 Please refer to the previous Group By Operator [GBY_857]

