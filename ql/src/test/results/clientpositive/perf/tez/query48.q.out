PREHOOK: query: explain
select sum (ss_quantity)
 from store_sales, store, customer_demographics, customer_address, date_dim
 where s_store_sk = ss_store_sk
 and  ss_sold_date_sk = d_date_sk and d_year = 1998
 and  
 (
  (
   cd_demo_sk = ss_cdemo_sk
   and 
   cd_marital_status = 'M'
   and 
   cd_education_status = '4 yr Degree'
   and 
   ss_sales_price between 100.00 and 150.00  
   )
 or
  (
  cd_demo_sk = ss_cdemo_sk
   and 
   cd_marital_status = 'M'
   and 
   cd_education_status = '4 yr Degree'
   and 
   ss_sales_price between 50.00 and 100.00   
  )
 or 
 (
  cd_demo_sk = ss_cdemo_sk
  and 
   cd_marital_status = 'M'
   and 
   cd_education_status = '4 yr Degree'
   and 
   ss_sales_price between 150.00 and 200.00  
 )
 )
 and
 (
  (
  ss_addr_sk = ca_address_sk
  and
  ca_country = 'United States'
  and
  ca_state in ('KY', 'GA', 'NM')
  and ss_net_profit between 0 and 2000  
  )
 or
  (ss_addr_sk = ca_address_sk
  and
  ca_country = 'United States'
  and
  ca_state in ('MT', 'OR', 'IN')
  and ss_net_profit between 150 and 3000 
  )
 or
  (ss_addr_sk = ca_address_sk
  and
  ca_country = 'United States'
  and
  ca_state in ('WI', 'MO', 'WV')
  and ss_net_profit between 50 and 25000 
  )
 )
PREHOOK: type: QUERY
POSTHOOK: query: explain
select sum (ss_quantity)
 from store_sales, store, customer_demographics, customer_address, date_dim
 where s_store_sk = ss_store_sk
 and  ss_sold_date_sk = d_date_sk and d_year = 1998
 and  
 (
  (
   cd_demo_sk = ss_cdemo_sk
   and 
   cd_marital_status = 'M'
   and 
   cd_education_status = '4 yr Degree'
   and 
   ss_sales_price between 100.00 and 150.00  
   )
 or
  (
  cd_demo_sk = ss_cdemo_sk
   and 
   cd_marital_status = 'M'
   and 
   cd_education_status = '4 yr Degree'
   and 
   ss_sales_price between 50.00 and 100.00   
  )
 or 
 (
  cd_demo_sk = ss_cdemo_sk
  and 
   cd_marital_status = 'M'
   and 
   cd_education_status = '4 yr Degree'
   and 
   ss_sales_price between 150.00 and 200.00  
 )
 )
 and
 (
  (
  ss_addr_sk = ca_address_sk
  and
  ca_country = 'United States'
  and
  ca_state in ('KY', 'GA', 'NM')
  and ss_net_profit between 0 and 2000  
  )
 or
  (ss_addr_sk = ca_address_sk
  and
  ca_country = 'United States'
  and
  ca_state in ('MT', 'OR', 'IN')
  and ss_net_profit between 150 and 3000 
  )
 or
  (ss_addr_sk = ca_address_sk
  and
  ca_country = 'United States'
  and
  ca_state in ('WI', 'MO', 'WV')
  and ss_net_profit between 50 and 25000 
  )
 )
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Map 6 <- Reducer 12 (BROADCAST_EDGE), Reducer 14 (BROADCAST_EDGE), Reducer 16 (BROADCAST_EDGE), Reducer 5 (BROADCAST_EDGE)
Reducer 10 <- Reducer 9 (SIMPLE_EDGE)
Reducer 12 <- Map 11 (CUSTOM_SIMPLE_EDGE)
Reducer 14 <- Map 13 (CUSTOM_SIMPLE_EDGE)
Reducer 16 <- Map 15 (CUSTOM_SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE)
Reducer 3 <- Reducer 10 (ONE_TO_ONE_EDGE), Reducer 2 (ONE_TO_ONE_EDGE)
Reducer 4 <- Reducer 3 (CUSTOM_SIMPLE_EDGE)
Reducer 5 <- Reducer 2 (CUSTOM_SIMPLE_EDGE)
Reducer 7 <- Map 11 (SIMPLE_EDGE), Map 6 (SIMPLE_EDGE)
Reducer 8 <- Map 13 (SIMPLE_EDGE), Reducer 7 (SIMPLE_EDGE)
Reducer 9 <- Map 15 (SIMPLE_EDGE), Reducer 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 4 vectorized
      File Output Operator [FS_149]
        Group By Operator [GBY_148] (rows=1 width=8)
          Output:["_col0"],aggregations:["sum(VALUE._col0)"]
        <-Reducer 3 [CUSTOM_SIMPLE_EDGE]
          PARTITION_ONLY_SHUFFLE [RS_41]
            Group By Operator [GBY_40] (rows=1 width=8)
              Output:["_col0"],aggregations:["sum(_col4)"]
              Select Operator [SEL_38] (rows=46850847 width=88)
                Output:["_col4"]
                Merge Join Operator [MERGEJOIN_107] (rows=46850847 width=88)
                  Conds:RS_113._col0=RS_147._col0(Inner),Output:["_col1","_col3"]
                <-Reducer 2 [ONE_TO_ONE_EDGE] vectorized
                  PARTITION_ONLY_SHUFFLE [RS_113]
                    PartitionCols:_col0
                    Group By Operator [GBY_112] (rows=852 width=1910)
                      Output:["_col0","_col1"],aggregations:["count(VALUE._col0)"],keys:KEY._col0
                    <-Map 1 [SIMPLE_EDGE] vectorized
                      SHUFFLE [RS_111]
                        PartitionCols:_col0
                        Group By Operator [GBY_110] (rows=1704 width=1910)
                          Output:["_col0","_col1"],aggregations:["count()"],keys:_col0
                          Select Operator [SEL_109] (rows=1704 width=1910)
                            Output:["_col0"]
                            Filter Operator [FIL_108] (rows=1704 width=1910)
                              predicate:s_store_sk is not null
                              TableScan [TS_0] (rows=1704 width=1910)
                                default@store,store,Tbl:COMPLETE,Col:NONE,Output:["s_store_sk"]
                <-Reducer 10 [ONE_TO_ONE_EDGE] vectorized
                  FORWARD [RS_147]
                    PartitionCols:_col0
                    Group By Operator [GBY_146] (rows=42591679 width=88)
                      Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                    <-Reducer 9 [SIMPLE_EDGE]
                      SHUFFLE [RS_32]
                        PartitionCols:_col0
                        Group By Operator [GBY_31] (rows=85183359 width=88)
                          Output:["_col0","_col1"],aggregations:["sum(_col4)"],keys:_col3
                          Select Operator [SEL_30] (rows=85183359 width=88)
                            Output:["_col3","_col4"]
                            Filter Operator [FIL_29] (rows=85183359 width=88)
                              predicate:((((_col13 = 'KY') or (_col13 = 'GA') or (_col13 = 'NM')) and _col6 BETWEEN 0 AND 2000) or (((_col13 = 'MT') or (_col13 = 'OR') or (_col13 = 'IN')) and _col6 BETWEEN 150 AND 3000) or (((_col13 = 'WI') or (_col13 = 'MO') or (_col13 = 'WV')) and _col6 BETWEEN 50 AND 25000))
                              Merge Join Operator [MERGEJOIN_106] (rows=255550079 width=88)
                                Conds:RS_26._col2=RS_135._col0(Inner),Output:["_col3","_col4","_col6","_col13"]
                              <-Map 15 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_135]
                                  PartitionCols:_col0
                                  Select Operator [SEL_134] (rows=20000000 width=1014)
                                    Output:["_col0","_col1"]
                                    Filter Operator [FIL_133] (rows=20000000 width=1014)
                                      predicate:((ca_country = 'United States') and ca_address_sk is not null)
                                      TableScan [TS_17] (rows=40000000 width=1014)
                                        default@customer_address,customer_address,Tbl:COMPLETE,Col:NONE,Output:["ca_address_sk","ca_state","ca_country"]
                              <-Reducer 8 [SIMPLE_EDGE]
                                SHUFFLE [RS_26]
                                  PartitionCols:_col2
                                  Merge Join Operator [MERGEJOIN_105] (rows=232318249 width=88)
                                    Conds:RS_23._col1=RS_127._col0(Inner),Output:["_col2","_col3","_col4","_col6"]
                                  <-Map 13 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_127]
                                      PartitionCols:_col0
                                      Select Operator [SEL_126] (rows=465450 width=385)
                                        Output:["_col0"]
                                        Filter Operator [FIL_125] (rows=465450 width=385)
                                          predicate:((cd_education_status = '4 yr Degree') and (cd_marital_status = 'M') and cd_demo_sk is not null)
                                          TableScan [TS_14] (rows=1861800 width=385)
                                            default@customer_demographics,customer_demographics,Tbl:COMPLETE,Col:NONE,Output:["cd_demo_sk","cd_marital_status","cd_education_status"]
                                  <-Reducer 7 [SIMPLE_EDGE]
                                    SHUFFLE [RS_23]
                                      PartitionCols:_col1
                                      Merge Join Operator [MERGEJOIN_104] (rows=211198404 width=88)
                                        Conds:RS_145._col0=RS_119._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col6"]
                                      <-Map 11 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_119]
                                          PartitionCols:_col0
                                          Select Operator [SEL_118] (rows=36524 width=1119)
                                            Output:["_col0"]
                                            Filter Operator [FIL_117] (rows=36524 width=1119)
                                              predicate:((d_year = 1998) and d_date_sk is not null)
                                              TableScan [TS_11] (rows=73049 width=1119)
                                                default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_year"]
                                      <-Map 6 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_145]
                                          PartitionCols:_col0
                                          Select Operator [SEL_144] (rows=191998545 width=88)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col6"]
                                            Filter Operator [FIL_143] (rows=191998545 width=88)
                                              predicate:((ss_addr_sk BETWEEN DynamicValue(RS_27_customer_address_ca_address_sk_min) AND DynamicValue(RS_27_customer_address_ca_address_sk_max) and in_bloom_filter(ss_addr_sk, DynamicValue(RS_27_customer_address_ca_address_sk_bloom_filter))) and (ss_cdemo_sk BETWEEN DynamicValue(RS_24_customer_demographics_cd_demo_sk_min) AND DynamicValue(RS_24_customer_demographics_cd_demo_sk_max) and in_bloom_filter(ss_cdemo_sk, DynamicValue(RS_24_customer_demographics_cd_demo_sk_bloom_filter))) and (ss_sales_price BETWEEN 100 AND 150 or ss_sales_price BETWEEN 50 AND 100 or ss_sales_price BETWEEN 150 AND 200) and (ss_sold_date_sk BETWEEN DynamicValue(RS_21_date_dim_d_date_sk_min) AND DynamicValue(RS_21_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_21_date_dim_d_date_sk_bloom_filter))) and (ss_store_sk BETWEEN DynamicValue(RS_35_store_s_store_sk_min) AND DynamicValue(RS_35_store_s_store_sk_max) and in_bloom_filter(ss_store_sk, DynamicValue(RS_35_store_s_store_sk_bloom_filter))) and ss_addr_sk is not null and ss_cdemo_sk is not null and ss_sold_date_sk is not null and ss_store_sk is not null)
                                              TableScan [TS_8] (rows=575995635 width=88)
                                                default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_date_sk","ss_cdemo_sk","ss_addr_sk","ss_store_sk","ss_quantity","ss_sales_price","ss_net_profit"]
                                              <-Reducer 12 [BROADCAST_EDGE] vectorized
                                                BROADCAST [RS_124]
                                                  Group By Operator [GBY_123] (rows=1 width=12)
                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                  <-Map 11 [CUSTOM_SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_122]
                                                      Group By Operator [GBY_121] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                        Select Operator [SEL_120] (rows=36524 width=1119)
                                                          Output:["_col0"]
                                                           Please refer to the previous Select Operator [SEL_118]
                                              <-Reducer 14 [BROADCAST_EDGE] vectorized
                                                BROADCAST [RS_132]
                                                  Group By Operator [GBY_131] (rows=1 width=12)
                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                  <-Map 13 [CUSTOM_SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_130]
                                                      Group By Operator [GBY_129] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                        Select Operator [SEL_128] (rows=465450 width=385)
                                                          Output:["_col0"]
                                                           Please refer to the previous Select Operator [SEL_126]
                                              <-Reducer 16 [BROADCAST_EDGE] vectorized
                                                BROADCAST [RS_140]
                                                  Group By Operator [GBY_139] (rows=1 width=12)
                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=20000000)"]
                                                  <-Map 15 [CUSTOM_SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_138]
                                                      Group By Operator [GBY_137] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=20000000)"]
                                                        Select Operator [SEL_136] (rows=20000000 width=1014)
                                                          Output:["_col0"]
                                                           Please refer to the previous Select Operator [SEL_134]
                                              <-Reducer 5 [BROADCAST_EDGE] vectorized
                                                BROADCAST [RS_142]
                                                  Group By Operator [GBY_141] (rows=1 width=16)
                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                  <-Reducer 2 [CUSTOM_SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_116]
                                                      Group By Operator [GBY_115] (rows=1 width=16)
                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                        Select Operator [SEL_114] (rows=852 width=1910)
                                                          Output:["_col0"]
                                                           Please refer to the previous Group By Operator [GBY_112]

