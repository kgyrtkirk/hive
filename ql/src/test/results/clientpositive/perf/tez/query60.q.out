PREHOOK: query: explain
with ss as (
 select
          i_item_id,sum(ss_ext_sales_price) total_sales
 from
 	store_sales,
 	date_dim,
         customer_address,
         item
 where
         i_item_id in (select
  i_item_id
from
 item
where i_category in ('Children'))
 and     ss_item_sk              = i_item_sk
 and     ss_sold_date_sk         = d_date_sk
 and     d_year                  = 1999
 and     d_moy                   = 9
 and     ss_addr_sk              = ca_address_sk
 and     ca_gmt_offset           = -6 
 group by i_item_id),
 cs as (
 select
          i_item_id,sum(cs_ext_sales_price) total_sales
 from
 	catalog_sales,
 	date_dim,
         customer_address,
         item
 where
         i_item_id               in (select
  i_item_id
from
 item
where i_category in ('Children'))
 and     cs_item_sk              = i_item_sk
 and     cs_sold_date_sk         = d_date_sk
 and     d_year                  = 1999
 and     d_moy                   = 9
 and     cs_bill_addr_sk         = ca_address_sk
 and     ca_gmt_offset           = -6 
 group by i_item_id),
 ws as (
 select
          i_item_id,sum(ws_ext_sales_price) total_sales
 from
 	web_sales,
 	date_dim,
         customer_address,
         item
 where
         i_item_id               in (select
  i_item_id
from
 item
where i_category in ('Children'))
 and     ws_item_sk              = i_item_sk
 and     ws_sold_date_sk         = d_date_sk
 and     d_year                  = 1999
 and     d_moy                   = 9
 and     ws_bill_addr_sk         = ca_address_sk
 and     ca_gmt_offset           = -6
 group by i_item_id)
  select   
  i_item_id
,sum(total_sales) total_sales
 from  (select * from ss 
        union all
        select * from cs 
        union all
        select * from ws) tmp1
 group by i_item_id
 order by i_item_id
      ,total_sales
 limit 100
PREHOOK: type: QUERY
POSTHOOK: query: explain
with ss as (
 select
          i_item_id,sum(ss_ext_sales_price) total_sales
 from
 	store_sales,
 	date_dim,
         customer_address,
         item
 where
         i_item_id in (select
  i_item_id
from
 item
where i_category in ('Children'))
 and     ss_item_sk              = i_item_sk
 and     ss_sold_date_sk         = d_date_sk
 and     d_year                  = 1999
 and     d_moy                   = 9
 and     ss_addr_sk              = ca_address_sk
 and     ca_gmt_offset           = -6 
 group by i_item_id),
 cs as (
 select
          i_item_id,sum(cs_ext_sales_price) total_sales
 from
 	catalog_sales,
 	date_dim,
         customer_address,
         item
 where
         i_item_id               in (select
  i_item_id
from
 item
where i_category in ('Children'))
 and     cs_item_sk              = i_item_sk
 and     cs_sold_date_sk         = d_date_sk
 and     d_year                  = 1999
 and     d_moy                   = 9
 and     cs_bill_addr_sk         = ca_address_sk
 and     ca_gmt_offset           = -6 
 group by i_item_id),
 ws as (
 select
          i_item_id,sum(ws_ext_sales_price) total_sales
 from
 	web_sales,
 	date_dim,
         customer_address,
         item
 where
         i_item_id               in (select
  i_item_id
from
 item
where i_category in ('Children'))
 and     ws_item_sk              = i_item_sk
 and     ws_sold_date_sk         = d_date_sk
 and     d_year                  = 1999
 and     d_moy                   = 9
 and     ws_bill_addr_sk         = ca_address_sk
 and     ca_gmt_offset           = -6
 group by i_item_id)
  select   
  i_item_id
,sum(total_sales) total_sales
 from  (select * from ss 
        union all
        select * from cs 
        union all
        select * from ws) tmp1
 group by i_item_id
 order by i_item_id
      ,total_sales
 limit 100
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Map 17 <- Reducer 22 (BROADCAST_EDGE), Reducer 32 (BROADCAST_EDGE), Reducer 9 (BROADCAST_EDGE)
Map 35 <- Reducer 12 (BROADCAST_EDGE), Reducer 26 (BROADCAST_EDGE), Reducer 33 (BROADCAST_EDGE)
Map 36 <- Reducer 15 (BROADCAST_EDGE), Reducer 30 (BROADCAST_EDGE), Reducer 34 (BROADCAST_EDGE)
Reducer 10 <- Reducer 25 (ONE_TO_ONE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 11 <- Reducer 10 (SIMPLE_EDGE), Union 6 (CONTAINS)
Reducer 12 <- Reducer 3 (CUSTOM_SIMPLE_EDGE)
Reducer 13 <- Reducer 29 (ONE_TO_ONE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 14 <- Reducer 13 (SIMPLE_EDGE), Union 6 (CONTAINS)
Reducer 15 <- Reducer 3 (CUSTOM_SIMPLE_EDGE)
Reducer 18 <- Map 17 (SIMPLE_EDGE), Map 21 (SIMPLE_EDGE)
Reducer 19 <- Map 31 (SIMPLE_EDGE), Reducer 18 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 16 (SIMPLE_EDGE)
Reducer 20 <- Reducer 19 (SIMPLE_EDGE)
Reducer 22 <- Map 21 (CUSTOM_SIMPLE_EDGE)
Reducer 23 <- Map 21 (SIMPLE_EDGE), Map 35 (SIMPLE_EDGE)
Reducer 24 <- Map 31 (SIMPLE_EDGE), Reducer 23 (SIMPLE_EDGE)
Reducer 25 <- Reducer 24 (SIMPLE_EDGE)
Reducer 26 <- Map 21 (CUSTOM_SIMPLE_EDGE)
Reducer 27 <- Map 21 (SIMPLE_EDGE), Map 36 (SIMPLE_EDGE)
Reducer 28 <- Map 31 (SIMPLE_EDGE), Reducer 27 (SIMPLE_EDGE)
Reducer 29 <- Reducer 28 (SIMPLE_EDGE)
Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
Reducer 30 <- Map 21 (CUSTOM_SIMPLE_EDGE)
Reducer 32 <- Map 31 (CUSTOM_SIMPLE_EDGE)
Reducer 33 <- Map 31 (CUSTOM_SIMPLE_EDGE)
Reducer 34 <- Map 31 (CUSTOM_SIMPLE_EDGE)
Reducer 4 <- Reducer 20 (ONE_TO_ONE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (SIMPLE_EDGE), Union 6 (CONTAINS)
Reducer 7 <- Union 6 (SIMPLE_EDGE)
Reducer 8 <- Reducer 7 (SIMPLE_EDGE)
Reducer 9 <- Reducer 3 (CUSTOM_SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 8 vectorized
      File Output Operator [FS_412]
        Limit [LIM_411] (rows=100 width=108)
          Number of rows:100
          Select Operator [SEL_410] (rows=167704036 width=108)
            Output:["_col0","_col1"]
          <-Reducer 7 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_409]
              Group By Operator [GBY_408] (rows=167704036 width=108)
                Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
              <-Union 6 [SIMPLE_EDGE]
                <-Reducer 11 [CONTAINS] vectorized
                  Reduce Output Operator [RS_427]
                    PartitionCols:_col0
                    Group By Operator [GBY_426] (rows=335408072 width=108)
                      Output:["_col0","_col1"],aggregations:["sum(_col1)"],keys:_col0
                      Top N Key Operator [TNK_425] (rows=335408072 width=108)
                        keys:_col0,sort order:+,top n:100
                        Group By Operator [GBY_424] (rows=95828623 width=135)
                          Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                        <-Reducer 10 [SIMPLE_EDGE]
                          SHUFFLE [RS_87]
                            PartitionCols:_col0
                            Group By Operator [GBY_86] (rows=191657247 width=135)
                              Output:["_col0","_col1"],aggregations:["sum(_col5)"],keys:_col1
                              Select Operator [SEL_84] (rows=191657247 width=135)
                                Output:["_col1","_col5"]
                                Merge Join Operator [MERGEJOIN_328] (rows=191657247 width=135)
                                  Conds:RS_355._col0=RS_423._col0(Inner),Output:["_col1","_col2","_col4"]
                                <-Reducer 3 [SIMPLE_EDGE] vectorized
                                  PARTITION_ONLY_SHUFFLE [RS_355]
                                    PartitionCols:_col0
                                    Group By Operator [GBY_352] (rows=254100 width=1436)
                                      Output:["_col0","_col1","_col2"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1
                                    <-Reducer 2 [SIMPLE_EDGE]
                                      SHUFFLE [RS_13]
                                        PartitionCols:_col0, _col1
                                        Group By Operator [GBY_12] (rows=508200 width=1436)
                                          Output:["_col0","_col1","_col2"],aggregations:["count()"],keys:_col0, _col1
                                          Merge Join Operator [MERGEJOIN_318] (rows=508200 width=1436)
                                            Conds:RS_347._col1=RS_351._col0(Left Semi),Output:["_col0","_col1"]
                                          <-Map 1 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_347]
                                              PartitionCols:_col1
                                              Select Operator [SEL_346] (rows=462000 width=1436)
                                                Output:["_col0","_col1"]
                                                Filter Operator [FIL_345] (rows=462000 width=1436)
                                                  predicate:(i_item_id is not null and i_item_sk is not null)
                                                  TableScan [TS_0] (rows=462000 width=1436)
                                                    default@item,item,Tbl:COMPLETE,Col:NONE,Output:["i_item_sk","i_item_id"]
                                          <-Map 16 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_351]
                                              PartitionCols:_col0
                                              Group By Operator [GBY_350] (rows=231000 width=1436)
                                                Output:["_col0"],keys:_col0
                                                Select Operator [SEL_349] (rows=231000 width=1436)
                                                  Output:["_col0"]
                                                  Filter Operator [FIL_348] (rows=231000 width=1436)
                                                    predicate:((i_category = 'Children') and i_item_id is not null)
                                                    TableScan [TS_3] (rows=462000 width=1436)
                                                      default@item,item,Tbl:COMPLETE,Col:NONE,Output:["i_item_id","i_category"]
                                <-Reducer 25 [ONE_TO_ONE_EDGE] vectorized
                                  FORWARD [RS_423]
                                    PartitionCols:_col0
                                    Group By Operator [GBY_422] (rows=174233858 width=135)
                                      Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                                    <-Reducer 24 [SIMPLE_EDGE]
                                      SHUFFLE [RS_78]
                                        PartitionCols:_col0
                                        Group By Operator [GBY_77] (rows=348467716 width=135)
                                          Output:["_col0","_col1"],aggregations:["sum(_col3)"],keys:_col2
                                          Merge Join Operator [MERGEJOIN_323] (rows=348467716 width=135)
                                            Conds:RS_73._col1=RS_385._col0(Inner),Output:["_col2","_col3"]
                                          <-Map 31 [SIMPLE_EDGE] vectorized
                                            PARTITION_ONLY_SHUFFLE [RS_385]
                                              PartitionCols:_col0
                                              Select Operator [SEL_382] (rows=20000000 width=1014)
                                                Output:["_col0"]
                                                Filter Operator [FIL_381] (rows=20000000 width=1014)
                                                  predicate:((ca_gmt_offset = -6) and ca_address_sk is not null)
                                                  TableScan [TS_22] (rows=40000000 width=1014)
                                                    default@customer_address,customer_address,Tbl:COMPLETE,Col:NONE,Output:["ca_address_sk","ca_gmt_offset"]
                                          <-Reducer 23 [SIMPLE_EDGE]
                                            SHUFFLE [RS_73]
                                              PartitionCols:_col1
                                              Merge Join Operator [MERGEJOIN_322] (rows=316788826 width=135)
                                                Conds:RS_421._col0=RS_369._col0(Inner),Output:["_col1","_col2","_col3"]
                                              <-Map 21 [SIMPLE_EDGE] vectorized
                                                PARTITION_ONLY_SHUFFLE [RS_369]
                                                  PartitionCols:_col0
                                                  Select Operator [SEL_366] (rows=18262 width=1119)
                                                    Output:["_col0"]
                                                    Filter Operator [FIL_365] (rows=18262 width=1119)
                                                      predicate:((d_moy = 9) and (d_year = 1999) and d_date_sk is not null)
                                                      TableScan [TS_19] (rows=73049 width=1119)
                                                        default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_year","d_moy"]
                                              <-Map 35 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_421]
                                                  PartitionCols:_col0
                                                  Select Operator [SEL_420] (rows=287989836 width=135)
                                                    Output:["_col0","_col1","_col2","_col3"]
                                                    Filter Operator [FIL_419] (rows=287989836 width=135)
                                                      predicate:((cs_bill_addr_sk BETWEEN DynamicValue(RS_74_customer_address_ca_address_sk_min) AND DynamicValue(RS_74_customer_address_ca_address_sk_max) and in_bloom_filter(cs_bill_addr_sk, DynamicValue(RS_74_customer_address_ca_address_sk_bloom_filter))) and (cs_item_sk BETWEEN DynamicValue(RS_81_item_i_item_sk_min) AND DynamicValue(RS_81_item_i_item_sk_max) and in_bloom_filter(cs_item_sk, DynamicValue(RS_81_item_i_item_sk_bloom_filter))) and (cs_sold_date_sk BETWEEN DynamicValue(RS_71_date_dim_d_date_sk_min) AND DynamicValue(RS_71_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_71_date_dim_d_date_sk_bloom_filter))) and cs_bill_addr_sk is not null and cs_item_sk is not null and cs_sold_date_sk is not null)
                                                      TableScan [TS_61] (rows=287989836 width=135)
                                                        default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:NONE,Output:["cs_sold_date_sk","cs_bill_addr_sk","cs_item_sk","cs_ext_sales_price"]
                                                      <-Reducer 12 [BROADCAST_EDGE] vectorized
                                                        BROADCAST [RS_418]
                                                          Group By Operator [GBY_417] (rows=1 width=16)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                          <-Reducer 3 [CUSTOM_SIMPLE_EDGE] vectorized
                                                            PARTITION_ONLY_SHUFFLE [RS_363]
                                                              Group By Operator [GBY_360] (rows=1 width=16)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                Select Operator [SEL_356] (rows=254100 width=1436)
                                                                  Output:["_col0"]
                                                                   Please refer to the previous Group By Operator [GBY_352]
                                                      <-Reducer 26 [BROADCAST_EDGE] vectorized
                                                        BROADCAST [RS_414]
                                                          Group By Operator [GBY_413] (rows=1 width=12)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                          <-Map 21 [CUSTOM_SIMPLE_EDGE] vectorized
                                                            PARTITION_ONLY_SHUFFLE [RS_377]
                                                              Group By Operator [GBY_374] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                Select Operator [SEL_370] (rows=18262 width=1119)
                                                                  Output:["_col0"]
                                                                   Please refer to the previous Select Operator [SEL_366]
                                                      <-Reducer 33 [BROADCAST_EDGE] vectorized
                                                        BROADCAST [RS_416]
                                                          Group By Operator [GBY_415] (rows=1 width=12)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=20000000)"]
                                                          <-Map 31 [CUSTOM_SIMPLE_EDGE] vectorized
                                                            PARTITION_ONLY_SHUFFLE [RS_393]
                                                              Group By Operator [GBY_390] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=20000000)"]
                                                                Select Operator [SEL_386] (rows=20000000 width=1014)
                                                                  Output:["_col0"]
                                                                   Please refer to the previous Select Operator [SEL_382]
                <-Reducer 14 [CONTAINS] vectorized
                  Reduce Output Operator [RS_442]
                    PartitionCols:_col0
                    Group By Operator [GBY_441] (rows=335408072 width=108)
                      Output:["_col0","_col1"],aggregations:["sum(_col1)"],keys:_col0
                      Top N Key Operator [TNK_440] (rows=335408072 width=108)
                        keys:_col0,sort order:+,top n:100
                        Group By Operator [GBY_439] (rows=47916890 width=135)
                          Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                        <-Reducer 13 [SIMPLE_EDGE]
                          SHUFFLE [RS_133]
                            PartitionCols:_col0
                            Group By Operator [GBY_132] (rows=95833780 width=135)
                              Output:["_col0","_col1"],aggregations:["sum(_col5)"],keys:_col1
                              Select Operator [SEL_130] (rows=95833780 width=135)
                                Output:["_col1","_col5"]
                                Merge Join Operator [MERGEJOIN_329] (rows=95833780 width=135)
                                  Conds:RS_357._col0=RS_438._col0(Inner),Output:["_col1","_col2","_col4"]
                                <-Reducer 3 [SIMPLE_EDGE] vectorized
                                  PARTITION_ONLY_SHUFFLE [RS_357]
                                    PartitionCols:_col0
                                     Please refer to the previous Group By Operator [GBY_352]
                                <-Reducer 29 [ONE_TO_ONE_EDGE] vectorized
                                  FORWARD [RS_438]
                                    PartitionCols:_col0
                                    Group By Operator [GBY_437] (rows=87121617 width=135)
                                      Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                                    <-Reducer 28 [SIMPLE_EDGE]
                                      SHUFFLE [RS_124]
                                        PartitionCols:_col0
                                        Group By Operator [GBY_123] (rows=174243235 width=135)
                                          Output:["_col0","_col1"],aggregations:["sum(_col3)"],keys:_col1
                                          Merge Join Operator [MERGEJOIN_326] (rows=174243235 width=135)
                                            Conds:RS_119._col2=RS_387._col0(Inner),Output:["_col1","_col3"]
                                          <-Map 31 [SIMPLE_EDGE] vectorized
                                            PARTITION_ONLY_SHUFFLE [RS_387]
                                              PartitionCols:_col0
                                               Please refer to the previous Select Operator [SEL_382]
                                          <-Reducer 27 [SIMPLE_EDGE]
                                            SHUFFLE [RS_119]
                                              PartitionCols:_col2
                                              Merge Join Operator [MERGEJOIN_325] (rows=158402938 width=135)
                                                Conds:RS_436._col0=RS_371._col0(Inner),Output:["_col1","_col2","_col3"]
                                              <-Map 21 [SIMPLE_EDGE] vectorized
                                                PARTITION_ONLY_SHUFFLE [RS_371]
                                                  PartitionCols:_col0
                                                   Please refer to the previous Select Operator [SEL_366]
                                              <-Map 36 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_436]
                                                  PartitionCols:_col0
                                                  Select Operator [SEL_435] (rows=144002668 width=135)
                                                    Output:["_col0","_col1","_col2","_col3"]
                                                    Filter Operator [FIL_434] (rows=144002668 width=135)
                                                      predicate:((ws_bill_addr_sk BETWEEN DynamicValue(RS_120_customer_address_ca_address_sk_min) AND DynamicValue(RS_120_customer_address_ca_address_sk_max) and in_bloom_filter(ws_bill_addr_sk, DynamicValue(RS_120_customer_address_ca_address_sk_bloom_filter))) and (ws_item_sk BETWEEN DynamicValue(RS_127_item_i_item_sk_min) AND DynamicValue(RS_127_item_i_item_sk_max) and in_bloom_filter(ws_item_sk, DynamicValue(RS_127_item_i_item_sk_bloom_filter))) and (ws_sold_date_sk BETWEEN DynamicValue(RS_117_date_dim_d_date_sk_min) AND DynamicValue(RS_117_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_117_date_dim_d_date_sk_bloom_filter))) and ws_bill_addr_sk is not null and ws_item_sk is not null and ws_sold_date_sk is not null)
                                                      TableScan [TS_107] (rows=144002668 width=135)
                                                        default@web_sales,web_sales,Tbl:COMPLETE,Col:NONE,Output:["ws_sold_date_sk","ws_item_sk","ws_bill_addr_sk","ws_ext_sales_price"]
                                                      <-Reducer 15 [BROADCAST_EDGE] vectorized
                                                        BROADCAST [RS_433]
                                                          Group By Operator [GBY_432] (rows=1 width=16)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                          <-Reducer 3 [CUSTOM_SIMPLE_EDGE] vectorized
                                                            PARTITION_ONLY_SHUFFLE [RS_364]
                                                              Group By Operator [GBY_361] (rows=1 width=16)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                Select Operator [SEL_358] (rows=254100 width=1436)
                                                                  Output:["_col0"]
                                                                   Please refer to the previous Group By Operator [GBY_352]
                                                      <-Reducer 30 [BROADCAST_EDGE] vectorized
                                                        BROADCAST [RS_429]
                                                          Group By Operator [GBY_428] (rows=1 width=12)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                          <-Map 21 [CUSTOM_SIMPLE_EDGE] vectorized
                                                            PARTITION_ONLY_SHUFFLE [RS_378]
                                                              Group By Operator [GBY_375] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                Select Operator [SEL_372] (rows=18262 width=1119)
                                                                  Output:["_col0"]
                                                                   Please refer to the previous Select Operator [SEL_366]
                                                      <-Reducer 34 [BROADCAST_EDGE] vectorized
                                                        BROADCAST [RS_431]
                                                          Group By Operator [GBY_430] (rows=1 width=12)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=20000000)"]
                                                          <-Map 31 [CUSTOM_SIMPLE_EDGE] vectorized
                                                            PARTITION_ONLY_SHUFFLE [RS_394]
                                                              Group By Operator [GBY_391] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=20000000)"]
                                                                Select Operator [SEL_388] (rows=20000000 width=1014)
                                                                  Output:["_col0"]
                                                                   Please refer to the previous Select Operator [SEL_382]
                <-Reducer 5 [CONTAINS] vectorized
                  Reduce Output Operator [RS_407]
                    PartitionCols:_col0
                    Group By Operator [GBY_406] (rows=335408072 width=108)
                      Output:["_col0","_col1"],aggregations:["sum(_col1)"],keys:_col0
                      Top N Key Operator [TNK_405] (rows=335408072 width=108)
                        keys:_col0,sort order:+,top n:100
                        Group By Operator [GBY_404] (rows=191662559 width=88)
                          Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                        <-Reducer 4 [SIMPLE_EDGE]
                          SHUFFLE [RS_42]
                            PartitionCols:_col0
                            Group By Operator [GBY_41] (rows=383325119 width=88)
                              Output:["_col0","_col1"],aggregations:["sum(_col5)"],keys:_col1
                              Select Operator [SEL_39] (rows=383325119 width=88)
                                Output:["_col1","_col5"]
                                Merge Join Operator [MERGEJOIN_327] (rows=383325119 width=88)
                                  Conds:RS_353._col0=RS_403._col0(Inner),Output:["_col1","_col2","_col4"]
                                <-Reducer 3 [SIMPLE_EDGE] vectorized
                                  PARTITION_ONLY_SHUFFLE [RS_353]
                                    PartitionCols:_col0
                                     Please refer to the previous Group By Operator [GBY_352]
                                <-Reducer 20 [ONE_TO_ONE_EDGE] vectorized
                                  FORWARD [RS_403]
                                    PartitionCols:_col0
                                    Group By Operator [GBY_402] (rows=348477374 width=88)
                                      Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                                    <-Reducer 19 [SIMPLE_EDGE]
                                      SHUFFLE [RS_33]
                                        PartitionCols:_col0
                                        Group By Operator [GBY_32] (rows=696954748 width=88)
                                          Output:["_col0","_col1"],aggregations:["sum(_col3)"],keys:_col1
                                          Merge Join Operator [MERGEJOIN_320] (rows=696954748 width=88)
                                            Conds:RS_28._col2=RS_383._col0(Inner),Output:["_col1","_col3"]
                                          <-Map 31 [SIMPLE_EDGE] vectorized
                                            PARTITION_ONLY_SHUFFLE [RS_383]
                                              PartitionCols:_col0
                                               Please refer to the previous Select Operator [SEL_382]
                                          <-Reducer 18 [SIMPLE_EDGE]
                                            SHUFFLE [RS_28]
                                              PartitionCols:_col2
                                              Merge Join Operator [MERGEJOIN_319] (rows=633595212 width=88)
                                                Conds:RS_401._col0=RS_367._col0(Inner),Output:["_col1","_col2","_col3"]
                                              <-Map 21 [SIMPLE_EDGE] vectorized
                                                PARTITION_ONLY_SHUFFLE [RS_367]
                                                  PartitionCols:_col0
                                                   Please refer to the previous Select Operator [SEL_366]
                                              <-Map 17 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_401]
                                                  PartitionCols:_col0
                                                  Select Operator [SEL_400] (rows=575995635 width=88)
                                                    Output:["_col0","_col1","_col2","_col3"]
                                                    Filter Operator [FIL_399] (rows=575995635 width=88)
                                                      predicate:((ss_addr_sk BETWEEN DynamicValue(RS_29_customer_address_ca_address_sk_min) AND DynamicValue(RS_29_customer_address_ca_address_sk_max) and in_bloom_filter(ss_addr_sk, DynamicValue(RS_29_customer_address_ca_address_sk_bloom_filter))) and (ss_item_sk BETWEEN DynamicValue(RS_36_item_i_item_sk_min) AND DynamicValue(RS_36_item_i_item_sk_max) and in_bloom_filter(ss_item_sk, DynamicValue(RS_36_item_i_item_sk_bloom_filter))) and (ss_sold_date_sk BETWEEN DynamicValue(RS_26_date_dim_d_date_sk_min) AND DynamicValue(RS_26_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_26_date_dim_d_date_sk_bloom_filter))) and ss_addr_sk is not null and ss_item_sk is not null and ss_sold_date_sk is not null)
                                                      TableScan [TS_16] (rows=575995635 width=88)
                                                        default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_date_sk","ss_item_sk","ss_addr_sk","ss_ext_sales_price"]
                                                      <-Reducer 22 [BROADCAST_EDGE] vectorized
                                                        BROADCAST [RS_380]
                                                          Group By Operator [GBY_379] (rows=1 width=12)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                          <-Map 21 [CUSTOM_SIMPLE_EDGE] vectorized
                                                            PARTITION_ONLY_SHUFFLE [RS_376]
                                                              Group By Operator [GBY_373] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                Select Operator [SEL_368] (rows=18262 width=1119)
                                                                  Output:["_col0"]
                                                                   Please refer to the previous Select Operator [SEL_366]
                                                      <-Reducer 32 [BROADCAST_EDGE] vectorized
                                                        BROADCAST [RS_396]
                                                          Group By Operator [GBY_395] (rows=1 width=12)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=20000000)"]
                                                          <-Map 31 [CUSTOM_SIMPLE_EDGE] vectorized
                                                            PARTITION_ONLY_SHUFFLE [RS_392]
                                                              Group By Operator [GBY_389] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=20000000)"]
                                                                Select Operator [SEL_384] (rows=20000000 width=1014)
                                                                  Output:["_col0"]
                                                                   Please refer to the previous Select Operator [SEL_382]
                                                      <-Reducer 9 [BROADCAST_EDGE] vectorized
                                                        BROADCAST [RS_398]
                                                          Group By Operator [GBY_397] (rows=1 width=16)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                          <-Reducer 3 [CUSTOM_SIMPLE_EDGE] vectorized
                                                            PARTITION_ONLY_SHUFFLE [RS_362]
                                                              Group By Operator [GBY_359] (rows=1 width=16)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                Select Operator [SEL_354] (rows=254100 width=1436)
                                                                  Output:["_col0"]
                                                                   Please refer to the previous Group By Operator [GBY_352]

