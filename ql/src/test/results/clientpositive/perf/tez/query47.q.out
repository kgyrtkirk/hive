PREHOOK: query: explain
with v1 as(
 select i_category, i_brand,
        s_store_name, s_company_name,
        d_year, d_moy,
        sum(ss_sales_price) sum_sales,
        avg(sum(ss_sales_price)) over
          (partition by i_category, i_brand,
                     s_store_name, s_company_name, d_year)
          avg_monthly_sales,
        rank() over
          (partition by i_category, i_brand,
                     s_store_name, s_company_name
           order by d_year, d_moy) rn
 from item, store_sales, date_dim, store
 where ss_item_sk = i_item_sk and
       ss_sold_date_sk = d_date_sk and
       ss_store_sk = s_store_sk and
       (
         d_year = 2000 or
         ( d_year = 2000-1 and d_moy =12) or
         ( d_year = 2000+1 and d_moy =1)
       )
 group by i_category, i_brand,
          s_store_name, s_company_name,
          d_year, d_moy),
 v2 as(
 select v1.i_category
        ,v1.d_year, v1.d_moy
        ,v1.avg_monthly_sales
        ,v1.sum_sales, v1_lag.sum_sales psum, v1_lead.sum_sales nsum
 from v1, v1 v1_lag, v1 v1_lead
 where v1.i_category = v1_lag.i_category and
       v1.i_category = v1_lead.i_category and
       v1.i_brand = v1_lag.i_brand and
       v1.i_brand = v1_lead.i_brand and
       v1.s_store_name = v1_lag.s_store_name and
       v1.s_store_name = v1_lead.s_store_name and
       v1.s_company_name = v1_lag.s_company_name and
       v1.s_company_name = v1_lead.s_company_name and
       v1.rn = v1_lag.rn + 1 and
       v1.rn = v1_lead.rn - 1)
  select  *
 from v2
 where  d_year = 2000 and    
        avg_monthly_sales > 0 and
        case when avg_monthly_sales > 0 then abs(sum_sales - avg_monthly_sales) / avg_monthly_sales else null end > 0.1
 order by sum_sales - avg_monthly_sales, 3
 limit 100
PREHOOK: type: QUERY
POSTHOOK: query: explain
with v1 as(
 select i_category, i_brand,
        s_store_name, s_company_name,
        d_year, d_moy,
        sum(ss_sales_price) sum_sales,
        avg(sum(ss_sales_price)) over
          (partition by i_category, i_brand,
                     s_store_name, s_company_name, d_year)
          avg_monthly_sales,
        rank() over
          (partition by i_category, i_brand,
                     s_store_name, s_company_name
           order by d_year, d_moy) rn
 from item, store_sales, date_dim, store
 where ss_item_sk = i_item_sk and
       ss_sold_date_sk = d_date_sk and
       ss_store_sk = s_store_sk and
       (
         d_year = 2000 or
         ( d_year = 2000-1 and d_moy =12) or
         ( d_year = 2000+1 and d_moy =1)
       )
 group by i_category, i_brand,
          s_store_name, s_company_name,
          d_year, d_moy),
 v2 as(
 select v1.i_category
        ,v1.d_year, v1.d_moy
        ,v1.avg_monthly_sales
        ,v1.sum_sales, v1_lag.sum_sales psum, v1_lead.sum_sales nsum
 from v1, v1 v1_lag, v1 v1_lead
 where v1.i_category = v1_lag.i_category and
       v1.i_category = v1_lead.i_category and
       v1.i_brand = v1_lag.i_brand and
       v1.i_brand = v1_lead.i_brand and
       v1.s_store_name = v1_lag.s_store_name and
       v1.s_store_name = v1_lead.s_store_name and
       v1.s_company_name = v1_lag.s_company_name and
       v1.s_company_name = v1_lead.s_company_name and
       v1.rn = v1_lag.rn + 1 and
       v1.rn = v1_lead.rn - 1)
  select  *
 from v2
 where  d_year = 2000 and    
        avg_monthly_sales > 0 and
        case when avg_monthly_sales > 0 then abs(sum_sales - avg_monthly_sales) / avg_monthly_sales else null end > 0.1
 order by sum_sales - avg_monthly_sales, 3
 limit 100
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 15 (BROADCAST_EDGE), Reducer 18 (BROADCAST_EDGE), Reducer 21 (BROADCAST_EDGE)
Reducer 10 <- Reducer 9 (SIMPLE_EDGE)
Reducer 11 <- Reducer 7 (SIMPLE_EDGE)
Reducer 12 <- Reducer 7 (SIMPLE_EDGE)
Reducer 13 <- Reducer 12 (SIMPLE_EDGE)
Reducer 15 <- Map 14 (CUSTOM_SIMPLE_EDGE)
Reducer 17 <- Map 16 (SIMPLE_EDGE)
Reducer 18 <- Reducer 17 (CUSTOM_SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 14 (SIMPLE_EDGE)
Reducer 20 <- Map 19 (SIMPLE_EDGE)
Reducer 21 <- Reducer 20 (CUSTOM_SIMPLE_EDGE)
Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 17 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 20 (SIMPLE_EDGE), Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 6 (SIMPLE_EDGE)
Reducer 8 <- Reducer 7 (SIMPLE_EDGE)
Reducer 9 <- Reducer 11 (SIMPLE_EDGE), Reducer 13 (SIMPLE_EDGE), Reducer 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 10 vectorized
      File Output Operator [FS_410]
        Limit [LIM_409] (rows=100 width=88)
          Number of rows:100
          Select Operator [SEL_408] (rows=210828818 width=88)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
          <-Reducer 9 [SIMPLE_EDGE]
            SHUFFLE [RS_174]
              Select Operator [SEL_173] (rows=210828818 width=88)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                Merge Join Operator [MERGEJOIN_345] (rows=210828818 width=88)
                  Conds:RS_396._col0, _col1, _col2, _col3, (_col5 + 1)=RS_407._col0, _col1, _col2, _col3, _col8(Inner),RS_407._col0, _col1, _col2, _col3, _col8=RS_391._col0, _col1, _col2, _col3, (_col5 - 1)(Inner),Output:["_col4","_col6","_col10","_col11","_col12","_col13","_col19"]
                <-Reducer 11 [SIMPLE_EDGE] vectorized
                  SHUFFLE [RS_396]
                    PartitionCols:_col0, _col1, _col2, _col3, (_col5 + 1)
                    Select Operator [SEL_395] (rows=95831279 width=88)
                      Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                      Filter Operator [FIL_394] (rows=95831279 width=88)
                        predicate:rank_window_0 is not null
                        PTF Operator [PTF_393] (rows=95831279 width=88)
                          Function definitions:[{},{"name:":"windowingtablefunction","order by:":"_col0 ASC NULLS LAST, _col1 ASC NULLS LAST","partition by:":"_col3, _col2, _col4, _col5"}]
                          Select Operator [SEL_392] (rows=95831279 width=88)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                          <-Reducer 7 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_385]
                              PartitionCols:_col3, _col2, _col4, _col5
                              Group By Operator [GBY_383] (rows=95831279 width=88)
                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5
                              <-Reducer 6 [SIMPLE_EDGE]
                                SHUFFLE [RS_159]
                                  PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5
                                  Group By Operator [GBY_158] (rows=191662559 width=88)
                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col10)"],keys:_col1, _col2, _col3, _col4, _col7, _col8
                                    Select Operator [SEL_156] (rows=191662559 width=88)
                                      Output:["_col1","_col2","_col3","_col4","_col7","_col8","_col10"]
                                      Merge Join Operator [MERGEJOIN_344] (rows=191662559 width=88)
                                        Conds:RS_382._col0=RS_370._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col7","_col8","_col9"]
                                      <-Reducer 20 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_370]
                                          PartitionCols:_col0
                                          Group By Operator [GBY_369] (rows=852 width=1910)
                                            Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                          <-Map 19 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_368]
                                              PartitionCols:_col0, _col1, _col2
                                              Group By Operator [GBY_367] (rows=1704 width=1910)
                                                Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col0, _col1, _col2
                                                Select Operator [SEL_366] (rows=1704 width=1910)
                                                  Output:["_col0","_col1","_col2"]
                                                  Filter Operator [FIL_365] (rows=1704 width=1910)
                                                    predicate:(s_company_name is not null and s_store_name is not null and s_store_sk is not null)
                                                    TableScan [TS_145] (rows=1704 width=1910)
                                                      default@store,store,Tbl:COMPLETE,Col:NONE,Output:["s_store_sk","s_store_name","s_company_name"]
                                      <-Reducer 5 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_382]
                                          PartitionCols:_col0
                                          Group By Operator [GBY_381] (rows=174238687 width=88)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4
                                          <-Reducer 4 [SIMPLE_EDGE]
                                            SHUFFLE [RS_142]
                                              PartitionCols:_col0, _col1, _col2, _col3, _col4
                                              Group By Operator [GBY_141] (rows=348477374 width=88)
                                                Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(_col9)"],keys:_col1, _col2, _col3, _col6, _col7
                                                Select Operator [SEL_139] (rows=348477374 width=88)
                                                  Output:["_col1","_col2","_col3","_col6","_col7","_col9"]
                                                  Merge Join Operator [MERGEJOIN_343] (rows=348477374 width=88)
                                                    Conds:RS_380._col0=RS_359._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col6","_col7","_col8"]
                                                  <-Reducer 17 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_359]
                                                      PartitionCols:_col0
                                                      Group By Operator [GBY_358] (rows=231000 width=1436)
                                                        Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                      <-Map 16 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_357]
                                                          PartitionCols:_col0, _col1, _col2
                                                          Group By Operator [GBY_356] (rows=462000 width=1436)
                                                            Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col0, _col1, _col2
                                                            Select Operator [SEL_355] (rows=462000 width=1436)
                                                              Output:["_col0","_col1","_col2"]
                                                              Filter Operator [FIL_354] (rows=462000 width=1436)
                                                                predicate:(i_brand is not null and i_category is not null and i_item_sk is not null)
                                                                TableScan [TS_128] (rows=462000 width=1436)
                                                                  default@item,item,Tbl:COMPLETE,Col:NONE,Output:["i_item_sk","i_brand","i_category"]
                                                  <-Reducer 3 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_380]
                                                      PartitionCols:_col0
                                                      Group By Operator [GBY_379] (rows=316797606 width=88)
                                                        Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3
                                                      <-Reducer 2 [SIMPLE_EDGE]
                                                        SHUFFLE [RS_125]
                                                          PartitionCols:_col0, _col1, _col2, _col3
                                                          Group By Operator [GBY_124] (rows=633595212 width=88)
                                                            Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col3)"],keys:_col1, _col2, _col5, _col6
                                                            Merge Join Operator [MERGEJOIN_338] (rows=633595212 width=88)
                                                              Conds:RS_378._col0=RS_348._col0(Inner),Output:["_col1","_col2","_col3","_col5","_col6"]
                                                            <-Map 14 [SIMPLE_EDGE] vectorized
                                                              SHUFFLE [RS_348]
                                                                PartitionCols:_col0
                                                                Select Operator [SEL_347] (rows=73049 width=1119)
                                                                  Output:["_col0","_col1","_col2"]
                                                                  Filter Operator [FIL_346] (rows=73049 width=1119)
                                                                    predicate:(((struct(d_year,d_moy)) IN (const struct(1999,12), const struct(2001,1)) or (d_year = 2000)) and d_date_sk is not null)
                                                                    TableScan [TS_117] (rows=73049 width=1119)
                                                                      default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_year","d_moy"]
                                                            <-Map 1 [SIMPLE_EDGE] vectorized
                                                              SHUFFLE [RS_378]
                                                                PartitionCols:_col0
                                                                Select Operator [SEL_377] (rows=575995635 width=88)
                                                                  Output:["_col0","_col1","_col2","_col3"]
                                                                  Filter Operator [FIL_376] (rows=575995635 width=88)
                                                                    predicate:((ss_item_sk BETWEEN DynamicValue(RS_137_item_i_item_sk_min) AND DynamicValue(RS_137_item_i_item_sk_max) and in_bloom_filter(ss_item_sk, DynamicValue(RS_137_item_i_item_sk_bloom_filter))) and (ss_sold_date_sk BETWEEN DynamicValue(RS_121_date_dim_d_date_sk_min) AND DynamicValue(RS_121_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_121_date_dim_d_date_sk_bloom_filter))) and (ss_store_sk BETWEEN DynamicValue(RS_154_store_s_store_sk_min) AND DynamicValue(RS_154_store_s_store_sk_max) and in_bloom_filter(ss_store_sk, DynamicValue(RS_154_store_s_store_sk_bloom_filter))) and ss_item_sk is not null and ss_sold_date_sk is not null and ss_store_sk is not null)
                                                                    TableScan [TS_114] (rows=575995635 width=88)
                                                                      default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_date_sk","ss_item_sk","ss_store_sk","ss_sales_price"]
                                                                    <-Reducer 15 [BROADCAST_EDGE] vectorized
                                                                      BROADCAST [RS_353]
                                                                        Group By Operator [GBY_352] (rows=1 width=12)
                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                        <-Map 14 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                          SHUFFLE [RS_351]
                                                                            Group By Operator [GBY_350] (rows=1 width=12)
                                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                              Select Operator [SEL_349] (rows=73049 width=1119)
                                                                                Output:["_col0"]
                                                                                 Please refer to the previous Select Operator [SEL_347]
                                                                    <-Reducer 18 [BROADCAST_EDGE] vectorized
                                                                      BROADCAST [RS_364]
                                                                        Group By Operator [GBY_363] (rows=1 width=20)
                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                        <-Reducer 17 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                          SHUFFLE [RS_362]
                                                                            Group By Operator [GBY_361] (rows=1 width=20)
                                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                              Select Operator [SEL_360] (rows=231000 width=1436)
                                                                                Output:["_col0"]
                                                                                 Please refer to the previous Group By Operator [GBY_358]
                                                                    <-Reducer 21 [BROADCAST_EDGE] vectorized
                                                                      BROADCAST [RS_375]
                                                                        Group By Operator [GBY_374] (rows=1 width=20)
                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                        <-Reducer 20 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                          SHUFFLE [RS_373]
                                                                            Group By Operator [GBY_372] (rows=1 width=20)
                                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                              Select Operator [SEL_371] (rows=852 width=1910)
                                                                                Output:["_col0"]
                                                                                 Please refer to the previous Group By Operator [GBY_369]
                <-Reducer 13 [SIMPLE_EDGE] vectorized
                  SHUFFLE [RS_407]
                    PartitionCols:_col0, _col1, _col2, _col3, _col8
                    Select Operator [SEL_406] (rows=7985939 width=88)
                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"]
                      Filter Operator [FIL_405] (rows=7985939 width=88)
                        predicate:CASE WHEN ((_col0 > 0)) THEN (((abs((_col7 - _col0)) / _col0) > 0.1)) ELSE (null) END
                        Select Operator [SEL_404] (rows=15971879 width=88)
                          Output:["rank_window_1","_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                          Filter Operator [FIL_403] (rows=15971879 width=88)
                            predicate:((_col0 > 0) and (_col1 = 2000) and rank_window_1 is not null)
                            PTF Operator [PTF_402] (rows=95831279 width=88)
                              Function definitions:[{},{"name:":"windowingtablefunction","order by:":"_col1 ASC NULLS LAST, _col2 ASC NULLS LAST","partition by:":"_col4, _col3, _col5, _col6"}]
                              Select Operator [SEL_401] (rows=95831279 width=88)
                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                              <-Reducer 12 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_400]
                                  PartitionCols:_col3, _col2, _col4, _col5
                                  Select Operator [SEL_399] (rows=95831279 width=88)
                                    Output:["avg_window_0","_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                                    PTF Operator [PTF_398] (rows=95831279 width=88)
                                      Function definitions:[{},{"name:":"windowingtablefunction","order by:":"_col3 ASC NULLS FIRST, _col2 ASC NULLS FIRST, _col4 ASC NULLS FIRST, _col5 ASC NULLS FIRST, _col0 ASC NULLS FIRST","partition by:":"_col3, _col2, _col4, _col5, _col0"}]
                                      Select Operator [SEL_397] (rows=95831279 width=88)
                                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                                      <-Reducer 7 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_386]
                                          PartitionCols:_col3, _col2, _col4, _col5, _col0
                                           Please refer to the previous Group By Operator [GBY_383]
                <-Reducer 8 [SIMPLE_EDGE] vectorized
                  SHUFFLE [RS_391]
                    PartitionCols:_col0, _col1, _col2, _col3, (_col5 - 1)
                    Select Operator [SEL_390] (rows=95831279 width=88)
                      Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                      Filter Operator [FIL_389] (rows=95831279 width=88)
                        predicate:rank_window_0 is not null
                        PTF Operator [PTF_388] (rows=95831279 width=88)
                          Function definitions:[{},{"name:":"windowingtablefunction","order by:":"_col0 ASC NULLS LAST, _col1 ASC NULLS LAST","partition by:":"_col3, _col2, _col4, _col5"}]
                          Select Operator [SEL_387] (rows=95831279 width=88)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                          <-Reducer 7 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_384]
                              PartitionCols:_col3, _col2, _col4, _col5
                               Please refer to the previous Group By Operator [GBY_383]

