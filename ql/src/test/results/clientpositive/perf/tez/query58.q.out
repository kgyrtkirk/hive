Warning: Shuffle Join MERGEJOIN[459][tables = [$hdt$_3, $hdt$_4]] in Stage 'Reducer 30' is a cross product
PREHOOK: query: explain
with ss_items as
 (select i_item_id item_id
        ,sum(ss_ext_sales_price) ss_item_rev 
 from store_sales
     ,item
     ,date_dim
 where ss_item_sk = i_item_sk
   and d_date in (select d_date
                  from date_dim
                  where d_week_seq = (select d_week_seq 
                                      from date_dim
                                      where d_date = '1998-02-19'))
   and ss_sold_date_sk   = d_date_sk
 group by i_item_id),
 cs_items as
 (select i_item_id item_id
        ,sum(cs_ext_sales_price) cs_item_rev
  from catalog_sales
      ,item
      ,date_dim
 where cs_item_sk = i_item_sk
  and  d_date in (select d_date
                  from date_dim
                  where d_week_seq = (select d_week_seq 
                                      from date_dim
                                      where d_date = '1998-02-19'))
  and  cs_sold_date_sk = d_date_sk
 group by i_item_id),
 ws_items as
 (select i_item_id item_id
        ,sum(ws_ext_sales_price) ws_item_rev
  from web_sales
      ,item
      ,date_dim
 where ws_item_sk = i_item_sk
  and  d_date in (select d_date
                  from date_dim
                  where d_week_seq =(select d_week_seq 
                                     from date_dim
                                     where d_date = '1998-02-19'))
  and ws_sold_date_sk   = d_date_sk
 group by i_item_id)
  select  ss_items.item_id
       ,ss_item_rev
       ,ss_item_rev/(ss_item_rev+cs_item_rev+ws_item_rev)/3 * 100 ss_dev
       ,cs_item_rev
       ,cs_item_rev/(ss_item_rev+cs_item_rev+ws_item_rev)/3 * 100 cs_dev
       ,ws_item_rev
       ,ws_item_rev/(ss_item_rev+cs_item_rev+ws_item_rev)/3 * 100 ws_dev
       ,(ss_item_rev+cs_item_rev+ws_item_rev)/3 average
 from ss_items,cs_items,ws_items
 where ss_items.item_id=cs_items.item_id
   and ss_items.item_id=ws_items.item_id 
   and ss_item_rev between 0.9 * cs_item_rev and 1.1 * cs_item_rev
   and ss_item_rev between 0.9 * ws_item_rev and 1.1 * ws_item_rev
   and cs_item_rev between 0.9 * ss_item_rev and 1.1 * ss_item_rev
   and cs_item_rev between 0.9 * ws_item_rev and 1.1 * ws_item_rev
   and ws_item_rev between 0.9 * ss_item_rev and 1.1 * ss_item_rev
   and ws_item_rev between 0.9 * cs_item_rev and 1.1 * cs_item_rev
 order by item_id
         ,ss_item_rev
 limit 100
PREHOOK: type: QUERY
POSTHOOK: query: explain
with ss_items as
 (select i_item_id item_id
        ,sum(ss_ext_sales_price) ss_item_rev 
 from store_sales
     ,item
     ,date_dim
 where ss_item_sk = i_item_sk
   and d_date in (select d_date
                  from date_dim
                  where d_week_seq = (select d_week_seq 
                                      from date_dim
                                      where d_date = '1998-02-19'))
   and ss_sold_date_sk   = d_date_sk
 group by i_item_id),
 cs_items as
 (select i_item_id item_id
        ,sum(cs_ext_sales_price) cs_item_rev
  from catalog_sales
      ,item
      ,date_dim
 where cs_item_sk = i_item_sk
  and  d_date in (select d_date
                  from date_dim
                  where d_week_seq = (select d_week_seq 
                                      from date_dim
                                      where d_date = '1998-02-19'))
  and  cs_sold_date_sk = d_date_sk
 group by i_item_id),
 ws_items as
 (select i_item_id item_id
        ,sum(ws_ext_sales_price) ws_item_rev
  from web_sales
      ,item
      ,date_dim
 where ws_item_sk = i_item_sk
  and  d_date in (select d_date
                  from date_dim
                  where d_week_seq =(select d_week_seq 
                                     from date_dim
                                     where d_date = '1998-02-19'))
  and ws_sold_date_sk   = d_date_sk
 group by i_item_id)
  select  ss_items.item_id
       ,ss_item_rev
       ,ss_item_rev/(ss_item_rev+cs_item_rev+ws_item_rev)/3 * 100 ss_dev
       ,cs_item_rev
       ,cs_item_rev/(ss_item_rev+cs_item_rev+ws_item_rev)/3 * 100 cs_dev
       ,ws_item_rev
       ,ws_item_rev/(ss_item_rev+cs_item_rev+ws_item_rev)/3 * 100 ws_dev
       ,(ss_item_rev+cs_item_rev+ws_item_rev)/3 average
 from ss_items,cs_items,ws_items
 where ss_items.item_id=cs_items.item_id
   and ss_items.item_id=ws_items.item_id 
   and ss_item_rev between 0.9 * cs_item_rev and 1.1 * cs_item_rev
   and ss_item_rev between 0.9 * ws_item_rev and 1.1 * ws_item_rev
   and cs_item_rev between 0.9 * ss_item_rev and 1.1 * ss_item_rev
   and cs_item_rev between 0.9 * ws_item_rev and 1.1 * ws_item_rev
   and ws_item_rev between 0.9 * ss_item_rev and 1.1 * ss_item_rev
   and ws_item_rev between 0.9 * cs_item_rev and 1.1 * cs_item_rev
 order by item_id
         ,ss_item_rev
 limit 100
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 11 (BROADCAST_EDGE), Reducer 25 (BROADCAST_EDGE)
Map 33 <- Reducer 16 (BROADCAST_EDGE), Reducer 26 (BROADCAST_EDGE)
Map 35 <- Reducer 21 (BROADCAST_EDGE), Reducer 27 (BROADCAST_EDGE)
Reducer 10 <- Map 9 (SIMPLE_EDGE)
Reducer 11 <- Reducer 10 (CUSTOM_SIMPLE_EDGE)
Reducer 12 <- Reducer 10 (SIMPLE_EDGE), Reducer 34 (SIMPLE_EDGE)
Reducer 13 <- Reducer 12 (SIMPLE_EDGE)
Reducer 14 <- Reducer 13 (SIMPLE_EDGE), Reducer 24 (ONE_TO_ONE_EDGE)
Reducer 15 <- Reducer 14 (SIMPLE_EDGE)
Reducer 16 <- Reducer 10 (CUSTOM_SIMPLE_EDGE)
Reducer 17 <- Reducer 10 (SIMPLE_EDGE), Reducer 36 (SIMPLE_EDGE)
Reducer 18 <- Reducer 17 (SIMPLE_EDGE)
Reducer 19 <- Reducer 18 (SIMPLE_EDGE), Reducer 24 (ONE_TO_ONE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE)
Reducer 20 <- Reducer 19 (SIMPLE_EDGE)
Reducer 21 <- Reducer 10 (CUSTOM_SIMPLE_EDGE)
Reducer 23 <- Map 22 (SIMPLE_EDGE), Reducer 31 (SIMPLE_EDGE)
Reducer 24 <- Reducer 23 (SIMPLE_EDGE)
Reducer 25 <- Reducer 24 (CUSTOM_SIMPLE_EDGE)
Reducer 26 <- Reducer 24 (CUSTOM_SIMPLE_EDGE)
Reducer 27 <- Reducer 24 (CUSTOM_SIMPLE_EDGE)
Reducer 29 <- Map 28 (CUSTOM_SIMPLE_EDGE)
Reducer 3 <- Reducer 10 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 30 <- Map 32 (CUSTOM_SIMPLE_EDGE), Reducer 29 (CUSTOM_SIMPLE_EDGE)
Reducer 31 <- Map 32 (SIMPLE_EDGE), Reducer 30 (SIMPLE_EDGE)
Reducer 34 <- Map 33 (SIMPLE_EDGE)
Reducer 36 <- Map 35 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 24 (ONE_TO_ONE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 15 (ONE_TO_ONE_EDGE), Reducer 20 (ONE_TO_ONE_EDGE), Reducer 6 (ONE_TO_ONE_EDGE)
Reducer 8 <- Reducer 7 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 8 vectorized
      File Output Operator [FS_569]
        Limit [LIM_568] (rows=100 width=88)
          Number of rows:100
          Select Operator [SEL_567] (rows=360 width=88)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
          <-Reducer 7 [SIMPLE_EDGE]
            SHUFFLE [RS_218]
              Select Operator [SEL_217] (rows=360 width=88)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                Filter Operator [FIL_211] (rows=360 width=88)
                  predicate:(_col1 BETWEEN (0.9 * _col3) AND (1.1 * _col3) and _col1 BETWEEN (0.9 * _col5) AND (1.1 * _col5) and _col3 BETWEEN (0.9 * _col1) AND (1.1 * _col1) and _col3 BETWEEN (0.9 * _col5) AND (1.1 * _col5) and _col5 BETWEEN (0.9 * _col1) AND (1.1 * _col1) and _col5 BETWEEN (0.9 * _col3) AND (1.1 * _col3))
                  Merge Join Operator [MERGEJOIN_474] (rows=191662556 width=88)
                    Conds:RS_536._col0=RS_551._col0(Inner),RS_536._col0=RS_566._col0(Inner),Output:["_col0","_col1","_col3","_col5"]
                  <-Reducer 15 [ONE_TO_ONE_EDGE] vectorized
                    FORWARD [RS_551]
                      PartitionCols:_col0
                      Group By Operator [GBY_550] (rows=87119342 width=88)
                        Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                      <-Reducer 14 [SIMPLE_EDGE]
                        SHUFFLE [RS_135]
                          PartitionCols:_col0
                          Group By Operator [GBY_134] (rows=174238685 width=88)
                            Output:["_col0","_col1"],aggregations:["sum(_col5)"],keys:_col1
                            Select Operator [SEL_132] (rows=174238685 width=88)
                              Output:["_col1","_col5"]
                              Merge Join Operator [MERGEJOIN_472] (rows=174238685 width=88)
                                Conds:RS_549._col0=RS_514._col0(Inner),Output:["_col1","_col2","_col4"]
                              <-Reducer 24 [ONE_TO_ONE_EDGE] vectorized
                                FORWARD [RS_514]
                                  PartitionCols:_col0
                                  Group By Operator [GBY_511] (rows=44194 width=1119)
                                    Output:["_col0","_col1"],aggregations:["count(VALUE._col0)"],keys:KEY._col0
                                  <-Reducer 23 [SIMPLE_EDGE]
                                    SHUFFLE [RS_57]
                                      PartitionCols:_col0
                                      Group By Operator [GBY_56] (rows=88388 width=1119)
                                        Output:["_col0","_col1"],aggregations:["count()"],keys:_col0
                                        Merge Join Operator [MERGEJOIN_461] (rows=88388 width=1119)
                                          Conds:RS_496._col1=RS_53._col0(Left Semi),Output:["_col0"]
                                        <-Map 22 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_496]
                                            PartitionCols:_col1
                                            Select Operator [SEL_495] (rows=73049 width=1119)
                                              Output:["_col0","_col1"]
                                              Filter Operator [FIL_494] (rows=73049 width=1119)
                                                predicate:(d_date is not null and d_date_sk is not null)
                                                TableScan [TS_25] (rows=73049 width=1119)
                                                  default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_date"]
                                        <-Reducer 31 [SIMPLE_EDGE]
                                          SHUFFLE [RS_53]
                                            PartitionCols:_col0
                                            Group By Operator [GBY_51] (rows=80353 width=1119)
                                              Output:["_col0"],keys:_col0
                                              Select Operator [SEL_49] (rows=80353 width=1119)
                                                Output:["_col0"]
                                                Merge Join Operator [MERGEJOIN_460] (rows=80353 width=1119)
                                                  Conds:RS_46._col1=RS_509._col1(Inner),Output:["_col2"]
                                                <-Map 32 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_509]
                                                    PartitionCols:_col1
                                                    Select Operator [SEL_507] (rows=73049 width=1119)
                                                      Output:["_col0","_col1"]
                                                      Filter Operator [FIL_505] (rows=73049 width=1119)
                                                        predicate:(d_date is not null and d_week_seq is not null)
                                                        TableScan [TS_40] (rows=73049 width=1119)
                                                          default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_date","d_week_seq"]
                                                <-Reducer 30 [SIMPLE_EDGE]
                                                  SHUFFLE [RS_46]
                                                    PartitionCols:_col1
                                                    Merge Join Operator [MERGEJOIN_459] (rows=36524 width=1128)
                                                      Conds:(Inner),Output:["_col1"]
                                                    <-Map 32 [CUSTOM_SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_510]
                                                        Select Operator [SEL_508] (rows=36524 width=1119)
                                                          Output:["_col0"]
                                                          Filter Operator [FIL_506] (rows=36524 width=1119)
                                                            predicate:((d_date = '1998-02-19') and d_week_seq is not null)
                                                             Please refer to the previous TableScan [TS_40]
                                                    <-Reducer 29 [CUSTOM_SIMPLE_EDGE] vectorized
                                                      PARTITION_ONLY_SHUFFLE [RS_504]
                                                        Select Operator [SEL_503] (rows=1 width=8)
                                                          Filter Operator [FIL_502] (rows=1 width=8)
                                                            predicate:(sq_count_check(_col0) <= 1)
                                                            Group By Operator [GBY_501] (rows=1 width=8)
                                                              Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                                            <-Map 28 [CUSTOM_SIMPLE_EDGE] vectorized
                                                              PARTITION_ONLY_SHUFFLE [RS_500]
                                                                Group By Operator [GBY_499] (rows=1 width=8)
                                                                  Output:["_col0"],aggregations:["count()"]
                                                                  Select Operator [SEL_498] (rows=36524 width=1119)
                                                                    Filter Operator [FIL_497] (rows=36524 width=1119)
                                                                      predicate:(d_date = '1998-02-19')
                                                                      TableScan [TS_28] (rows=73049 width=1119)
                                                                        default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_date"]
                              <-Reducer 13 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_549]
                                  PartitionCols:_col0
                                  Group By Operator [GBY_548] (rows=158398802 width=88)
                                    Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1
                                  <-Reducer 12 [SIMPLE_EDGE]
                                    SHUFFLE [RS_91]
                                      PartitionCols:_col0, _col1
                                      Group By Operator [GBY_90] (rows=316797605 width=88)
                                        Output:["_col0","_col1","_col2"],aggregations:["sum(_col6)"],keys:_col0, _col4
                                        Select Operator [SEL_88] (rows=316797605 width=88)
                                          Output:["_col0","_col4","_col6"]
                                          Merge Join Operator [MERGEJOIN_469] (rows=316797605 width=88)
                                            Conds:RS_547._col1=RS_482._col0(Inner),Output:["_col0","_col2","_col4","_col5"]
                                          <-Reducer 10 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_482]
                                              PartitionCols:_col0
                                              Group By Operator [GBY_479] (rows=231000 width=1436)
                                                Output:["_col0","_col1","_col2"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1
                                              <-Map 9 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_478]
                                                  PartitionCols:_col0, _col1
                                                  Group By Operator [GBY_477] (rows=462000 width=1436)
                                                    Output:["_col0","_col1","_col2"],aggregations:["count()"],keys:_col0, _col1
                                                    Select Operator [SEL_476] (rows=462000 width=1436)
                                                      Output:["_col0","_col1"]
                                                      Filter Operator [FIL_475] (rows=462000 width=1436)
                                                        predicate:(i_item_id is not null and i_item_sk is not null)
                                                        TableScan [TS_8] (rows=462000 width=1436)
                                                          default@item,item,Tbl:COMPLETE,Col:NONE,Output:["i_item_sk","i_item_id"]
                                          <-Reducer 34 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_547]
                                              PartitionCols:_col1
                                              Select Operator [SEL_546] (rows=287997817 width=88)
                                                Output:["_col0","_col1","_col2"]
                                                Group By Operator [GBY_545] (rows=287997817 width=88)
                                                  Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1
                                                <-Map 33 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_544]
                                                    PartitionCols:_col0, _col1
                                                    Group By Operator [GBY_543] (rows=575995635 width=88)
                                                      Output:["_col0","_col1","_col2"],aggregations:["sum(_col2)"],keys:_col1, _col0
                                                      Select Operator [SEL_542] (rows=575995635 width=88)
                                                        Output:["_col0","_col1","_col2"]
                                                        Filter Operator [FIL_541] (rows=575995635 width=88)
                                                          predicate:((ss_item_sk BETWEEN DynamicValue(RS_86_item_i_item_sk_min) AND DynamicValue(RS_86_item_i_item_sk_max) and in_bloom_filter(ss_item_sk, DynamicValue(RS_86_item_i_item_sk_bloom_filter))) and (ss_sold_date_sk BETWEEN DynamicValue(RS_130_date_dim_d_date_sk_min) AND DynamicValue(RS_130_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_130_date_dim_d_date_sk_bloom_filter))) and ss_item_sk is not null and ss_sold_date_sk is not null)
                                                          TableScan [TS_69] (rows=575995635 width=88)
                                                            default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_date_sk","ss_item_sk","ss_ext_sales_price"]
                                                          <-Reducer 16 [BROADCAST_EDGE] vectorized
                                                            BROADCAST [RS_538]
                                                              Group By Operator [GBY_537] (rows=1 width=16)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                              <-Reducer 10 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                SHUFFLE [RS_490]
                                                                  Group By Operator [GBY_487] (rows=1 width=16)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                    Select Operator [SEL_483] (rows=231000 width=1436)
                                                                      Output:["_col0"]
                                                                       Please refer to the previous Group By Operator [GBY_479]
                                                          <-Reducer 26 [BROADCAST_EDGE] vectorized
                                                            BROADCAST [RS_540]
                                                              Group By Operator [GBY_539] (rows=1 width=16)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                              <-Reducer 24 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                FORWARD [RS_522]
                                                                  Group By Operator [GBY_519] (rows=1 width=16)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                    Select Operator [SEL_515] (rows=44194 width=1119)
                                                                      Output:["_col0"]
                                                                       Please refer to the previous Group By Operator [GBY_511]
                  <-Reducer 20 [ONE_TO_ONE_EDGE] vectorized
                    FORWARD [RS_566]
                      PartitionCols:_col0
                      Group By Operator [GBY_565] (rows=21780404 width=135)
                        Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                      <-Reducer 19 [SIMPLE_EDGE]
                        SHUFFLE [RS_204]
                          PartitionCols:_col0
                          Group By Operator [GBY_203] (rows=43560808 width=135)
                            Output:["_col0","_col1"],aggregations:["sum(_col5)"],keys:_col1
                            Select Operator [SEL_201] (rows=43560808 width=135)
                              Output:["_col1","_col5"]
                              Merge Join Operator [MERGEJOIN_473] (rows=43560808 width=135)
                                Conds:RS_564._col0=RS_516._col0(Inner),Output:["_col1","_col2","_col4"]
                              <-Reducer 24 [ONE_TO_ONE_EDGE] vectorized
                                FORWARD [RS_516]
                                  PartitionCols:_col0
                                   Please refer to the previous Group By Operator [GBY_511]
                              <-Reducer 18 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_564]
                                  PartitionCols:_col0
                                  Group By Operator [GBY_563] (rows=39600734 width=135)
                                    Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1
                                  <-Reducer 17 [SIMPLE_EDGE]
                                    SHUFFLE [RS_160]
                                      PartitionCols:_col0, _col1
                                      Group By Operator [GBY_159] (rows=79201469 width=135)
                                        Output:["_col0","_col1","_col2"],aggregations:["sum(_col6)"],keys:_col0, _col4
                                        Select Operator [SEL_157] (rows=79201469 width=135)
                                          Output:["_col0","_col4","_col6"]
                                          Merge Join Operator [MERGEJOIN_470] (rows=79201469 width=135)
                                            Conds:RS_562._col1=RS_484._col0(Inner),Output:["_col0","_col2","_col4","_col5"]
                                          <-Reducer 10 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_484]
                                              PartitionCols:_col0
                                               Please refer to the previous Group By Operator [GBY_479]
                                          <-Reducer 36 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_562]
                                              PartitionCols:_col1
                                              Select Operator [SEL_561] (rows=72001334 width=135)
                                                Output:["_col0","_col1","_col2"]
                                                Group By Operator [GBY_560] (rows=72001334 width=135)
                                                  Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1
                                                <-Map 35 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_559]
                                                    PartitionCols:_col0, _col1
                                                    Group By Operator [GBY_558] (rows=144002668 width=135)
                                                      Output:["_col0","_col1","_col2"],aggregations:["sum(_col2)"],keys:_col1, _col0
                                                      Select Operator [SEL_557] (rows=144002668 width=135)
                                                        Output:["_col0","_col1","_col2"]
                                                        Filter Operator [FIL_556] (rows=144002668 width=135)
                                                          predicate:((ws_item_sk BETWEEN DynamicValue(RS_155_item_i_item_sk_min) AND DynamicValue(RS_155_item_i_item_sk_max) and in_bloom_filter(ws_item_sk, DynamicValue(RS_155_item_i_item_sk_bloom_filter))) and (ws_sold_date_sk BETWEEN DynamicValue(RS_199_date_dim_d_date_sk_min) AND DynamicValue(RS_199_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_199_date_dim_d_date_sk_bloom_filter))) and ws_item_sk is not null and ws_sold_date_sk is not null)
                                                          TableScan [TS_138] (rows=144002668 width=135)
                                                            default@web_sales,web_sales,Tbl:COMPLETE,Col:NONE,Output:["ws_sold_date_sk","ws_item_sk","ws_ext_sales_price"]
                                                          <-Reducer 21 [BROADCAST_EDGE] vectorized
                                                            BROADCAST [RS_553]
                                                              Group By Operator [GBY_552] (rows=1 width=16)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                              <-Reducer 10 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                SHUFFLE [RS_491]
                                                                  Group By Operator [GBY_488] (rows=1 width=16)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                    Select Operator [SEL_485] (rows=231000 width=1436)
                                                                      Output:["_col0"]
                                                                       Please refer to the previous Group By Operator [GBY_479]
                                                          <-Reducer 27 [BROADCAST_EDGE] vectorized
                                                            BROADCAST [RS_555]
                                                              Group By Operator [GBY_554] (rows=1 width=16)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                              <-Reducer 24 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                FORWARD [RS_523]
                                                                  Group By Operator [GBY_520] (rows=1 width=16)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                    Select Operator [SEL_517] (rows=44194 width=1119)
                                                                      Output:["_col0"]
                                                                       Please refer to the previous Group By Operator [GBY_511]
                  <-Reducer 6 [ONE_TO_ONE_EDGE] vectorized
                    FORWARD [RS_536]
                      PartitionCols:_col0
                      Group By Operator [GBY_535] (rows=43558464 width=135)
                        Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                      <-Reducer 5 [SIMPLE_EDGE]
                        SHUFFLE [RS_66]
                          PartitionCols:_col0
                          Group By Operator [GBY_65] (rows=87116928 width=135)
                            Output:["_col0","_col1"],aggregations:["sum(_col5)"],keys:_col1
                            Select Operator [SEL_63] (rows=87116928 width=135)
                              Output:["_col1","_col5"]
                              Merge Join Operator [MERGEJOIN_471] (rows=87116928 width=135)
                                Conds:RS_534._col0=RS_512._col0(Inner),Output:["_col1","_col2","_col4"]
                              <-Reducer 24 [ONE_TO_ONE_EDGE] vectorized
                                FORWARD [RS_512]
                                  PartitionCols:_col0
                                   Please refer to the previous Group By Operator [GBY_511]
                              <-Reducer 4 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_534]
                                  PartitionCols:_col0
                                  Group By Operator [GBY_533] (rows=79197206 width=135)
                                    Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1
                                  <-Reducer 3 [SIMPLE_EDGE]
                                    SHUFFLE [RS_22]
                                      PartitionCols:_col0, _col1
                                      Group By Operator [GBY_21] (rows=158394413 width=135)
                                        Output:["_col0","_col1","_col2"],aggregations:["sum(_col6)"],keys:_col0, _col4
                                        Select Operator [SEL_19] (rows=158394413 width=135)
                                          Output:["_col0","_col4","_col6"]
                                          Merge Join Operator [MERGEJOIN_468] (rows=158394413 width=135)
                                            Conds:RS_532._col1=RS_480._col0(Inner),Output:["_col0","_col2","_col4","_col5"]
                                          <-Reducer 10 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_480]
                                              PartitionCols:_col0
                                               Please refer to the previous Group By Operator [GBY_479]
                                          <-Reducer 2 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_532]
                                              PartitionCols:_col1
                                              Select Operator [SEL_531] (rows=143994918 width=135)
                                                Output:["_col0","_col1","_col2"]
                                                Group By Operator [GBY_530] (rows=143994918 width=135)
                                                  Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1
                                                <-Map 1 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_529]
                                                    PartitionCols:_col0, _col1
                                                    Group By Operator [GBY_528] (rows=287989836 width=135)
                                                      Output:["_col0","_col1","_col2"],aggregations:["sum(_col2)"],keys:_col1, _col0
                                                      Select Operator [SEL_527] (rows=287989836 width=135)
                                                        Output:["_col0","_col1","_col2"]
                                                        Filter Operator [FIL_526] (rows=287989836 width=135)
                                                          predicate:((cs_item_sk BETWEEN DynamicValue(RS_17_item_i_item_sk_min) AND DynamicValue(RS_17_item_i_item_sk_max) and in_bloom_filter(cs_item_sk, DynamicValue(RS_17_item_i_item_sk_bloom_filter))) and (cs_sold_date_sk BETWEEN DynamicValue(RS_61_date_dim_d_date_sk_min) AND DynamicValue(RS_61_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_61_date_dim_d_date_sk_bloom_filter))) and cs_item_sk is not null and cs_sold_date_sk is not null)
                                                          TableScan [TS_0] (rows=287989836 width=135)
                                                            default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:NONE,Output:["cs_sold_date_sk","cs_item_sk","cs_ext_sales_price"]
                                                          <-Reducer 11 [BROADCAST_EDGE] vectorized
                                                            BROADCAST [RS_493]
                                                              Group By Operator [GBY_492] (rows=1 width=16)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                              <-Reducer 10 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                SHUFFLE [RS_489]
                                                                  Group By Operator [GBY_486] (rows=1 width=16)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                    Select Operator [SEL_481] (rows=231000 width=1436)
                                                                      Output:["_col0"]
                                                                       Please refer to the previous Group By Operator [GBY_479]
                                                          <-Reducer 25 [BROADCAST_EDGE] vectorized
                                                            BROADCAST [RS_525]
                                                              Group By Operator [GBY_524] (rows=1 width=16)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                              <-Reducer 24 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                FORWARD [RS_521]
                                                                  Group By Operator [GBY_518] (rows=1 width=16)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                    Select Operator [SEL_513] (rows=44194 width=1119)
                                                                      Output:["_col0"]
                                                                       Please refer to the previous Group By Operator [GBY_511]

