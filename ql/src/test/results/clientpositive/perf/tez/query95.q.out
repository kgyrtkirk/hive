PREHOOK: query: explain
with ws_wh as
(select ws1.ws_order_number,ws1.ws_warehouse_sk wh1,ws2.ws_warehouse_sk wh2
 from web_sales ws1,web_sales ws2
 where ws1.ws_order_number = ws2.ws_order_number
   and ws1.ws_warehouse_sk <> ws2.ws_warehouse_sk)
 select  
   count(distinct ws_order_number) as `order count`
  ,sum(ws_ext_ship_cost) as `total shipping cost`
  ,sum(ws_net_profit) as `total net profit`
from
   web_sales ws1
  ,date_dim
  ,customer_address
  ,web_site
where
    d_date between '1999-5-01' and 
           (cast('1999-5-01' as date) + 60 days)
and ws1.ws_ship_date_sk = d_date_sk
and ws1.ws_ship_addr_sk = ca_address_sk
and ca_state = 'TX'
and ws1.ws_web_site_sk = web_site_sk
and web_company_name = 'pri'
and ws1.ws_order_number in (select ws_order_number
                            from ws_wh)
and ws1.ws_order_number in (select wr_order_number
                            from web_returns,ws_wh
                            where wr_order_number = ws_wh.ws_order_number)
order by count(distinct ws_order_number)
limit 100
PREHOOK: type: QUERY
POSTHOOK: query: explain
with ws_wh as
(select ws1.ws_order_number,ws1.ws_warehouse_sk wh1,ws2.ws_warehouse_sk wh2
 from web_sales ws1,web_sales ws2
 where ws1.ws_order_number = ws2.ws_order_number
   and ws1.ws_warehouse_sk <> ws2.ws_warehouse_sk)
 select  
   count(distinct ws_order_number) as `order count`
  ,sum(ws_ext_ship_cost) as `total shipping cost`
  ,sum(ws_net_profit) as `total net profit`
from
   web_sales ws1
  ,date_dim
  ,customer_address
  ,web_site
where
    d_date between '1999-5-01' and 
           (cast('1999-5-01' as date) + 60 days)
and ws1.ws_ship_date_sk = d_date_sk
and ws1.ws_ship_addr_sk = ca_address_sk
and ca_state = 'TX'
and ws1.ws_web_site_sk = web_site_sk
and web_company_name = 'pri'
and ws1.ws_order_number in (select ws_order_number
                            from ws_wh)
and ws1.ws_order_number in (select wr_order_number
                            from web_returns,ws_wh
                            where wr_order_number = ws_wh.ws_order_number)
order by count(distinct ws_order_number)
limit 100
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 13 (BROADCAST_EDGE)
Map 10 <- Reducer 13 (BROADCAST_EDGE)
Map 14 <- Reducer 13 (BROADCAST_EDGE), Reducer 20 (BROADCAST_EDGE), Reducer 22 (BROADCAST_EDGE), Reducer 24 (BROADCAST_EDGE)
Reducer 12 <- Map 11 (SIMPLE_EDGE)
Reducer 13 <- Reducer 12 (CUSTOM_SIMPLE_EDGE)
Reducer 15 <- Map 14 (SIMPLE_EDGE), Map 19 (SIMPLE_EDGE)
Reducer 16 <- Map 21 (SIMPLE_EDGE), Reducer 15 (SIMPLE_EDGE)
Reducer 17 <- Map 23 (SIMPLE_EDGE), Reducer 16 (SIMPLE_EDGE)
Reducer 18 <- Reducer 17 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 10 (SIMPLE_EDGE)
Reducer 20 <- Map 19 (CUSTOM_SIMPLE_EDGE)
Reducer 22 <- Map 21 (CUSTOM_SIMPLE_EDGE)
Reducer 24 <- Map 23 (CUSTOM_SIMPLE_EDGE)
Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 12 (ONE_TO_ONE_EDGE), Reducer 3 (ONE_TO_ONE_EDGE)
Reducer 5 <- Reducer 4 (ONE_TO_ONE_EDGE), Reducer 9 (ONE_TO_ONE_EDGE)
Reducer 6 <- Reducer 5 (CUSTOM_SIMPLE_EDGE)
Reducer 7 <- Reducer 6 (SIMPLE_EDGE)
Reducer 8 <- Reducer 2 (SIMPLE_EDGE)
Reducer 9 <- Reducer 18 (ONE_TO_ONE_EDGE), Reducer 8 (ONE_TO_ONE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 7 vectorized
      File Output Operator [FS_298]
        Limit [LIM_297] (rows=1 width=232)
          Number of rows:100
          Select Operator [SEL_296] (rows=1 width=232)
            Output:["_col0","_col1","_col2"]
          <-Reducer 6 [SIMPLE_EDGE]
            SHUFFLE [RS_80]
              Select Operator [SEL_79] (rows=1 width=232)
                Output:["_col1","_col2","_col3"]
                Group By Operator [GBY_78] (rows=1 width=232)
                  Output:["_col0","_col1","_col2"],aggregations:["$sum0(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)"]
                <-Reducer 5 [CUSTOM_SIMPLE_EDGE]
                  PARTITION_ONLY_SHUFFLE [RS_77]
                    Group By Operator [GBY_76] (rows=1 width=232)
                      Output:["_col0","_col1","_col2"],aggregations:["$sum0(_col2)","sum(_col3)","sum(_col4)"]
                      Merge Join Operator [MERGEJOIN_246] (rows=115958879 width=135)
                        Conds:RS_72._col0=RS_73._col0(Inner),Output:["_col2","_col3","_col4"]
                      <-Reducer 4 [ONE_TO_ONE_EDGE]
                        FORWARD [RS_72]
                          PartitionCols:_col0
                          Select Operator [SEL_26] (rows=87121617 width=135)
                            Output:["_col0"]
                            Merge Join Operator [MERGEJOIN_244] (rows=87121617 width=135)
                              Conds:RS_266._col0=RS_251._col0(Inner),Output:["_col1"]
                            <-Reducer 12 [ONE_TO_ONE_EDGE] vectorized
                              FORWARD [RS_251]
                                PartitionCols:_col0
                                Group By Operator [GBY_250] (rows=7199233 width=92)
                                  Output:["_col0"],keys:KEY._col0
                                <-Map 11 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_249]
                                    PartitionCols:_col0
                                    Group By Operator [GBY_248] (rows=14398467 width=92)
                                      Output:["_col0"],keys:wr_order_number
                                      Filter Operator [FIL_247] (rows=14398467 width=92)
                                        predicate:wr_order_number is not null
                                        TableScan [TS_16] (rows=14398467 width=92)
                                          default@web_returns,web_returns,Tbl:COMPLETE,Col:NONE,Output:["wr_order_number"]
                            <-Reducer 3 [ONE_TO_ONE_EDGE] vectorized
                              FORWARD [RS_266]
                                PartitionCols:_col0
                                Group By Operator [GBY_265] (rows=79201469 width=135)
                                  Output:["_col0"],keys:KEY._col0
                                <-Reducer 2 [SIMPLE_EDGE]
                                  SHUFFLE [RS_13]
                                    PartitionCols:_col0
                                    Group By Operator [GBY_12] (rows=158402938 width=135)
                                      Output:["_col0"],keys:_col0
                                      Select Operator [SEL_10] (rows=158402938 width=135)
                                        Output:["_col0"]
                                        Filter Operator [FIL_9] (rows=158402938 width=135)
                                          predicate:(_col0 <> _col2)
                                          Merge Join Operator [MERGEJOIN_239] (rows=158402938 width=135)
                                            Conds:RS_261._col1=RS_264._col1(Inner),Output:["_col0","_col1","_col2"]
                                          <-Map 1 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_261]
                                              PartitionCols:_col1
                                              Select Operator [SEL_260] (rows=144002668 width=135)
                                                Output:["_col0","_col1"]
                                                Filter Operator [FIL_259] (rows=144002668 width=135)
                                                  predicate:((ws_order_number BETWEEN DynamicValue(RS_24_web_returns_wr_order_number_min) AND DynamicValue(RS_24_web_returns_wr_order_number_max) and in_bloom_filter(ws_order_number, DynamicValue(RS_24_web_returns_wr_order_number_bloom_filter))) and ws_order_number is not null)
                                                  TableScan [TS_0] (rows=144002668 width=135)
                                                    default@web_sales,ws1,Tbl:COMPLETE,Col:NONE,Output:["ws_warehouse_sk","ws_order_number"]
                                                  <-Reducer 13 [BROADCAST_EDGE] vectorized
                                                    BROADCAST [RS_256]
                                                      Group By Operator [GBY_255] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=7199233)"]
                                                      <-Reducer 12 [CUSTOM_SIMPLE_EDGE] vectorized
                                                        FORWARD [RS_254]
                                                          Group By Operator [GBY_253] (rows=1 width=12)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=7199233)"]
                                                            Select Operator [SEL_252] (rows=7199233 width=92)
                                                              Output:["_col0"]
                                                               Please refer to the previous Group By Operator [GBY_250]
                                          <-Map 10 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_264]
                                              PartitionCols:_col1
                                              Select Operator [SEL_263] (rows=144002668 width=135)
                                                Output:["_col0","_col1"]
                                                Filter Operator [FIL_262] (rows=144002668 width=135)
                                                  predicate:((ws_order_number BETWEEN DynamicValue(RS_24_web_returns_wr_order_number_min) AND DynamicValue(RS_24_web_returns_wr_order_number_max) and in_bloom_filter(ws_order_number, DynamicValue(RS_24_web_returns_wr_order_number_bloom_filter))) and ws_order_number is not null)
                                                  TableScan [TS_3] (rows=144002668 width=135)
                                                    default@web_sales,ws2,Tbl:COMPLETE,Col:NONE,Output:["ws_warehouse_sk","ws_order_number"]
                                                  <-Reducer 13 [BROADCAST_EDGE] vectorized
                                                    BROADCAST [RS_257]
                                                       Please refer to the previous Group By Operator [GBY_255]
                      <-Reducer 9 [ONE_TO_ONE_EDGE]
                        FORWARD [RS_73]
                          PartitionCols:_col0
                          Select Operator [SEL_71] (rows=105417161 width=135)
                            Output:["_col0","_col1","_col2","_col3"]
                            Merge Join Operator [MERGEJOIN_245] (rows=105417161 width=135)
                              Conds:RS_268._col0=RS_69._col0(Inner),Output:["_col1","_col2","_col3","_col4"]
                            <-Reducer 18 [ONE_TO_ONE_EDGE]
                              FORWARD [RS_69]
                                PartitionCols:_col0
                                Group By Operator [GBY_66] (rows=95833781 width=135)
                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(DISTINCT KEY._col1:0._col0)","sum(VALUE._col1)","sum(VALUE._col2)"],keys:KEY._col0
                                <-Reducer 17 [SIMPLE_EDGE]
                                  SHUFFLE [RS_65]
                                    PartitionCols:_col0
                                    Group By Operator [GBY_64] (rows=191667562 width=135)
                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["count(DISTINCT _col3)","sum(_col4)","sum(_col5)"],keys:_col3
                                      Merge Join Operator [MERGEJOIN_243] (rows=191667562 width=135)
                                        Conds:RS_60._col2=RS_287._col0(Inner),Output:["_col3","_col4","_col5"]
                                      <-Map 23 [SIMPLE_EDGE] vectorized
                                        PARTITION_ONLY_SHUFFLE [RS_287]
                                          PartitionCols:_col0
                                          Select Operator [SEL_286] (rows=42 width=1850)
                                            Output:["_col0"]
                                            Filter Operator [FIL_285] (rows=42 width=1850)
                                              predicate:((web_company_name = 'pri') and web_site_sk is not null)
                                              TableScan [TS_51] (rows=84 width=1850)
                                                default@web_site,web_site,Tbl:COMPLETE,Col:NONE,Output:["web_site_sk","web_company_name"]
                                      <-Reducer 16 [SIMPLE_EDGE]
                                        SHUFFLE [RS_60]
                                          PartitionCols:_col2
                                          Merge Join Operator [MERGEJOIN_242] (rows=174243235 width=135)
                                            Conds:RS_57._col1=RS_279._col0(Inner),Output:["_col2","_col3","_col4","_col5"]
                                          <-Map 21 [SIMPLE_EDGE] vectorized
                                            PARTITION_ONLY_SHUFFLE [RS_279]
                                              PartitionCols:_col0
                                              Select Operator [SEL_278] (rows=20000000 width=1014)
                                                Output:["_col0"]
                                                Filter Operator [FIL_277] (rows=20000000 width=1014)
                                                  predicate:((ca_state = 'TX') and ca_address_sk is not null)
                                                  TableScan [TS_48] (rows=40000000 width=1014)
                                                    default@customer_address,customer_address,Tbl:COMPLETE,Col:NONE,Output:["ca_address_sk","ca_state"]
                                          <-Reducer 15 [SIMPLE_EDGE]
                                            SHUFFLE [RS_57]
                                              PartitionCols:_col1
                                              Merge Join Operator [MERGEJOIN_241] (rows=158402938 width=135)
                                                Conds:RS_295._col0=RS_271._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5"]
                                              <-Map 19 [SIMPLE_EDGE] vectorized
                                                PARTITION_ONLY_SHUFFLE [RS_271]
                                                  PartitionCols:_col0
                                                  Select Operator [SEL_270] (rows=8116 width=1119)
                                                    Output:["_col0"]
                                                    Filter Operator [FIL_269] (rows=8116 width=1119)
                                                      predicate:(CAST( d_date AS TIMESTAMP) BETWEEN TIMESTAMP'1999-05-01 00:00:00' AND TIMESTAMP'1999-06-30 00:00:00' and d_date_sk is not null)
                                                      TableScan [TS_45] (rows=73049 width=1119)
                                                        default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_date"]
                                              <-Map 14 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_295]
                                                  PartitionCols:_col0
                                                  Select Operator [SEL_294] (rows=144002668 width=135)
                                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                                    Filter Operator [FIL_293] (rows=144002668 width=135)
                                                      predicate:((ws_order_number BETWEEN DynamicValue(RS_24_web_returns_wr_order_number_min) AND DynamicValue(RS_24_web_returns_wr_order_number_max) and in_bloom_filter(ws_order_number, DynamicValue(RS_24_web_returns_wr_order_number_bloom_filter))) and (ws_ship_addr_sk BETWEEN DynamicValue(RS_58_customer_address_ca_address_sk_min) AND DynamicValue(RS_58_customer_address_ca_address_sk_max) and in_bloom_filter(ws_ship_addr_sk, DynamicValue(RS_58_customer_address_ca_address_sk_bloom_filter))) and (ws_ship_date_sk BETWEEN DynamicValue(RS_55_date_dim_d_date_sk_min) AND DynamicValue(RS_55_date_dim_d_date_sk_max) and in_bloom_filter(ws_ship_date_sk, DynamicValue(RS_55_date_dim_d_date_sk_bloom_filter))) and (ws_web_site_sk BETWEEN DynamicValue(RS_61_web_site_web_site_sk_min) AND DynamicValue(RS_61_web_site_web_site_sk_max) and in_bloom_filter(ws_web_site_sk, DynamicValue(RS_61_web_site_web_site_sk_bloom_filter))) and ws_order_number is not null and ws_ship_addr_sk is not null and ws_ship_date_sk is not null and ws_web_site_sk is not null)
                                                      TableScan [TS_42] (rows=144002668 width=135)
                                                        default@web_sales,ws1,Tbl:COMPLETE,Col:NONE,Output:["ws_ship_date_sk","ws_ship_addr_sk","ws_web_site_sk","ws_order_number","ws_ext_ship_cost","ws_net_profit"]
                                                      <-Reducer 13 [BROADCAST_EDGE] vectorized
                                                        BROADCAST [RS_258]
                                                           Please refer to the previous Group By Operator [GBY_255]
                                                      <-Reducer 20 [BROADCAST_EDGE] vectorized
                                                        BROADCAST [RS_276]
                                                          Group By Operator [GBY_275] (rows=1 width=12)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                          <-Map 19 [CUSTOM_SIMPLE_EDGE] vectorized
                                                            PARTITION_ONLY_SHUFFLE [RS_274]
                                                              Group By Operator [GBY_273] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                Select Operator [SEL_272] (rows=8116 width=1119)
                                                                  Output:["_col0"]
                                                                   Please refer to the previous Select Operator [SEL_270]
                                                      <-Reducer 22 [BROADCAST_EDGE] vectorized
                                                        BROADCAST [RS_284]
                                                          Group By Operator [GBY_283] (rows=1 width=12)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=20000000)"]
                                                          <-Map 21 [CUSTOM_SIMPLE_EDGE] vectorized
                                                            PARTITION_ONLY_SHUFFLE [RS_282]
                                                              Group By Operator [GBY_281] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=20000000)"]
                                                                Select Operator [SEL_280] (rows=20000000 width=1014)
                                                                  Output:["_col0"]
                                                                   Please refer to the previous Select Operator [SEL_278]
                                                      <-Reducer 24 [BROADCAST_EDGE] vectorized
                                                        BROADCAST [RS_292]
                                                          Group By Operator [GBY_291] (rows=1 width=12)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                          <-Map 23 [CUSTOM_SIMPLE_EDGE] vectorized
                                                            PARTITION_ONLY_SHUFFLE [RS_290]
                                                              Group By Operator [GBY_289] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                Select Operator [SEL_288] (rows=42 width=1850)
                                                                  Output:["_col0"]
                                                                   Please refer to the previous Select Operator [SEL_286]
                            <-Reducer 8 [ONE_TO_ONE_EDGE] vectorized
                              FORWARD [RS_268]
                                PartitionCols:_col0
                                Group By Operator [GBY_267] (rows=79201469 width=135)
                                  Output:["_col0"],keys:KEY._col0
                                <-Reducer 2 [SIMPLE_EDGE]
                                  SHUFFLE [RS_39]
                                    PartitionCols:_col0
                                    Group By Operator [GBY_38] (rows=158402938 width=135)
                                      Output:["_col0"],keys:_col1
                                      Select Operator [SEL_37] (rows=158402938 width=135)
                                        Output:["_col1"]
                                         Please refer to the previous Filter Operator [FIL_9]

