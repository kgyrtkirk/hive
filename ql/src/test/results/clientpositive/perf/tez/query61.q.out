Warning: Shuffle Join MERGEJOIN[319][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 6' is a cross product
PREHOOK: query: explain
select  promotions,total,cast(promotions as decimal(15,4))/cast(total as decimal(15,4))*100
from
  (select sum(ss_ext_sales_price) promotions
   from  store_sales
        ,store
        ,promotion
        ,date_dim
        ,customer
        ,customer_address 
        ,item
   where ss_sold_date_sk = d_date_sk
   and   ss_store_sk = s_store_sk
   and   ss_promo_sk = p_promo_sk
   and   ss_customer_sk= c_customer_sk
   and   ca_address_sk = c_current_addr_sk
   and   ss_item_sk = i_item_sk 
   and   ca_gmt_offset = -7
   and   i_category = 'Electronics'
   and   (p_channel_dmail = 'Y' or p_channel_email = 'Y' or p_channel_tv = 'Y')
   and   s_gmt_offset = -7
   and   d_year = 1999
   and   d_moy  = 11) promotional_sales,
  (select sum(ss_ext_sales_price) total
   from  store_sales
        ,store
        ,date_dim
        ,customer
        ,customer_address
        ,item
   where ss_sold_date_sk = d_date_sk
   and   ss_store_sk = s_store_sk
   and   ss_customer_sk= c_customer_sk
   and   ca_address_sk = c_current_addr_sk
   and   ss_item_sk = i_item_sk
   and   ca_gmt_offset = -7
   and   i_category = 'Electronics'
   and   s_gmt_offset = -7
   and   d_year = 1999
   and   d_moy  = 11) all_sales
order by promotions, total
limit 100
PREHOOK: type: QUERY
POSTHOOK: query: explain
select  promotions,total,cast(promotions as decimal(15,4))/cast(total as decimal(15,4))*100
from
  (select sum(ss_ext_sales_price) promotions
   from  store_sales
        ,store
        ,promotion
        ,date_dim
        ,customer
        ,customer_address 
        ,item
   where ss_sold_date_sk = d_date_sk
   and   ss_store_sk = s_store_sk
   and   ss_promo_sk = p_promo_sk
   and   ss_customer_sk= c_customer_sk
   and   ca_address_sk = c_current_addr_sk
   and   ss_item_sk = i_item_sk 
   and   ca_gmt_offset = -7
   and   i_category = 'Electronics'
   and   (p_channel_dmail = 'Y' or p_channel_email = 'Y' or p_channel_tv = 'Y')
   and   s_gmt_offset = -7
   and   d_year = 1999
   and   d_moy  = 11) promotional_sales,
  (select sum(ss_ext_sales_price) total
   from  store_sales
        ,store
        ,date_dim
        ,customer
        ,customer_address
        ,item
   where ss_sold_date_sk = d_date_sk
   and   ss_store_sk = s_store_sk
   and   ss_customer_sk= c_customer_sk
   and   ca_address_sk = c_current_addr_sk
   and   ss_item_sk = i_item_sk
   and   ca_gmt_offset = -7
   and   i_category = 'Electronics'
   and   s_gmt_offset = -7
   and   d_year = 1999
   and   d_moy  = 11) all_sales
order by promotions, total
limit 100
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Map 13 <- Reducer 22 (BROADCAST_EDGE), Reducer 30 (BROADCAST_EDGE), Reducer 34 (BROADCAST_EDGE), Reducer 38 (BROADCAST_EDGE), Reducer 8 (BROADCAST_EDGE)
Map 39 <- Reducer 11 (BROADCAST_EDGE), Reducer 28 (BROADCAST_EDGE), Reducer 31 (BROADCAST_EDGE), Reducer 35 (BROADCAST_EDGE)
Reducer 10 <- Reducer 9 (CUSTOM_SIMPLE_EDGE)
Reducer 11 <- Reducer 3 (CUSTOM_SIMPLE_EDGE)
Reducer 14 <- Map 13 (SIMPLE_EDGE), Map 21 (SIMPLE_EDGE)
Reducer 15 <- Map 29 (SIMPLE_EDGE), Reducer 14 (SIMPLE_EDGE)
Reducer 16 <- Reducer 15 (SIMPLE_EDGE)
Reducer 17 <- Reducer 16 (SIMPLE_EDGE), Reducer 33 (ONE_TO_ONE_EDGE)
Reducer 18 <- Reducer 17 (SIMPLE_EDGE)
Reducer 19 <- Reducer 18 (SIMPLE_EDGE), Reducer 37 (ONE_TO_ONE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 12 (SIMPLE_EDGE)
Reducer 20 <- Reducer 19 (SIMPLE_EDGE)
Reducer 22 <- Map 21 (CUSTOM_SIMPLE_EDGE)
Reducer 23 <- Map 21 (SIMPLE_EDGE), Map 39 (SIMPLE_EDGE)
Reducer 24 <- Map 29 (SIMPLE_EDGE), Reducer 23 (SIMPLE_EDGE)
Reducer 25 <- Reducer 24 (SIMPLE_EDGE)
Reducer 26 <- Reducer 25 (SIMPLE_EDGE), Reducer 33 (ONE_TO_ONE_EDGE)
Reducer 27 <- Reducer 26 (SIMPLE_EDGE)
Reducer 28 <- Map 21 (CUSTOM_SIMPLE_EDGE)
Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
Reducer 30 <- Map 29 (CUSTOM_SIMPLE_EDGE)
Reducer 31 <- Map 29 (CUSTOM_SIMPLE_EDGE)
Reducer 33 <- Map 32 (SIMPLE_EDGE)
Reducer 34 <- Reducer 33 (CUSTOM_SIMPLE_EDGE)
Reducer 35 <- Reducer 33 (CUSTOM_SIMPLE_EDGE)
Reducer 37 <- Map 36 (SIMPLE_EDGE)
Reducer 38 <- Reducer 37 (CUSTOM_SIMPLE_EDGE)
Reducer 4 <- Reducer 20 (ONE_TO_ONE_EDGE), Reducer 3 (ONE_TO_ONE_EDGE)
Reducer 5 <- Reducer 4 (CUSTOM_SIMPLE_EDGE)
Reducer 6 <- Reducer 10 (CUSTOM_SIMPLE_EDGE), Reducer 5 (CUSTOM_SIMPLE_EDGE)
Reducer 7 <- Reducer 6 (SIMPLE_EDGE)
Reducer 8 <- Reducer 3 (CUSTOM_SIMPLE_EDGE)
Reducer 9 <- Reducer 27 (ONE_TO_ONE_EDGE), Reducer 3 (ONE_TO_ONE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 7 vectorized
      File Output Operator [FS_420]
        Limit [LIM_419] (rows=1 width=225)
          Number of rows:100
          Select Operator [SEL_418] (rows=1 width=225)
            Output:["_col0","_col1","_col2"]
          <-Reducer 6 [SIMPLE_EDGE]
            SHUFFLE [RS_141]
              Select Operator [SEL_140] (rows=1 width=225)
                Output:["_col0","_col1","_col2"]
                Merge Join Operator [MERGEJOIN_319] (rows=1 width=225)
                  Conds:(Inner),Output:["_col0","_col1"]
                <-Reducer 10 [CUSTOM_SIMPLE_EDGE] vectorized
                  PARTITION_ONLY_SHUFFLE [RS_417]
                    Group By Operator [GBY_416] (rows=1 width=112)
                      Output:["_col0"],aggregations:["sum(VALUE._col0)"]
                    <-Reducer 9 [CUSTOM_SIMPLE_EDGE]
                      PARTITION_ONLY_SHUFFLE [RS_134]
                        Group By Operator [GBY_133] (rows=1 width=112)
                          Output:["_col0"],aggregations:["sum(_col4)"]
                          Select Operator [SEL_131] (rows=210828819 width=88)
                            Output:["_col4"]
                            Merge Join Operator [MERGEJOIN_318] (rows=210828819 width=88)
                              Conds:RS_329._col0=RS_415._col0(Inner),Output:["_col1","_col3"]
                            <-Reducer 3 [ONE_TO_ONE_EDGE] vectorized
                              FORWARD [RS_329]
                                PartitionCols:_col0
                                Group By Operator [GBY_326] (rows=44000000 width=860)
                                  Output:["_col0","_col1"],aggregations:["count(VALUE._col0)"],keys:KEY._col0
                                <-Reducer 2 [SIMPLE_EDGE]
                                  SHUFFLE [RS_11]
                                    PartitionCols:_col0
                                    Group By Operator [GBY_10] (rows=88000001 width=860)
                                      Output:["_col0","_col1"],aggregations:["count()"],keys:_col0
                                      Merge Join Operator [MERGEJOIN_308] (rows=88000001 width=860)
                                        Conds:RS_322._col1=RS_325._col0(Inner),Output:["_col0"]
                                      <-Map 1 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_322]
                                          PartitionCols:_col1
                                          Select Operator [SEL_321] (rows=80000000 width=860)
                                            Output:["_col0","_col1"]
                                            Filter Operator [FIL_320] (rows=80000000 width=860)
                                              predicate:(c_current_addr_sk is not null and c_customer_sk is not null)
                                              TableScan [TS_0] (rows=80000000 width=860)
                                                default@customer,customer,Tbl:COMPLETE,Col:NONE,Output:["c_customer_sk","c_current_addr_sk"]
                                      <-Map 12 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_325]
                                          PartitionCols:_col0
                                          Select Operator [SEL_324] (rows=20000000 width=1014)
                                            Output:["_col0"]
                                            Filter Operator [FIL_323] (rows=20000000 width=1014)
                                              predicate:((ca_gmt_offset = -7) and ca_address_sk is not null)
                                              TableScan [TS_3] (rows=40000000 width=1014)
                                                default@customer_address,customer_address,Tbl:COMPLETE,Col:NONE,Output:["ca_address_sk","ca_gmt_offset"]
                            <-Reducer 27 [ONE_TO_ONE_EDGE] vectorized
                              FORWARD [RS_415]
                                PartitionCols:_col0
                                Group By Operator [GBY_414] (rows=191662559 width=88)
                                  Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                                <-Reducer 26 [SIMPLE_EDGE]
                                  SHUFFLE [RS_125]
                                    PartitionCols:_col0
                                    Group By Operator [GBY_124] (rows=383325119 width=88)
                                      Output:["_col0","_col1"],aggregations:["sum(_col5)"],keys:_col0
                                      Select Operator [SEL_122] (rows=383325119 width=88)
                                        Output:["_col0","_col5"]
                                        Merge Join Operator [MERGEJOIN_316] (rows=383325119 width=88)
                                          Conds:RS_413._col1=RS_366._col0(Inner),Output:["_col0","_col2","_col4"]
                                        <-Reducer 33 [ONE_TO_ONE_EDGE] vectorized
                                          PARTITION_ONLY_SHUFFLE [RS_366]
                                            PartitionCols:_col0
                                            Group By Operator [GBY_363] (rows=426 width=1910)
                                              Output:["_col0","_col1"],aggregations:["count(VALUE._col0)"],keys:KEY._col0
                                            <-Map 32 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_362]
                                                PartitionCols:_col0
                                                Group By Operator [GBY_361] (rows=852 width=1910)
                                                  Output:["_col0","_col1"],aggregations:["count()"],keys:_col0
                                                  Select Operator [SEL_360] (rows=852 width=1910)
                                                    Output:["_col0"]
                                                    Filter Operator [FIL_359] (rows=852 width=1910)
                                                      predicate:((s_gmt_offset = -7) and s_store_sk is not null)
                                                      TableScan [TS_34] (rows=1704 width=1910)
                                                        default@store,store,Tbl:COMPLETE,Col:NONE,Output:["s_store_sk","s_gmt_offset"]
                                        <-Reducer 25 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_413]
                                            PartitionCols:_col1
                                            Select Operator [SEL_412] (rows=348477374 width=88)
                                              Output:["_col0","_col1","_col2"]
                                              Group By Operator [GBY_411] (rows=348477374 width=88)
                                                Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1
                                              <-Reducer 24 [SIMPLE_EDGE]
                                                SHUFFLE [RS_108]
                                                  PartitionCols:_col0, _col1
                                                  Group By Operator [GBY_107] (rows=696954748 width=88)
                                                    Output:["_col0","_col1","_col2"],aggregations:["sum(_col4)"],keys:_col3, _col2
                                                    Merge Join Operator [MERGEJOIN_313] (rows=696954748 width=88)
                                                      Conds:RS_103._col1=RS_351._col0(Inner),Output:["_col2","_col3","_col4"]
                                                    <-Map 29 [SIMPLE_EDGE] vectorized
                                                      PARTITION_ONLY_SHUFFLE [RS_351]
                                                        PartitionCols:_col0
                                                        Select Operator [SEL_348] (rows=231000 width=1436)
                                                          Output:["_col0"]
                                                          Filter Operator [FIL_347] (rows=231000 width=1436)
                                                            predicate:((i_category = 'Electronics') and i_item_sk is not null)
                                                            TableScan [TS_20] (rows=462000 width=1436)
                                                              default@item,item,Tbl:COMPLETE,Col:NONE,Output:["i_item_sk","i_category"]
                                                    <-Reducer 23 [SIMPLE_EDGE]
                                                      SHUFFLE [RS_103]
                                                        PartitionCols:_col1
                                                        Merge Join Operator [MERGEJOIN_312] (rows=633595212 width=88)
                                                          Conds:RS_410._col0=RS_339._col0(Inner),Output:["_col1","_col2","_col3","_col4"]
                                                        <-Map 21 [SIMPLE_EDGE] vectorized
                                                          PARTITION_ONLY_SHUFFLE [RS_339]
                                                            PartitionCols:_col0
                                                            Select Operator [SEL_336] (rows=18262 width=1119)
                                                              Output:["_col0"]
                                                              Filter Operator [FIL_335] (rows=18262 width=1119)
                                                                predicate:((d_moy = 11) and (d_year = 1999) and d_date_sk is not null)
                                                                TableScan [TS_17] (rows=73049 width=1119)
                                                                  default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_year","d_moy"]
                                                        <-Map 39 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_410]
                                                            PartitionCols:_col0
                                                            Select Operator [SEL_409] (rows=575995635 width=88)
                                                              Output:["_col0","_col1","_col2","_col3","_col4"]
                                                              Filter Operator [FIL_408] (rows=575995635 width=88)
                                                                predicate:((ss_customer_sk BETWEEN DynamicValue(RS_128_customer_c_customer_sk_min) AND DynamicValue(RS_128_customer_c_customer_sk_max) and in_bloom_filter(ss_customer_sk, DynamicValue(RS_128_customer_c_customer_sk_bloom_filter))) and (ss_item_sk BETWEEN DynamicValue(RS_104_item_i_item_sk_min) AND DynamicValue(RS_104_item_i_item_sk_max) and in_bloom_filter(ss_item_sk, DynamicValue(RS_104_item_i_item_sk_bloom_filter))) and (ss_sold_date_sk BETWEEN DynamicValue(RS_101_date_dim_d_date_sk_min) AND DynamicValue(RS_101_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_101_date_dim_d_date_sk_bloom_filter))) and (ss_store_sk BETWEEN DynamicValue(RS_120_store_s_store_sk_min) AND DynamicValue(RS_120_store_s_store_sk_max) and in_bloom_filter(ss_store_sk, DynamicValue(RS_120_store_s_store_sk_bloom_filter))) and ss_customer_sk is not null and ss_item_sk is not null and ss_sold_date_sk is not null and ss_store_sk is not null)
                                                                TableScan [TS_91] (rows=575995635 width=88)
                                                                  default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_date_sk","ss_item_sk","ss_customer_sk","ss_store_sk","ss_ext_sales_price"]
                                                                <-Reducer 11 [BROADCAST_EDGE] vectorized
                                                                  BROADCAST [RS_407]
                                                                    Group By Operator [GBY_406] (rows=1 width=16)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=44000000)"]
                                                                    <-Reducer 3 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                      FORWARD [RS_334]
                                                                        Group By Operator [GBY_332] (rows=1 width=16)
                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=44000000)"]
                                                                          Select Operator [SEL_330] (rows=44000000 width=860)
                                                                            Output:["_col0"]
                                                                             Please refer to the previous Group By Operator [GBY_326]
                                                                <-Reducer 28 [BROADCAST_EDGE] vectorized
                                                                  BROADCAST [RS_401]
                                                                    Group By Operator [GBY_400] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                    <-Map 21 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                      PARTITION_ONLY_SHUFFLE [RS_344]
                                                                        Group By Operator [GBY_342] (rows=1 width=12)
                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                          Select Operator [SEL_340] (rows=18262 width=1119)
                                                                            Output:["_col0"]
                                                                             Please refer to the previous Select Operator [SEL_336]
                                                                <-Reducer 31 [BROADCAST_EDGE] vectorized
                                                                  BROADCAST [RS_403]
                                                                    Group By Operator [GBY_402] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                    <-Map 29 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                      PARTITION_ONLY_SHUFFLE [RS_356]
                                                                        Group By Operator [GBY_354] (rows=1 width=12)
                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                          Select Operator [SEL_352] (rows=231000 width=1436)
                                                                            Output:["_col0"]
                                                                             Please refer to the previous Select Operator [SEL_348]
                                                                <-Reducer 35 [BROADCAST_EDGE] vectorized
                                                                  BROADCAST [RS_405]
                                                                    Group By Operator [GBY_404] (rows=1 width=16)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                    <-Reducer 33 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                      PARTITION_ONLY_SHUFFLE [RS_371]
                                                                        Group By Operator [GBY_369] (rows=1 width=16)
                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                          Select Operator [SEL_367] (rows=426 width=1910)
                                                                            Output:["_col0"]
                                                                             Please refer to the previous Group By Operator [GBY_363]
                <-Reducer 5 [CUSTOM_SIMPLE_EDGE] vectorized
                  PARTITION_ONLY_SHUFFLE [RS_399]
                    Group By Operator [GBY_398] (rows=1 width=112)
                      Output:["_col0"],aggregations:["sum(VALUE._col0)"]
                    <-Reducer 4 [CUSTOM_SIMPLE_EDGE]
                      PARTITION_ONLY_SHUFFLE [RS_74]
                        Group By Operator [GBY_73] (rows=1 width=112)
                          Output:["_col0"],aggregations:["sum(_col4)"]
                          Select Operator [SEL_71] (rows=115955852 width=88)
                            Output:["_col4"]
                            Merge Join Operator [MERGEJOIN_317] (rows=115955852 width=88)
                              Conds:RS_327._col0=RS_397._col0(Inner),Output:["_col1","_col3"]
                            <-Reducer 3 [ONE_TO_ONE_EDGE] vectorized
                              FORWARD [RS_327]
                                PartitionCols:_col0
                                 Please refer to the previous Group By Operator [GBY_326]
                            <-Reducer 20 [ONE_TO_ONE_EDGE] vectorized
                              FORWARD [RS_397]
                                PartitionCols:_col0
                                Group By Operator [GBY_396] (rows=105414409 width=88)
                                  Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                                <-Reducer 19 [SIMPLE_EDGE]
                                  SHUFFLE [RS_65]
                                    PartitionCols:_col0
                                    Group By Operator [GBY_64] (rows=210828819 width=88)
                                      Output:["_col0","_col1"],aggregations:["sum(_col5)"],keys:_col0
                                      Select Operator [SEL_62] (rows=210828819 width=88)
                                        Output:["_col0","_col5"]
                                        Merge Join Operator [MERGEJOIN_315] (rows=210828819 width=88)
                                          Conds:RS_395._col1=RS_379._col0(Inner),Output:["_col0","_col2","_col4"]
                                        <-Reducer 37 [ONE_TO_ONE_EDGE] vectorized
                                          PARTITION_ONLY_SHUFFLE [RS_379]
                                            PartitionCols:_col0
                                            Group By Operator [GBY_378] (rows=1150 width=1179)
                                              Output:["_col0","_col1"],aggregations:["count(VALUE._col0)"],keys:KEY._col0
                                            <-Map 36 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_377]
                                                PartitionCols:_col0
                                                Group By Operator [GBY_376] (rows=2300 width=1179)
                                                  Output:["_col0","_col1"],aggregations:["count()"],keys:_col0
                                                  Select Operator [SEL_375] (rows=2300 width=1179)
                                                    Output:["_col0"]
                                                    Filter Operator [FIL_374] (rows=2300 width=1179)
                                                      predicate:(((p_channel_dmail = 'Y') or (p_channel_email = 'Y') or (p_channel_tv = 'Y')) and p_promo_sk is not null)
                                                      TableScan [TS_51] (rows=2300 width=1179)
                                                        default@promotion,promotion,Tbl:COMPLETE,Col:NONE,Output:["p_promo_sk","p_channel_dmail","p_channel_email","p_channel_tv"]
                                        <-Reducer 18 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_395]
                                            PartitionCols:_col1
                                            Select Operator [SEL_394] (rows=191662559 width=88)
                                              Output:["_col0","_col1","_col2"]
                                              Group By Operator [GBY_393] (rows=191662559 width=88)
                                                Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1
                                              <-Reducer 17 [SIMPLE_EDGE]
                                                SHUFFLE [RS_48]
                                                  PartitionCols:_col0, _col1
                                                  Group By Operator [GBY_47] (rows=383325119 width=88)
                                                    Output:["_col0","_col1","_col2"],aggregations:["sum(_col6)"],keys:_col2, _col0
                                                    Select Operator [SEL_45] (rows=383325119 width=88)
                                                      Output:["_col0","_col2","_col6"]
                                                      Merge Join Operator [MERGEJOIN_314] (rows=383325119 width=88)
                                                        Conds:RS_392._col1=RS_364._col0(Inner),Output:["_col0","_col2","_col3","_col5"]
                                                      <-Reducer 33 [ONE_TO_ONE_EDGE] vectorized
                                                        PARTITION_ONLY_SHUFFLE [RS_364]
                                                          PartitionCols:_col0
                                                           Please refer to the previous Group By Operator [GBY_363]
                                                      <-Reducer 16 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_392]
                                                          PartitionCols:_col1
                                                          Select Operator [SEL_391] (rows=348477374 width=88)
                                                            Output:["_col0","_col1","_col2","_col3"]
                                                            Group By Operator [GBY_390] (rows=348477374 width=88)
                                                              Output:["_col0","_col1","_col2","_col3"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                            <-Reducer 15 [SIMPLE_EDGE]
                                                              SHUFFLE [RS_31]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_30] (rows=696954748 width=88)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["sum(_col5)"],keys:_col3, _col2, _col4
                                                                  Merge Join Operator [MERGEJOIN_310] (rows=696954748 width=88)
                                                                    Conds:RS_26._col1=RS_349._col0(Inner),Output:["_col2","_col3","_col4","_col5"]
                                                                  <-Map 29 [SIMPLE_EDGE] vectorized
                                                                    PARTITION_ONLY_SHUFFLE [RS_349]
                                                                      PartitionCols:_col0
                                                                       Please refer to the previous Select Operator [SEL_348]
                                                                  <-Reducer 14 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_26]
                                                                      PartitionCols:_col1
                                                                      Merge Join Operator [MERGEJOIN_309] (rows=633595212 width=88)
                                                                        Conds:RS_389._col0=RS_337._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5"]
                                                                      <-Map 21 [SIMPLE_EDGE] vectorized
                                                                        PARTITION_ONLY_SHUFFLE [RS_337]
                                                                          PartitionCols:_col0
                                                                           Please refer to the previous Select Operator [SEL_336]
                                                                      <-Map 13 [SIMPLE_EDGE] vectorized
                                                                        SHUFFLE [RS_389]
                                                                          PartitionCols:_col0
                                                                          Select Operator [SEL_388] (rows=575995635 width=88)
                                                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                                                            Filter Operator [FIL_387] (rows=575995635 width=88)
                                                                              predicate:((ss_customer_sk BETWEEN DynamicValue(RS_68_customer_c_customer_sk_min) AND DynamicValue(RS_68_customer_c_customer_sk_max) and in_bloom_filter(ss_customer_sk, DynamicValue(RS_68_customer_c_customer_sk_bloom_filter))) and (ss_item_sk BETWEEN DynamicValue(RS_27_item_i_item_sk_min) AND DynamicValue(RS_27_item_i_item_sk_max) and in_bloom_filter(ss_item_sk, DynamicValue(RS_27_item_i_item_sk_bloom_filter))) and (ss_promo_sk BETWEEN DynamicValue(RS_60_promotion_p_promo_sk_min) AND DynamicValue(RS_60_promotion_p_promo_sk_max) and in_bloom_filter(ss_promo_sk, DynamicValue(RS_60_promotion_p_promo_sk_bloom_filter))) and (ss_sold_date_sk BETWEEN DynamicValue(RS_24_date_dim_d_date_sk_min) AND DynamicValue(RS_24_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_24_date_dim_d_date_sk_bloom_filter))) and (ss_store_sk BETWEEN DynamicValue(RS_43_store_s_store_sk_min) AND DynamicValue(RS_43_store_s_store_sk_max) and in_bloom_filter(ss_store_sk, DynamicValue(RS_43_store_s_store_sk_bloom_filter))) and ss_customer_sk is not null and ss_item_sk is not null and ss_promo_sk is not null and ss_sold_date_sk is not null and ss_store_sk is not null)
                                                                              TableScan [TS_14] (rows=575995635 width=88)
                                                                                default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_date_sk","ss_item_sk","ss_customer_sk","ss_store_sk","ss_promo_sk","ss_ext_sales_price"]
                                                                              <-Reducer 22 [BROADCAST_EDGE] vectorized
                                                                                BROADCAST [RS_346]
                                                                                  Group By Operator [GBY_345] (rows=1 width=12)
                                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                  <-Map 21 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                    PARTITION_ONLY_SHUFFLE [RS_343]
                                                                                      Group By Operator [GBY_341] (rows=1 width=12)
                                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                        Select Operator [SEL_338] (rows=18262 width=1119)
                                                                                          Output:["_col0"]
                                                                                           Please refer to the previous Select Operator [SEL_336]
                                                                              <-Reducer 30 [BROADCAST_EDGE] vectorized
                                                                                BROADCAST [RS_358]
                                                                                  Group By Operator [GBY_357] (rows=1 width=12)
                                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                  <-Map 29 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                    PARTITION_ONLY_SHUFFLE [RS_355]
                                                                                      Group By Operator [GBY_353] (rows=1 width=12)
                                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                        Select Operator [SEL_350] (rows=231000 width=1436)
                                                                                          Output:["_col0"]
                                                                                           Please refer to the previous Select Operator [SEL_348]
                                                                              <-Reducer 34 [BROADCAST_EDGE] vectorized
                                                                                BROADCAST [RS_373]
                                                                                  Group By Operator [GBY_372] (rows=1 width=16)
                                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                  <-Reducer 33 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                    PARTITION_ONLY_SHUFFLE [RS_370]
                                                                                      Group By Operator [GBY_368] (rows=1 width=16)
                                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                        Select Operator [SEL_365] (rows=426 width=1910)
                                                                                          Output:["_col0"]
                                                                                           Please refer to the previous Group By Operator [GBY_363]
                                                                              <-Reducer 38 [BROADCAST_EDGE] vectorized
                                                                                BROADCAST [RS_384]
                                                                                  Group By Operator [GBY_383] (rows=1 width=16)
                                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                  <-Reducer 37 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                    PARTITION_ONLY_SHUFFLE [RS_382]
                                                                                      Group By Operator [GBY_381] (rows=1 width=16)
                                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                        Select Operator [SEL_380] (rows=1150 width=1179)
                                                                                          Output:["_col0"]
                                                                                           Please refer to the previous Group By Operator [GBY_378]
                                                                              <-Reducer 8 [BROADCAST_EDGE] vectorized
                                                                                BROADCAST [RS_386]
                                                                                  Group By Operator [GBY_385] (rows=1 width=16)
                                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=44000000)"]
                                                                                  <-Reducer 3 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                    FORWARD [RS_333]
                                                                                      Group By Operator [GBY_331] (rows=1 width=16)
                                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=44000000)"]
                                                                                        Select Operator [SEL_328] (rows=44000000 width=860)
                                                                                          Output:["_col0"]
                                                                                           Please refer to the previous Group By Operator [GBY_326]

